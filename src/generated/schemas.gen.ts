// This file is auto-generated by @hey-api/openapi-ts

export const AssetAdministrationShellSchema = {
    allOf: [
        {
            $ref: '#/components/schemas/Identifiable',
        },
        {
            $ref: '#/components/schemas/HasDataSpecification',
        },
        {
            required: ['assetInformation'],
            properties: {
                derivedFrom: {
                    $ref: '#/components/schemas/Reference',
                },
                assetInformation: {
                    $ref: '#/components/schemas/AssetInformation',
                },
                submodels: {
                    minItems: 1,
                    type: 'array',
                    items: {
                        $ref: '#/components/schemas/Reference',
                    },
                },
                modelType: {
                    pattern: '^AssetAdministrationShell$',
                    type: 'string',
                },
            },
        },
    ],
} as const;

export const IdentifiableSchema = {
    allOf: [
        {
            $ref: '#/components/schemas/Referable',
        },
        {
            required: ['id'],
            properties: {
                administration: {
                    $ref: '#/components/schemas/AdministrativeInformation',
                },
                id: {
                    maxLength: 2000,
                    minLength: 1,
                    pattern: '^([\\x09\\x0a\\x0d\\x20-\퟿\-\�]|\�[\�-\�]|[\�-\�][\�-\�]|\�[\�-\�])*$',
                    type: 'string',
                },
            },
        },
    ],
} as const;

export const ReferableSchema = {
    allOf: [
        {
            $ref: '#/components/schemas/HasExtensions',
        },
        {
            required: ['modelType'],
            properties: {
                category: {
                    maxLength: 128,
                    minLength: 1,
                    pattern: '^([\\x09\\x0a\\x0d\\x20-\퟿\-\�]|\�[\�-\�]|[\�-\�][\�-\�]|\�[\�-\�])*$',
                    type: 'string',
                },
                idShort: {
                    type: 'string',
                    allOf: [
                        {
                            maxLength: 128,
                            minLength: 1,
                        },
                        {
                            pattern: '^([\\x09\\x0a\\x0d\\x20-\퟿\-\�]|\�[\�-\�]|[\�-\�][\�-\�]|\�[\�-\�])*$',
                        },
                        {
                            pattern: '^[a-zA-Z][a-zA-Z0-9_]*$',
                        },
                    ],
                },
                displayName: {
                    minItems: 1,
                    type: 'array',
                    items: {
                        $ref: '#/components/schemas/LangStringNameType',
                    },
                },
                description: {
                    minItems: 1,
                    type: 'array',
                    items: {
                        $ref: '#/components/schemas/LangStringTextType',
                    },
                },
                modelType: {
                    $ref: '#/components/schemas/ModelType',
                },
            },
        },
    ],
} as const;

export const HasExtensionsSchema = {
    type: 'object',
    properties: {
        extensions: {
            minItems: 1,
            type: 'array',
            items: {
                $ref: '#/components/schemas/Extension',
            },
        },
    },
} as const;

export const ExtensionSchema = {
    allOf: [
        {
            $ref: '#/components/schemas/HasSemantics',
        },
        {
            required: ['name'],
            properties: {
                name: {
                    maxLength: 128,
                    minLength: 1,
                    pattern: '^([\\x09\\x0a\\x0d\\x20-\퟿\-\�]|\�[\�-\�]|[\�-\�][\�-\�]|\�[\�-\�])*$',
                    type: 'string',
                },
                valueType: {
                    $ref: '#/components/schemas/DataTypeDefXsd',
                },
                value: {
                    type: 'string',
                },
                refersTo: {
                    minItems: 1,
                    type: 'array',
                    items: {
                        $ref: '#/components/schemas/Reference',
                    },
                },
            },
        },
    ],
} as const;

export const HasSemanticsSchema = {
    type: 'object',
    properties: {
        semanticId: {
            $ref: '#/components/schemas/Reference',
        },
        supplementalSemanticIds: {
            minItems: 1,
            type: 'array',
            items: {
                $ref: '#/components/schemas/Reference',
            },
        },
    },
} as const;

export const ReferenceSchema = {
    allOf: [
        {
            $ref: '#/components/schemas/ReferenceParent',
        },
        {
            properties: {
                referredSemanticId: {
                    $ref: '#/components/schemas/ReferenceParent',
                },
            },
        },
    ],
} as const;

export const ReferenceParentSchema = {
    required: ['keys', 'type'],
    type: 'object',
    properties: {
        type: {
            $ref: '#/components/schemas/ReferenceTypes',
        },
        keys: {
            minItems: 1,
            type: 'array',
            items: {
                $ref: '#/components/schemas/Key',
            },
        },
    },
} as const;

export const ReferenceTypesSchema = {
    type: 'string',
    enum: ['ExternalReference', 'ModelReference'],
} as const;

export const KeySchema = {
    required: ['type', 'value'],
    type: 'object',
    properties: {
        type: {
            $ref: '#/components/schemas/KeyTypes',
        },
        value: {
            maxLength: 2000,
            minLength: 1,
            pattern: '^([\\x09\\x0a\\x0d\\x20-\퟿\-\�]|\�[\�-\�]|[\�-\�][\�-\�]|\�[\�-\�])*$',
            type: 'string',
        },
    },
} as const;

export const KeyTypesSchema = {
    type: 'string',
    enum: [
        'AnnotatedRelationshipElement',
        'AssetAdministrationShell',
        'BasicEventElement',
        'Blob',
        'Capability',
        'ConceptDescription',
        'DataElement',
        'Entity',
        'EventElement',
        'File',
        'FragmentReference',
        'GlobalReference',
        'Identifiable',
        'MultiLanguageProperty',
        'Operation',
        'Property',
        'Range',
        'Referable',
        'ReferenceElement',
        'RelationshipElement',
        'Submodel',
        'SubmodelElement',
        'SubmodelElementCollection',
        'SubmodelElementList',
    ],
} as const;

export const DataTypeDefXsdSchema = {
    type: 'string',
    enum: [
        'xs:anyURI',
        'xs:base64Binary',
        'xs:boolean',
        'xs:byte',
        'xs:date',
        'xs:dateTime',
        'xs:decimal',
        'xs:double',
        'xs:duration',
        'xs:float',
        'xs:gDay',
        'xs:gMonth',
        'xs:gMonthDay',
        'xs:gYear',
        'xs:gYearMonth',
        'xs:hexBinary',
        'xs:int',
        'xs:integer',
        'xs:long',
        'xs:negativeInteger',
        'xs:nonNegativeInteger',
        'xs:nonPositiveInteger',
        'xs:positiveInteger',
        'xs:short',
        'xs:string',
        'xs:time',
        'xs:unsignedByte',
        'xs:unsignedInt',
        'xs:unsignedLong',
        'xs:unsignedShort',
    ],
} as const;

export const LangStringNameTypeSchema = {
    allOf: [
        {
            $ref: '#/components/schemas/AbstractLangString',
        },
        {
            properties: {
                text: {
                    maxLength: 128,
                },
            },
        },
    ],
} as const;

export const AbstractLangStringSchema = {
    required: ['language', 'text'],
    type: 'object',
    properties: {
        language: {
            pattern:
                '^(([a-zA-Z]{2,3}(-[a-zA-Z]{3}(-[a-zA-Z]{3}){0,2})?|[a-zA-Z]{4}|[a-zA-Z]{5,8})(-[a-zA-Z]{4})?(-([a-zA-Z]{2}|[0-9]{3}))?(-(([a-zA-Z0-9]){5,8}|[0-9]([a-zA-Z0-9]){3}))*(-[0-9A-WY-Za-wy-z](-([a-zA-Z0-9]){2,8})+)*(-[xX](-([a-zA-Z0-9]){1,8})+)?|[xX](-([a-zA-Z0-9]){1,8})+|((en-GB-oed|i-ami|i-bnn|i-default|i-enochian|i-hak|i-klingon|i-lux|i-mingo|i-navajo|i-pwn|i-tao|i-tay|i-tsu|sgn-BE-FR|sgn-BE-NL|sgn-CH-DE)|(art-lojban|cel-gaulish|no-bok|no-nyn|zh-guoyu|zh-hakka|zh-min|zh-min-nan|zh-xiang)))$',
            type: 'string',
        },
        text: {
            minLength: 1,
            pattern: '^([\\x09\\x0a\\x0d\\x20-\퟿\-\�]|\�[\�-\�]|[\�-\�][\�-\�]|\�[\�-\�])*$',
            type: 'string',
        },
    },
} as const;

export const LangStringTextTypeSchema = {
    allOf: [
        {
            $ref: '#/components/schemas/AbstractLangString',
        },
        {
            properties: {
                text: {
                    maxLength: 1023,
                },
            },
        },
    ],
} as const;

export const ModelTypeSchema = {
    type: 'string',
    enum: [
        'AnnotatedRelationshipElement',
        'AssetAdministrationShell',
        'BasicEventElement',
        'Blob',
        'Capability',
        'ConceptDescription',
        'DataSpecificationIec61360',
        'Entity',
        'File',
        'MultiLanguageProperty',
        'Operation',
        'Property',
        'Range',
        'ReferenceElement',
        'RelationshipElement',
        'Submodel',
        'SubmodelElementCollection',
        'SubmodelElementList',
    ],
} as const;

export const AdministrativeInformationSchema = {
    allOf: [
        {
            $ref: '#/components/schemas/HasDataSpecification',
        },
        {
            properties: {
                version: {
                    type: 'string',
                    allOf: [
                        {
                            maxLength: 4,
                            minLength: 1,
                        },
                        {
                            pattern: '^([\\x09\\x0a\\x0d\\x20-\퟿\-\�]|\�[\�-\�]|[\�-\�][\�-\�]|\�[\�-\�])*$',
                        },
                        {
                            pattern: '^(0|[1-9][0-9]*)$',
                        },
                    ],
                },
                revision: {
                    type: 'string',
                    allOf: [
                        {
                            maxLength: 4,
                            minLength: 1,
                        },
                        {
                            pattern: '^([\\x09\\x0a\\x0d\\x20-\퟿\-\�]|\�[\�-\�]|[\�-\�][\�-\�]|\�[\�-\�])*$',
                        },
                        {
                            pattern: '^(0|[1-9][0-9]*)$',
                        },
                    ],
                },
                creator: {
                    $ref: '#/components/schemas/Reference',
                },
                templateId: {
                    maxLength: 2000,
                    minLength: 1,
                    pattern: '^([\\x09\\x0a\\x0d\\x20-\퟿\-\�]|\�[\�-\�]|[\�-\�][\�-\�]|\�[\�-\�])*$',
                    type: 'string',
                },
            },
        },
    ],
} as const;

export const HasDataSpecificationSchema = {
    type: 'object',
    properties: {
        embeddedDataSpecifications: {
            minItems: 1,
            type: 'array',
            items: {
                $ref: '#/components/schemas/EmbeddedDataSpecification',
            },
        },
    },
} as const;

export const EmbeddedDataSpecificationSchema = {
    required: ['dataSpecification', 'dataSpecificationContent'],
    type: 'object',
    properties: {
        dataSpecificationContent: {
            $ref: '#/components/schemas/DataSpecificationContent_choice',
        },
        dataSpecification: {
            $ref: '#/components/schemas/Reference',
        },
    },
} as const;

export const DataSpecificationContent_choiceSchema = {
    oneOf: [
        {
            $ref: '#/components/schemas/DataSpecificationIec61360',
        },
    ],
} as const;

export const DataSpecificationIec61360Schema = {
    allOf: [
        {
            $ref: '#/components/schemas/DataSpecificationContent',
        },
        {
            required: ['preferredName'],
            properties: {
                preferredName: {
                    minItems: 1,
                    type: 'array',
                    items: {
                        $ref: '#/components/schemas/LangStringPreferredNameTypeIec61360',
                    },
                },
                shortName: {
                    minItems: 1,
                    type: 'array',
                    items: {
                        $ref: '#/components/schemas/LangStringShortNameTypeIec61360',
                    },
                },
                unit: {
                    minLength: 1,
                    pattern: '^([\\x09\\x0a\\x0d\\x20-\퟿\-\�]|\�[\�-\�]|[\�-\�][\�-\�]|\�[\�-\�])*$',
                    type: 'string',
                },
                unitId: {
                    $ref: '#/components/schemas/Reference',
                },
                sourceOfDefinition: {
                    minLength: 1,
                    pattern: '^([\\x09\\x0a\\x0d\\x20-\퟿\-\�]|\�[\�-\�]|[\�-\�][\�-\�]|\�[\�-\�])*$',
                    type: 'string',
                },
                symbol: {
                    minLength: 1,
                    pattern: '^([\\x09\\x0a\\x0d\\x20-\퟿\-\�]|\�[\�-\�]|[\�-\�][\�-\�]|\�[\�-\�])*$',
                    type: 'string',
                },
                dataType: {
                    $ref: '#/components/schemas/DataTypeIec61360',
                },
                definition: {
                    minItems: 1,
                    type: 'array',
                    items: {
                        $ref: '#/components/schemas/LangStringDefinitionTypeIec61360',
                    },
                },
                valueFormat: {
                    minLength: 1,
                    pattern: '^([\\x09\\x0a\\x0d\\x20-\퟿\-\�]|\�[\�-\�]|[\�-\�][\�-\�]|\�[\�-\�])*$',
                    type: 'string',
                },
                valueList: {
                    $ref: '#/components/schemas/ValueList',
                },
                value: {
                    maxLength: 2000,
                    minLength: 1,
                    pattern: '^([\\x09\\x0a\\x0d\\x20-\퟿\-\�]|\�[\�-\�]|[\�-\�][\�-\�]|\�[\�-\�])*$',
                    type: 'string',
                },
                levelType: {
                    $ref: '#/components/schemas/LevelType',
                },
                modelType: {
                    pattern: '^DataSpecificationIec61360$',
                    type: 'string',
                },
            },
        },
    ],
} as const;

export const DataSpecificationContentSchema = {
    required: ['modelType'],
    type: 'object',
    properties: {
        modelType: {
            $ref: '#/components/schemas/ModelType',
        },
    },
} as const;

export const LangStringPreferredNameTypeIec61360Schema = {
    allOf: [
        {
            $ref: '#/components/schemas/AbstractLangString',
        },
        {
            properties: {
                text: {
                    maxLength: 255,
                },
            },
        },
    ],
} as const;

export const LangStringShortNameTypeIec61360Schema = {
    allOf: [
        {
            $ref: '#/components/schemas/AbstractLangString',
        },
        {
            properties: {
                text: {
                    maxLength: 18,
                },
            },
        },
    ],
} as const;

export const DataTypeIec61360Schema = {
    type: 'string',
    enum: [
        'BLOB',
        'BOOLEAN',
        'DATE',
        'FILE',
        'HTML',
        'INTEGER_COUNT',
        'INTEGER_CURRENCY',
        'INTEGER_MEASURE',
        'IRDI',
        'IRI',
        'RATIONAL',
        'RATIONAL_MEASURE',
        'REAL_COUNT',
        'REAL_CURRENCY',
        'REAL_MEASURE',
        'STRING',
        'STRING_TRANSLATABLE',
        'TIME',
        'TIMESTAMP',
    ],
} as const;

export const LangStringDefinitionTypeIec61360Schema = {
    allOf: [
        {
            $ref: '#/components/schemas/AbstractLangString',
        },
        {
            properties: {
                text: {
                    maxLength: 1023,
                },
            },
        },
    ],
} as const;

export const ValueListSchema = {
    required: ['valueReferencePairs'],
    type: 'object',
    properties: {
        valueReferencePairs: {
            minItems: 1,
            type: 'array',
            items: {
                $ref: '#/components/schemas/ValueReferencePair',
            },
        },
    },
} as const;

export const ValueReferencePairSchema = {
    required: ['value', 'valueId'],
    type: 'object',
    properties: {
        value: {
            maxLength: 2000,
            minLength: 1,
            pattern: '^([\\x09\\x0a\\x0d\\x20-\퟿\-\�]|\�[\�-\�]|[\�-\�][\�-\�]|\�[\�-\�])*$',
            type: 'string',
        },
        valueId: {
            $ref: '#/components/schemas/Reference',
        },
    },
} as const;

export const LevelTypeSchema = {
    required: ['max', 'min', 'nom', 'typ'],
    type: 'object',
    properties: {
        min: {
            type: 'boolean',
        },
        nom: {
            type: 'boolean',
        },
        typ: {
            type: 'boolean',
        },
        max: {
            type: 'boolean',
        },
    },
} as const;

export const AssetInformationSchema = {
    required: ['assetKind'],
    type: 'object',
    properties: {
        assetKind: {
            $ref: '#/components/schemas/AssetKind',
        },
        globalAssetId: {
            maxLength: 2000,
            minLength: 1,
            pattern: '^([\\x09\\x0a\\x0d\\x20-\퟿\-\�]|\�[\�-\�]|[\�-\�][\�-\�]|\�[\�-\�])*$',
            type: 'string',
        },
        specificAssetIds: {
            minItems: 1,
            type: 'array',
            items: {
                $ref: '#/components/schemas/SpecificAssetId',
            },
        },
        assetType: {
            maxLength: 2000,
            minLength: 1,
            pattern: '^([\\x09\\x0a\\x0d\\x20-\퟿\-\�]|\�[\�-\�]|[\�-\�][\�-\�]|\�[\�-\�])*$',
            type: 'string',
        },
        defaultThumbnail: {
            $ref: '#/components/schemas/Resource',
        },
    },
} as const;

export const AssetKindSchema = {
    type: 'string',
    enum: ['Instance', 'NotApplicable', 'Type'],
} as const;

export const SpecificAssetIdSchema = {
    allOf: [
        {
            $ref: '#/components/schemas/HasSemantics',
        },
        {
            required: ['name', 'value'],
            properties: {
                name: {
                    maxLength: 64,
                    minLength: 1,
                    pattern: '^([\\x09\\x0a\\x0d\\x20-\퟿\-\�]|\�[\�-\�]|[\�-\�][\�-\�]|\�[\�-\�])*$',
                    type: 'string',
                },
                value: {
                    maxLength: 2000,
                    minLength: 1,
                    pattern: '^([\\x09\\x0a\\x0d\\x20-\퟿\-\�]|\�[\�-\�]|[\�-\�][\�-\�]|\�[\�-\�])*$',
                    type: 'string',
                },
                externalSubjectId: {
                    $ref: '#/components/schemas/Reference',
                },
            },
        },
    ],
} as const;

export const ResourceSchema = {
    required: ['path'],
    type: 'object',
    properties: {
        path: {
            maxLength: 2000,
            minLength: 1,
            pattern: '^([\\x09\\x0a\\x0d\\x20-\퟿\-\�]|\�[\�-\�]|[\�-\�][\�-\�]|\�[\�-\�])*$',
            type: 'string',
        },
        contentType: {
            type: 'string',
            allOf: [
                {
                    maxLength: 100,
                    minLength: 1,
                },
                {
                    pattern: '^([\\x09\\x0a\\x0d\\x20-\퟿\-\�]|\�[\�-\�]|[\�-\�][\�-\�]|\�[\�-\�])*$',
                },
                {
                    pattern: `^([!#$%&'*+\-.^_\`|~0-9a-zA-Z])+/([!#$%&'*+\-.^_\`|~0-9a-zA-Z])+([ \t]*;[ \t]*([!#$%&'*+\-.^_\`|~0-9a-zA-Z])+=(([!#$%&'*+\-.^_\`|~0-9a-zA-Z])+|"(([\t !#-\[\]-~]|[-ÿ])|\\([\t !-~]|[-ÿ]))*"))*$`,
                },
            ],
        },
    },
} as const;

export const ResultSchema = {
    type: 'object',
    properties: {
        messages: {
            type: 'array',
            items: {
                $ref: '#/components/schemas/Message',
            },
        },
    },
} as const;

export const MessageSchema = {
    type: 'object',
    properties: {
        code: {
            maxLength: 32,
            minLength: 1,
            type: 'string',
        },
        correlationId: {
            maxLength: 128,
            minLength: 1,
            type: 'string',
        },
        messageType: {
            type: 'string',
            enum: ['Undefined', 'Info', 'Warning', 'Error', 'Exception'],
        },
        text: {
            type: 'string',
        },
        timestamp: {
            pattern:
                '^-?(([1-9][0-9][0-9][0-9]+)|(0[0-9][0-9][0-9]))-((0[1-9])|(1[0-2]))-((0[1-9])|([12][0-9])|(3[01]))T(((([01][0-9])|(2[0-3])):[0-5][0-9]:([0-5][0-9])(\\.[0-9]+)?)|24:00:00(\\.0+)?)(Z|\\+00:00|-00:00)$',
            type: 'string',
        },
    },
} as const;

export const GetReferencesResultSchema = {
    allOf: [
        {
            $ref: '#/components/schemas/PagedResult',
        },
        {
            type: 'object',
            properties: {
                result: {
                    type: 'array',
                    items: {
                        $ref: '#/components/schemas/Reference',
                    },
                },
            },
        },
    ],
} as const;

export const PagedResultSchema = {
    type: 'object',
    properties: {
        paging_metadata: {
            $ref: '#/components/schemas/PagedResult_paging_metadata',
        },
    },
} as const;

export const SubmodelSchema = {
    allOf: [
        {
            $ref: '#/components/schemas/Identifiable',
        },
        {
            $ref: '#/components/schemas/HasKind',
        },
        {
            $ref: '#/components/schemas/HasSemantics',
        },
        {
            $ref: '#/components/schemas/Qualifiable',
        },
        {
            $ref: '#/components/schemas/HasDataSpecification',
        },
        {
            properties: {
                submodelElements: {
                    minItems: 1,
                    type: 'array',
                    items: {
                        $ref: '#/components/schemas/SubmodelElement_choice',
                    },
                },
                modelType: {
                    pattern: '^Submodel$',
                    type: 'string',
                },
            },
        },
    ],
} as const;

export const HasKindSchema = {
    type: 'object',
    properties: {
        kind: {
            $ref: '#/components/schemas/ModellingKind',
        },
    },
} as const;

export const ModellingKindSchema = {
    type: 'string',
    enum: ['Instance', 'Template'],
} as const;

export const QualifiableSchema = {
    required: ['modelType'],
    type: 'object',
    properties: {
        qualifiers: {
            minItems: 1,
            type: 'array',
            items: {
                $ref: '#/components/schemas/Qualifier',
            },
        },
        modelType: {
            $ref: '#/components/schemas/ModelType',
        },
    },
} as const;

export const QualifierSchema = {
    allOf: [
        {
            $ref: '#/components/schemas/HasSemantics',
        },
        {
            required: ['type', 'valueType'],
            properties: {
                kind: {
                    $ref: '#/components/schemas/QualifierKind',
                },
                type: {
                    maxLength: 128,
                    minLength: 1,
                    pattern: '^([\\x09\\x0a\\x0d\\x20-\퟿\-\�]|\�[\�-\�]|[\�-\�][\�-\�]|\�[\�-\�])*$',
                    type: 'string',
                },
                valueType: {
                    $ref: '#/components/schemas/DataTypeDefXsd',
                },
                value: {
                    type: 'string',
                },
                valueId: {
                    $ref: '#/components/schemas/Reference',
                },
            },
        },
    ],
} as const;

export const QualifierKindSchema = {
    type: 'string',
    enum: ['ConceptQualifier', 'TemplateQualifier', 'ValueQualifier'],
} as const;

export const SubmodelElement_choiceSchema = {
    oneOf: [
        {
            $ref: '#/components/schemas/RelationshipElement',
        },
        {
            $ref: '#/components/schemas/AnnotatedRelationshipElement',
        },
        {
            $ref: '#/components/schemas/BasicEventElement',
        },
        {
            $ref: '#/components/schemas/Blob',
        },
        {
            $ref: '#/components/schemas/Capability',
        },
        {
            $ref: '#/components/schemas/Entity',
        },
        {
            $ref: '#/components/schemas/File',
        },
        {
            $ref: '#/components/schemas/MultiLanguageProperty',
        },
        {
            $ref: '#/components/schemas/Operation',
        },
        {
            $ref: '#/components/schemas/Property',
        },
        {
            $ref: '#/components/schemas/Range',
        },
        {
            $ref: '#/components/schemas/ReferenceElement',
        },
        {
            $ref: '#/components/schemas/SubmodelElementCollection',
        },
        {
            $ref: '#/components/schemas/SubmodelElementList',
        },
    ],
} as const;

export const RelationshipElementSchema = {
    allOf: [
        {
            $ref: '#/components/schemas/RelationshipElement_abstract',
        },
        {
            properties: {
                modelType: {
                    pattern: '^RelationshipElement$',
                    type: 'string',
                },
            },
        },
    ],
} as const;

export const RelationshipElement_abstractSchema = {
    allOf: [
        {
            $ref: '#/components/schemas/SubmodelElement',
        },
        {
            required: ['first', 'second'],
            properties: {
                first: {
                    $ref: '#/components/schemas/Reference',
                },
                second: {
                    $ref: '#/components/schemas/Reference',
                },
            },
        },
    ],
} as const;

export const SubmodelElementSchema = {
    allOf: [
        {
            $ref: '#/components/schemas/Referable',
        },
        {
            $ref: '#/components/schemas/HasSemantics',
        },
        {
            $ref: '#/components/schemas/Qualifiable',
        },
        {
            $ref: '#/components/schemas/HasDataSpecification',
        },
    ],
} as const;

export const AnnotatedRelationshipElementSchema = {
    allOf: [
        {
            $ref: '#/components/schemas/RelationshipElement_abstract',
        },
        {
            properties: {
                annotations: {
                    minItems: 1,
                    type: 'array',
                    items: {
                        $ref: '#/components/schemas/DataElement_choice',
                    },
                },
                modelType: {
                    pattern: '^AnnotatedRelationshipElement$',
                    type: 'string',
                },
            },
        },
    ],
} as const;

export const DataElement_choiceSchema = {
    oneOf: [
        {
            $ref: '#/components/schemas/Blob',
        },
        {
            $ref: '#/components/schemas/File',
        },
        {
            $ref: '#/components/schemas/MultiLanguageProperty',
        },
        {
            $ref: '#/components/schemas/Property',
        },
        {
            $ref: '#/components/schemas/Range',
        },
        {
            $ref: '#/components/schemas/ReferenceElement',
        },
    ],
} as const;

export const BlobSchema = {
    allOf: [
        {
            $ref: '#/components/schemas/DataElement',
        },
        {
            required: ['contentType'],
            properties: {
                value: {
                    type: 'string',
                    format: 'byte',
                },
                contentType: {
                    type: 'string',
                    allOf: [
                        {
                            maxLength: 100,
                            minLength: 1,
                        },
                        {
                            pattern: '^([\\x09\\x0a\\x0d\\x20-\퟿\-\�]|\�[\�-\�]|[\�-\�][\�-\�]|\�[\�-\�])*$',
                        },
                        {
                            pattern: `^([!#$%&'*+\-.^_\`|~0-9a-zA-Z])+/([!#$%&'*+\-.^_\`|~0-9a-zA-Z])+([ \t]*;[ \t]*([!#$%&'*+\-.^_\`|~0-9a-zA-Z])+=(([!#$%&'*+\-.^_\`|~0-9a-zA-Z])+|"(([\t !#-\[\]-~]|[-ÿ])|\\([\t !-~]|[-ÿ]))*"))*$`,
                        },
                    ],
                },
                modelType: {
                    pattern: '^Blob$',
                    type: 'string',
                },
            },
        },
    ],
} as const;

export const DataElementSchema = {
    allOf: [
        {
            $ref: '#/components/schemas/Referable',
        },
        {
            $ref: '#/components/schemas/HasSemantics',
        },
        {
            $ref: '#/components/schemas/Qualifiable',
        },
        {
            $ref: '#/components/schemas/HasDataSpecification',
        },
    ],
} as const;

export const FileSchema = {
    allOf: [
        {
            $ref: '#/components/schemas/DataElement',
        },
        {
            required: ['contentType'],
            properties: {
                value: {
                    maxLength: 2000,
                    minLength: 1,
                    pattern: '^([\\x09\\x0a\\x0d\\x20-\퟿\-\�]|\�[\�-\�]|[\�-\�][\�-\�]|\�[\�-\�])*$',
                    type: 'string',
                },
                contentType: {
                    type: 'string',
                    allOf: [
                        {
                            maxLength: 100,
                            minLength: 1,
                        },
                        {
                            pattern: '^([\\x09\\x0a\\x0d\\x20-\퟿\-\�]|\�[\�-\�]|[\�-\�][\�-\�]|\�[\�-\�])*$',
                        },
                        {
                            pattern: `^([!#$%&'*+\-.^_\`|~0-9a-zA-Z])+/([!#$%&'*+\-.^_\`|~0-9a-zA-Z])+([ \t]*;[ \t]*([!#$%&'*+\-.^_\`|~0-9a-zA-Z])+=(([!#$%&'*+\-.^_\`|~0-9a-zA-Z])+|"(([\t !#-\[\]-~]|[-ÿ])|\\([\t !-~]|[-ÿ]))*"))*$`,
                        },
                    ],
                },
                modelType: {
                    pattern: '^File$',
                    type: 'string',
                },
            },
        },
    ],
} as const;

export const MultiLanguagePropertySchema = {
    allOf: [
        {
            $ref: '#/components/schemas/DataElement',
        },
        {
            properties: {
                value: {
                    minItems: 1,
                    type: 'array',
                    items: {
                        $ref: '#/components/schemas/LangStringTextType',
                    },
                },
                valueId: {
                    $ref: '#/components/schemas/Reference',
                },
                modelType: {
                    pattern: '^MultiLanguageProperty$',
                    type: 'string',
                },
            },
        },
    ],
} as const;

export const PropertySchema = {
    allOf: [
        {
            $ref: '#/components/schemas/DataElement',
        },
        {
            required: ['valueType'],
            properties: {
                valueType: {
                    $ref: '#/components/schemas/DataTypeDefXsd',
                },
                value: {
                    type: 'string',
                },
                valueId: {
                    $ref: '#/components/schemas/Reference',
                },
                modelType: {
                    pattern: '^Property$',
                    type: 'string',
                },
            },
        },
    ],
} as const;

export const RangeSchema = {
    allOf: [
        {
            $ref: '#/components/schemas/DataElement',
        },
        {
            required: ['valueType'],
            properties: {
                valueType: {
                    $ref: '#/components/schemas/DataTypeDefXsd',
                },
                min: {
                    type: 'string',
                },
                max: {
                    type: 'string',
                },
                modelType: {
                    pattern: '^Range$',
                    type: 'string',
                },
            },
        },
    ],
} as const;

export const ReferenceElementSchema = {
    allOf: [
        {
            $ref: '#/components/schemas/DataElement',
        },
        {
            properties: {
                value: {
                    $ref: '#/components/schemas/Reference',
                },
                modelType: {
                    pattern: '^ReferenceElement$',
                    type: 'string',
                },
            },
        },
    ],
} as const;

export const BasicEventElementSchema = {
    allOf: [
        {
            $ref: '#/components/schemas/EventElement',
        },
        {
            required: ['direction', 'observed', 'state'],
            properties: {
                observed: {
                    $ref: '#/components/schemas/Reference',
                },
                direction: {
                    $ref: '#/components/schemas/Direction',
                },
                state: {
                    $ref: '#/components/schemas/StateOfEvent',
                },
                messageTopic: {
                    maxLength: 255,
                    minLength: 1,
                    pattern: '^([\\x09\\x0a\\x0d\\x20-\퟿\-\�]|\�[\�-\�]|[\�-\�][\�-\�]|\�[\�-\�])*$',
                    type: 'string',
                },
                messageBroker: {
                    $ref: '#/components/schemas/Reference',
                },
                lastUpdate: {
                    pattern:
                        '^-?(([1-9][0-9][0-9][0-9]+)|(0[0-9][0-9][0-9]))-((0[1-9])|(1[0-2]))-((0[1-9])|([12][0-9])|(3[01]))T(((([01][0-9])|(2[0-3])):[0-5][0-9]:([0-5][0-9])(\\.[0-9]+)?)|24:00:00(\\.0+)?)(Z|\\+00:00|-00:00)$',
                    type: 'string',
                },
                minInterval: {
                    pattern:
                        '^-?P((([0-9]+Y([0-9]+M)?([0-9]+D)?|([0-9]+M)([0-9]+D)?|([0-9]+D))(T(([0-9]+H)([0-9]+M)?([0-9]+(\\.[0-9]+)?S)?|([0-9]+M)([0-9]+(\\.[0-9]+)?S)?|([0-9]+(\\.[0-9]+)?S)))?)|(T(([0-9]+H)([0-9]+M)?([0-9]+(\\.[0-9]+)?S)?|([0-9]+M)([0-9]+(\\.[0-9]+)?S)?|([0-9]+(\\.[0-9]+)?S))))$',
                    type: 'string',
                },
                maxInterval: {
                    pattern:
                        '^-?P((([0-9]+Y([0-9]+M)?([0-9]+D)?|([0-9]+M)([0-9]+D)?|([0-9]+D))(T(([0-9]+H)([0-9]+M)?([0-9]+(\\.[0-9]+)?S)?|([0-9]+M)([0-9]+(\\.[0-9]+)?S)?|([0-9]+(\\.[0-9]+)?S)))?)|(T(([0-9]+H)([0-9]+M)?([0-9]+(\\.[0-9]+)?S)?|([0-9]+M)([0-9]+(\\.[0-9]+)?S)?|([0-9]+(\\.[0-9]+)?S))))$',
                    type: 'string',
                },
                modelType: {
                    pattern: '^BasicEventElement$',
                    type: 'string',
                },
            },
        },
    ],
} as const;

export const EventElementSchema = {
    allOf: [
        {
            $ref: '#/components/schemas/Referable',
        },
        {
            $ref: '#/components/schemas/HasSemantics',
        },
        {
            $ref: '#/components/schemas/Qualifiable',
        },
        {
            $ref: '#/components/schemas/HasDataSpecification',
        },
    ],
} as const;

export const DirectionSchema = {
    type: 'string',
    enum: ['input', 'output'],
} as const;

export const StateOfEventSchema = {
    type: 'string',
    enum: ['off', 'on'],
} as const;

export const CapabilitySchema = {
    allOf: [
        {
            $ref: '#/components/schemas/SubmodelElement',
        },
        {
            properties: {
                modelType: {
                    pattern: '^Capability$',
                    type: 'string',
                },
            },
        },
    ],
} as const;

export const EntitySchema = {
    allOf: [
        {
            $ref: '#/components/schemas/SubmodelElement',
        },
        {
            required: ['entityType'],
            properties: {
                statements: {
                    minItems: 1,
                    type: 'array',
                    items: {
                        $ref: '#/components/schemas/SubmodelElement_choice',
                    },
                },
                entityType: {
                    $ref: '#/components/schemas/EntityType',
                },
                globalAssetId: {
                    maxLength: 2000,
                    minLength: 1,
                    pattern: '^([\\x09\\x0a\\x0d\\x20-\퟿\-\�]|\�[\�-\�]|[\�-\�][\�-\�]|\�[\�-\�])*$',
                    type: 'string',
                },
                specificAssetIds: {
                    minItems: 1,
                    type: 'array',
                    items: {
                        $ref: '#/components/schemas/SpecificAssetId',
                    },
                },
                modelType: {
                    pattern: '^Entity$',
                    type: 'string',
                },
            },
        },
    ],
} as const;

export const EntityTypeSchema = {
    type: 'string',
    enum: ['CoManagedEntity', 'SelfManagedEntity'],
} as const;

export const OperationSchema = {
    allOf: [
        {
            $ref: '#/components/schemas/SubmodelElement',
        },
        {
            properties: {
                inputVariables: {
                    minItems: 1,
                    type: 'array',
                    items: {
                        $ref: '#/components/schemas/OperationVariable',
                    },
                },
                outputVariables: {
                    minItems: 1,
                    type: 'array',
                    items: {
                        $ref: '#/components/schemas/OperationVariable',
                    },
                },
                inoutputVariables: {
                    minItems: 1,
                    type: 'array',
                    items: {
                        $ref: '#/components/schemas/OperationVariable',
                    },
                },
                modelType: {
                    pattern: '^Operation$',
                    type: 'string',
                },
            },
        },
    ],
} as const;

export const OperationVariableSchema = {
    required: ['value'],
    type: 'object',
    properties: {
        value: {
            $ref: '#/components/schemas/SubmodelElement_choice',
        },
    },
} as const;

export const SubmodelElementCollectionSchema = {
    allOf: [
        {
            $ref: '#/components/schemas/SubmodelElement',
        },
        {
            properties: {
                value: {
                    minItems: 1,
                    type: 'array',
                    items: {
                        $ref: '#/components/schemas/SubmodelElement_choice',
                    },
                },
                modelType: {
                    pattern: '^SubmodelElementCollection$',
                    type: 'string',
                },
            },
        },
    ],
} as const;

export const SubmodelElementListSchema = {
    allOf: [
        {
            $ref: '#/components/schemas/SubmodelElement',
        },
        {
            required: ['typeValueListElement'],
            properties: {
                orderRelevant: {
                    type: 'boolean',
                },
                semanticIdListElement: {
                    $ref: '#/components/schemas/Reference',
                },
                typeValueListElement: {
                    $ref: '#/components/schemas/AasSubmodelElements',
                },
                valueTypeListElement: {
                    $ref: '#/components/schemas/DataTypeDefXsd',
                },
                value: {
                    minItems: 1,
                    type: 'array',
                    items: {
                        $ref: '#/components/schemas/SubmodelElement_choice',
                    },
                },
                modelType: {
                    pattern: '^SubmodelElementList$',
                    type: 'string',
                },
            },
        },
    ],
} as const;

export const AasSubmodelElementsSchema = {
    type: 'string',
    enum: [
        'AnnotatedRelationshipElement',
        'BasicEventElement',
        'Blob',
        'Capability',
        'DataElement',
        'Entity',
        'EventElement',
        'File',
        'MultiLanguageProperty',
        'Operation',
        'Property',
        'Range',
        'ReferenceElement',
        'RelationshipElement',
        'SubmodelElement',
        'SubmodelElementCollection',
        'SubmodelElementList',
    ],
} as const;

export const SubmodelMetadataSchema = {
    allOf: [
        {
            $ref: '#/components/schemas/Identifiable',
        },
        {
            $ref: '#/components/schemas/HasDataSpecification',
        },
        {
            $ref: '#/components/schemas/Qualifiable',
        },
        {
            $ref: '#/components/schemas/HasSemantics',
        },
        {
            $ref: '#/components/schemas/HasKind',
        },
    ],
} as const;

export const SubmodelValueSchema = {
    type: 'object',
    description:
        "The ValueOnly serialization (patternProperties and propertyNames will be supported probably with OpenApi 3.1). For the full description of the generic JSON validation schema see the ValueOnly-Serialization as defined in the 'Specification of the Asset Administration Shell - Part 2'.",
} as const;

export const PathItemSchema = {
    pattern: '^([A-Za-z][A-Za-z0-9_]+)((\\.[A-Za-z][A-Za-z0-9_]+)|(\\[(0|[1-9][0-9]*)\\])){0,}$',
    type: 'string',
} as const;

export const GetSubmodelElementsResultSchema = {
    allOf: [
        {
            $ref: '#/components/schemas/PagedResult',
        },
        {
            type: 'object',
            properties: {
                result: {
                    type: 'array',
                    items: {
                        $ref: '#/components/schemas/SubmodelElement',
                    },
                },
            },
        },
    ],
} as const;

export const GetSubmodelElementsMetadataResultSchema = {
    allOf: [
        {
            $ref: '#/components/schemas/PagedResult',
        },
        {
            type: 'object',
            properties: {
                result: {
                    type: 'array',
                    items: {
                        $ref: '#/components/schemas/SubmodelElementMetadata',
                    },
                },
            },
        },
    ],
} as const;

export const SubmodelElementMetadataSchema = {
    oneOf: [
        {
            $ref: '#/components/schemas/BlobMetadata',
        },
        {
            $ref: '#/components/schemas/FileMetadata',
        },
        {
            $ref: '#/components/schemas/CapabilityMetadata',
        },
        {
            $ref: '#/components/schemas/EntityMetadata',
        },
        {
            $ref: '#/components/schemas/BasicEventElementMetadata',
        },
        {
            $ref: '#/components/schemas/MultiLanguagePropertyMetadata',
        },
        {
            $ref: '#/components/schemas/OperationMetadata',
        },
        {
            $ref: '#/components/schemas/PropertyMetadata',
        },
        {
            $ref: '#/components/schemas/RangeMetadata',
        },
        {
            $ref: '#/components/schemas/ReferenceElementMetadata',
        },
        {
            $ref: '#/components/schemas/AnnotatedRelationshipElementMetadata',
        },
        {
            $ref: '#/components/schemas/RelationshipElementMetadata',
        },
        {
            $ref: '#/components/schemas/SubmodelElementListMetadata',
        },
        {
            $ref: '#/components/schemas/SubmodelElementCollectionMetadata',
        },
    ],
} as const;

export const BlobMetadataSchema = {
    allOf: [
        {
            $ref: '#/components/schemas/Referable_1',
        },
        {
            $ref: '#/components/schemas/HasDataSpecification',
        },
        {
            $ref: '#/components/schemas/HasSemantics_1',
        },
        {
            $ref: '#/components/schemas/Qualifiable_1',
        },
        {
            $ref: '#/components/schemas/HasKind_1',
        },
    ],
} as const;

export const FileMetadataSchema = {
    allOf: [
        {
            $ref: '#/components/schemas/SubmodelElementAttributes',
        },
    ],
} as const;

export const SubmodelElementAttributesSchema = {
    allOf: [
        {
            $ref: '#/components/schemas/Referable_1',
        },
        {
            $ref: '#/components/schemas/HasDataSpecification',
        },
        {
            $ref: '#/components/schemas/HasSemantics_1',
        },
        {
            $ref: '#/components/schemas/Qualifiable_1',
        },
        {
            $ref: '#/components/schemas/HasKind_1',
        },
    ],
} as const;

export const Referable_1Schema = {
    allOf: [
        {
            $ref: '#/components/schemas/HasExtensions',
        },
        {
            required: ['modelType'],
            properties: {
                category: {
                    maxLength: 128,
                    minLength: 1,
                    pattern: '^([\\t\\n\\r -퟿-�]|\�[\�-\�]|[\�-\�][\�-\�]|\�[\�-\�])*$',
                    type: 'string',
                },
                idShort: {
                    type: 'string',
                    allOf: [
                        {
                            maxLength: 128,
                            minLength: 1,
                        },
                        {
                            pattern: '^([\\t\\n\\r -퟿-�]|\�[\�-\�]|[\�-\�][\�-\�]|\�[\�-\�])*$',
                        },
                        {
                            pattern: '^[a-zA-Z][a-zA-Z0-9_]*$',
                        },
                    ],
                },
                displayName: {
                    minItems: 1,
                    type: 'array',
                    items: {
                        $ref: '#/components/schemas/LangStringNameType',
                    },
                },
                description: {
                    minItems: 1,
                    type: 'array',
                    items: {
                        $ref: '#/components/schemas/LangStringTextType',
                    },
                },
                modelType: {
                    $ref: '#/components/schemas/ModelType',
                },
            },
        },
    ],
} as const;

export const HasSemantics_1Schema = {
    type: 'object',
    properties: {
        semanticId: {
            $ref: '#/components/schemas/Reference',
        },
        supplementalSemanticIds: {
            minItems: 1,
            type: 'array',
            items: {
                $ref: '#/components/schemas/Reference',
            },
        },
    },
} as const;

export const Qualifiable_1Schema = {
    required: ['modelType'],
    type: 'object',
    properties: {
        qualifiers: {
            minItems: 1,
            type: 'array',
            items: {
                $ref: '#/components/schemas/Qualifier_1',
            },
        },
        modelType: {
            $ref: '#/components/schemas/ModelType',
        },
    },
} as const;

export const Qualifier_1Schema = {
    allOf: [
        {
            $ref: '#/components/schemas/HasSemantics_1',
        },
        {
            required: ['type', 'valueType'],
            properties: {
                kind: {
                    $ref: '#/components/schemas/QualifierKind',
                },
                type: {
                    maxLength: 128,
                    minLength: 1,
                    pattern: '^([\\t\\n\\r -퟿-�]|\�[\�-\�]|[\�-\�][\�-\�]|\�[\�-\�])*$',
                    type: 'string',
                },
                valueType: {
                    $ref: '#/components/schemas/DataTypeDefXsd',
                },
                value: {
                    type: 'string',
                },
                valueId: {
                    $ref: '#/components/schemas/Reference',
                },
            },
        },
    ],
} as const;

export const HasKind_1Schema = {
    type: 'object',
    properties: {
        kind: {
            $ref: '#/components/schemas/ModellingKind',
        },
    },
} as const;

export const CapabilityMetadataSchema = {
    allOf: [
        {
            $ref: '#/components/schemas/SubmodelElementAttributes',
        },
    ],
} as const;

export const EntityMetadataSchema = {
    allOf: [
        {
            $ref: '#/components/schemas/SubmodelElementAttributes',
        },
    ],
} as const;

export const BasicEventElementMetadataSchema = {
    allOf: [
        {
            $ref: '#/components/schemas/SubmodelElementAttributes',
        },
        {
            properties: {
                direction: {
                    $ref: '#/components/schemas/Direction',
                },
                state: {
                    $ref: '#/components/schemas/StateOfEvent',
                },
                messageTopic: {
                    maxLength: 255,
                    type: 'string',
                },
                messageBroker: {
                    $ref: '#/components/schemas/Reference',
                },
                lastUpdate: {
                    type: 'string',
                },
                minInterval: {
                    type: 'string',
                },
                maxInterval: {
                    type: 'string',
                },
            },
        },
    ],
} as const;

export const MultiLanguagePropertyMetadataSchema = {
    allOf: [
        {
            $ref: '#/components/schemas/SubmodelElementAttributes',
        },
    ],
} as const;

export const OperationMetadataSchema = {
    allOf: [
        {
            $ref: '#/components/schemas/SubmodelElementAttributes',
        },
    ],
} as const;

export const PropertyMetadataSchema = {
    properties: {
        valueType: {
            $ref: '#/components/schemas/DataTypeDefXsd',
        },
    },
    allOf: [
        {
            $ref: '#/components/schemas/SubmodelElementAttributes',
        },
    ],
} as const;

export const RangeMetadataSchema = {
    properties: {
        valueType: {
            $ref: '#/components/schemas/DataTypeDefXsd',
        },
    },
    allOf: [
        {
            $ref: '#/components/schemas/SubmodelElementAttributes',
        },
    ],
} as const;

export const ReferenceElementMetadataSchema = {
    allOf: [
        {
            $ref: '#/components/schemas/SubmodelElementAttributes',
        },
    ],
} as const;

export const AnnotatedRelationshipElementMetadataSchema = {
    allOf: [
        {
            $ref: '#/components/schemas/Referable_1',
        },
        {
            $ref: '#/components/schemas/HasDataSpecification',
        },
        {
            $ref: '#/components/schemas/HasSemantics_1',
        },
        {
            $ref: '#/components/schemas/Qualifiable_1',
        },
        {
            $ref: '#/components/schemas/HasKind_1',
        },
    ],
} as const;

export const RelationshipElementMetadataSchema = {
    allOf: [
        {
            $ref: '#/components/schemas/SubmodelElementAttributes',
        },
    ],
} as const;

export const SubmodelElementListMetadataSchema = {
    properties: {
        orderRelevant: {
            type: 'boolean',
        },
        semanticIdListElement: {
            $ref: '#/components/schemas/Reference',
        },
        typeValueListElement: {
            $ref: '#/components/schemas/ModelType',
        },
        valueTypeListElement: {
            $ref: '#/components/schemas/DataTypeDefXsd',
        },
    },
    allOf: [
        {
            $ref: '#/components/schemas/SubmodelElementAttributes',
        },
    ],
} as const;

export const SubmodelElementCollectionMetadataSchema = {
    allOf: [
        {
            $ref: '#/components/schemas/SubmodelElementAttributes',
        },
    ],
} as const;

export const GetSubmodelElementsValueResultSchema = {
    allOf: [
        {
            $ref: '#/components/schemas/PagedResult',
        },
        {
            type: 'object',
            properties: {
                result: {
                    type: 'array',
                    items: {
                        $ref: '#/components/schemas/SubmodelElementValue',
                    },
                },
            },
        },
    ],
} as const;

export const SubmodelElementValueSchema = {
    oneOf: [
        {
            $ref: '#/components/schemas/BasicEventElementValue',
        },
        {
            $ref: '#/components/schemas/PropertyValue',
        },
        {
            $ref: '#/components/schemas/MultiLanguagePropertyValue',
        },
        {
            $ref: '#/components/schemas/BlobValue',
        },
        {
            $ref: '#/components/schemas/FileValue',
        },
        {
            $ref: '#/components/schemas/RangeValue',
        },
        {
            $ref: '#/components/schemas/ReferenceElementValue',
        },
        {
            $ref: '#/components/schemas/RelationshipElementValue',
        },
        {
            $ref: '#/components/schemas/AnnotatedRelationshipElementValue',
        },
        {
            $ref: '#/components/schemas/EntityValue',
        },
        {
            $ref: '#/components/schemas/SubmodelElementCollectionValue',
        },
        {
            $ref: '#/components/schemas/SubmodelElementListValue',
        },
    ],
} as const;

export const BasicEventElementValueSchema = {
    required: ['observed'],
    type: 'object',
    properties: {
        observed: {
            $ref: '#/components/schemas/ReferenceValue',
        },
    },
} as const;

export const ReferenceValueSchema = {
    type: 'object',
    properties: {
        type: {
            $ref: '#/components/schemas/ReferenceTypes',
        },
        keys: {
            type: 'array',
            items: {
                $ref: '#/components/schemas/Key',
            },
        },
    },
} as const;

export const PropertyValueSchema = {
    oneOf: [
        {
            $ref: '#/components/schemas/StringValue',
        },
        {
            $ref: '#/components/schemas/NumberValue',
        },
        {
            $ref: '#/components/schemas/BooleanValue',
        },
    ],
} as const;

export const StringValueSchema = {
    type: 'string',
} as const;

export const NumberValueSchema = {
    type: 'number',
} as const;

export const BooleanValueSchema = {
    type: 'boolean',
} as const;

export const MultiLanguagePropertyValueSchema = {
    type: 'object',
    description:
        'Since patternProperties and propertyNames are not supported by OpenApi yet, the ValueOnly serialization for this elements works with the key-attribute as the JSON-property name and the value-attribute as the corresponding value.',
} as const;

export const BlobValueSchema = {
    required: ['contentType'],
    type: 'object',
    properties: {
        contentType: {
            maxLength: 100,
            minLength: 1,
            type: 'string',
        },
        value: {
            type: 'string',
        },
    },
} as const;

export const FileValueSchema = {
    required: ['contentType', 'value'],
    type: 'object',
    properties: {
        contentType: {
            maxLength: 100,
            minLength: 1,
            type: 'string',
        },
        value: {
            maxLength: 2000,
            minLength: 1,
            type: 'string',
        },
    },
} as const;

export const RangeValueSchema = {
    type: 'object',
    properties: {
        max: {
            $ref: '#/components/schemas/RangeValueType',
        },
        min: {
            $ref: '#/components/schemas/RangeValueType',
        },
    },
} as const;

export const RangeValueTypeSchema = {
    oneOf: [
        {
            $ref: '#/components/schemas/StringValue',
        },
        {
            $ref: '#/components/schemas/NumberValue',
        },
        {
            $ref: '#/components/schemas/BooleanValue',
        },
    ],
} as const;

export const ReferenceElementValueSchema = {
    type: 'object',
    properties: {
        type: {
            $ref: '#/components/schemas/ReferenceTypes',
        },
        keys: {
            type: 'array',
            items: {
                $ref: '#/components/schemas/Key',
            },
        },
    },
} as const;

export const RelationshipElementValueSchema = {
    required: ['first', 'second'],
    type: 'object',
    properties: {
        first: {
            $ref: '#/components/schemas/ReferenceValue',
        },
        second: {
            $ref: '#/components/schemas/ReferenceValue',
        },
    },
} as const;

export const AnnotatedRelationshipElementValueSchema = {
    required: ['first', 'second'],
    type: 'object',
    properties: {
        first: {
            $ref: '#/components/schemas/ReferenceValue',
        },
        second: {
            $ref: '#/components/schemas/ReferenceValue',
        },
        annotations: {
            type: 'array',
            items: {
                $ref: '#/components/schemas/ValueOnly',
            },
        },
    },
} as const;

export const ValueOnlySchema = {
    type: 'object',
    description:
        "The ValueOnly serialization (patternProperties and propertyNames will be supported probably with OpenApi 3.1). For the full description of the generic JSON validation schema see the ValueOnly-Serialization as defined in the 'Specification of the Asset Administration Shell - Part 2'.",
} as const;

export const EntityValueSchema = {
    required: ['entityType'],
    type: 'object',
    properties: {
        entityType: {
            $ref: '#/components/schemas/EntityType',
        },
        globalAssetId: {
            maxLength: 2000,
            minLength: 1,
            pattern: '^([\\x09\\x0a\\x0d\\x20-\퟿\-\�]|\�[\�-\�]|[\�-\�][\�-\�]|\�[\�-\�])*$',
            type: 'string',
        },
        specificAssetIds: {
            type: 'array',
            items: {
                $ref: '#/components/schemas/SpecificAssetIdValue',
            },
        },
        statements: {
            type: 'array',
            items: {
                $ref: '#/components/schemas/ValueOnly',
            },
        },
    },
} as const;

export const SpecificAssetIdValueSchema = {
    type: 'object',
    description:
        'Since patternProperties and propertyNames are not supported by OpenApi yet, the ValueOnly serialization for this elements works with the key-attribute as the JSON-property name and the value-attribute as the corresponding value.',
} as const;

export const SubmodelElementCollectionValueSchema = {
    type: 'object',
    description:
        'Since patternProperties and propertyNames are not supported by OpenApi yet, the ValueOnly serialization for this elements works with the key-attribute as the JSON-property name and the value-attribute as the corresponding value.',
} as const;

export const SubmodelElementListValueSchema = {
    type: 'array',
    items: {
        $ref: '#/components/schemas/SubmodelElementValue',
    },
} as const;

export const GetPathItemsResultSchema = {
    allOf: [
        {
            $ref: '#/components/schemas/PagedResult',
        },
        {
            type: 'object',
            properties: {
                result: {
                    type: 'array',
                    items: {
                        $ref: '#/components/schemas/PathItem',
                    },
                },
            },
        },
    ],
} as const;

export const OperationRequestSchema = {
    type: 'object',
    properties: {
        inoutputArguments: {
            type: 'array',
            items: {
                $ref: '#/components/schemas/OperationVariable',
            },
        },
        inputArguments: {
            type: 'array',
            items: {
                $ref: '#/components/schemas/OperationVariable',
            },
        },
        clientTimeoutDuration: {
            pattern:
                '^-?P((([0-9]+Y([0-9]+M)?([0-9]+D)?|([0-9]+M)([0-9]+D)?|([0-9]+D))(T(([0-9]+H)([0-9]+M)?([0-9]+(\\.[0-9]+)?S)?|([0-9]+M)([0-9]+(\\.[0-9]+)?S)?|([0-9]+(\\.[0-9]+)?S)))?)|(T(([0-9]+H)([0-9]+M)?([0-9]+(\\.[0-9]+)?S)?|([0-9]+M)([0-9]+(\\.[0-9]+)?S)?|([0-9]+(\\.[0-9]+)?S))))$',
            type: 'string',
        },
    },
} as const;

export const OperationResultSchema = {
    type: 'object',
    allOf: [
        {
            $ref: '#/components/schemas/BaseOperationResult',
        },
        {
            properties: {
                inoutputArguments: {
                    type: 'array',
                    items: {
                        $ref: '#/components/schemas/OperationVariable',
                    },
                },
                outputArguments: {
                    type: 'array',
                    items: {
                        $ref: '#/components/schemas/OperationVariable',
                    },
                },
            },
        },
    ],
} as const;

export const BaseOperationResultSchema = {
    allOf: [
        {
            $ref: '#/components/schemas/Result',
        },
        {
            properties: {
                executionState: {
                    $ref: '#/components/schemas/ExecutionState',
                },
                success: {
                    type: 'boolean',
                },
            },
        },
    ],
} as const;

export const ExecutionStateSchema = {
    type: 'string',
    enum: ['Initiated', 'Running', 'Completed', 'Canceled', 'Failed', 'Timeout'],
} as const;

export const OperationRequestValueOnlySchema = {
    required: ['clientTimeoutDuration'],
    type: 'object',
    properties: {
        inoutputArguments: {
            $ref: '#/components/schemas/ValueOnly',
        },
        inputArguments: {
            $ref: '#/components/schemas/ValueOnly',
        },
        clientTimeoutDuration: {
            pattern:
                '^-?P((([0-9]+Y([0-9]+M)?([0-9]+D)?|([0-9]+M)([0-9]+D)?|([0-9]+D))(T(([0-9]+H)([0-9]+M)?([0-9]+(\\.[0-9]+)?S)?|([0-9]+M)([0-9]+(\\.[0-9]+)?S)?|([0-9]+(\\.[0-9]+)?S)))?)|(T(([0-9]+H)([0-9]+M)?([0-9]+(\\.[0-9]+)?S)?|([0-9]+M)([0-9]+(\\.[0-9]+)?S)?|([0-9]+(\\.[0-9]+)?S))))$',
            type: 'string',
        },
    },
} as const;

export const OperationResultValueOnlySchema = {
    type: 'object',
    allOf: [
        {
            $ref: '#/components/schemas/BaseOperationResult',
        },
        {
            properties: {
                inoutputArguments: {
                    $ref: '#/components/schemas/ValueOnly',
                },
                outputArguments: {
                    $ref: '#/components/schemas/ValueOnly',
                },
            },
        },
    ],
} as const;

export const GetAssetAdministrationShellsResultSchema = {
    allOf: [
        {
            $ref: '#/components/schemas/PagedResult',
        },
        {
            type: 'object',
            properties: {
                result: {
                    type: 'array',
                    items: {
                        $ref: '#/components/schemas/AssetAdministrationShell',
                    },
                },
            },
        },
    ],
} as const;

export const GetSubmodelsResultSchema = {
    allOf: [
        {
            $ref: '#/components/schemas/PagedResult',
        },
        {
            type: 'object',
            properties: {
                result: {
                    type: 'array',
                    items: {
                        $ref: '#/components/schemas/Submodel',
                    },
                },
            },
        },
    ],
} as const;

export const GetSubmodelsMetadataResultSchema = {
    allOf: [
        {
            $ref: '#/components/schemas/PagedResult',
        },
        {
            type: 'object',
            properties: {
                result: {
                    type: 'array',
                    items: {
                        $ref: '#/components/schemas/SubmodelMetadata',
                    },
                },
            },
        },
    ],
} as const;

export const GetSubmodelsValueResultSchema = {
    allOf: [
        {
            $ref: '#/components/schemas/PagedResult',
        },
        {
            type: 'object',
            properties: {
                result: {
                    type: 'array',
                    items: {
                        $ref: '#/components/schemas/SubmodelValue',
                    },
                },
            },
        },
    ],
} as const;

export const GetConceptDescriptionsResultSchema = {
    allOf: [
        {
            $ref: '#/components/schemas/PagedResult',
        },
        {
            type: 'object',
            properties: {
                result: {
                    type: 'array',
                    items: {
                        $ref: '#/components/schemas/ConceptDescription',
                    },
                },
            },
        },
    ],
} as const;

export const ConceptDescriptionSchema = {
    allOf: [
        {
            $ref: '#/components/schemas/Identifiable',
        },
        {
            $ref: '#/components/schemas/HasDataSpecification',
        },
        {
            properties: {
                isCaseOf: {
                    minItems: 1,
                    type: 'array',
                    items: {
                        $ref: '#/components/schemas/Reference',
                    },
                },
                modelType: {
                    pattern: '^ConceptDescription$',
                    type: 'string',
                },
            },
        },
    ],
} as const;

export const GetAssetAdministrationShellDescriptorsResultSchema = {
    allOf: [
        {
            $ref: '#/components/schemas/PagedResult',
        },
        {
            type: 'object',
            properties: {
                result: {
                    type: 'array',
                    items: {
                        $ref: '#/components/schemas/AssetAdministrationShellDescriptor',
                    },
                },
            },
        },
    ],
} as const;

export const AssetAdministrationShellDescriptorSchema = {
    required: ['id'],
    type: 'object',
    example:
        '{ "id": "https://example.org/aas/motor", "endpoints": [ { "protocolInformation": { "href": "https://localhost:1234/api/v3.0/aas", "endpointProtocol": "HTTP", "endpointProtocolVersion": ["1.1"] }, "interface": "AAS-3.0" }, { "protocolInformation": { "href": "opc.tcp://localhost:4840" }, "interface": "AAS-3.0" }, { "protocolInformation": { "href": "https://localhost:5678", "endpointProtocol": "HTTP", "endpointProtocolVersion": ["1.1"], "subprotocol": "OPC UA Basic SOAP", "subprotocolBody": "ns=2;s=MyAAS", "subprotocolBodyEncoding": "application/soap+xml" }, "interface": "AAS-3.0" } ] }',
    allOf: [
        {
            $ref: '#/components/schemas/Descriptor',
        },
        {
            properties: {
                administration: {
                    $ref: '#/components/schemas/AdministrativeInformation',
                },
                assetKind: {
                    $ref: '#/components/schemas/AssetKind',
                },
                assetType: {
                    maxLength: 2000,
                    minLength: 1,
                    pattern: '^([\\x09\\x0a\\x0d\\x20-\퟿\-\�]|\�[\�-\�]|[\�-\�][\�-\�]|\�[\�-\�])*$',
                    type: 'string',
                },
                endpoints: {
                    minItems: 1,
                    type: 'array',
                    items: {
                        $ref: '#/components/schemas/Endpoint',
                    },
                },
                globalAssetId: {
                    maxLength: 2000,
                    minLength: 1,
                    pattern: '^([\\x09\\x0a\\x0d\\x20-\퟿\-\�]|\�[\�-\�]|[\�-\�][\�-\�]|\�[\�-\�])*$',
                    type: 'string',
                },
                idShort: {
                    maxLength: 128,
                    type: 'string',
                },
                id: {
                    maxLength: 2000,
                    minLength: 1,
                    pattern: '^([\\x09\\x0a\\x0d\\x20-\퟿\-\�]|\�[\�-\�]|[\�-\�][\�-\�]|\�[\�-\�])*$',
                    type: 'string',
                },
                specificAssetIds: {
                    type: 'array',
                    items: {
                        $ref: '#/components/schemas/SpecificAssetId',
                    },
                },
                submodelDescriptors: {
                    type: 'array',
                    items: {
                        $ref: '#/components/schemas/SubmodelDescriptor',
                    },
                },
            },
        },
    ],
} as const;

export const DescriptorSchema = {
    type: 'object',
    properties: {
        description: {
            type: 'array',
            items: {
                $ref: '#/components/schemas/LangStringTextType',
            },
        },
        displayName: {
            type: 'array',
            items: {
                $ref: '#/components/schemas/LangStringNameType',
            },
        },
        extensions: {
            minItems: 1,
            type: 'array',
            items: {
                $ref: '#/components/schemas/Extension',
            },
        },
    },
    example:
        '{ "endpoints": [ { "protocolInformation": { "href": "https://localhost:1234/api/v3.0/aas", "endpointProtocolVersion": ["1.1"] }, "interface": "AAS-3.0" }, { "protocolInformation": { "href": "opc.tcp://localhost:4840" }, "interface": "AAS-3.0" }, { "protocolInformation": { "href": "https://localhost:5678", "endpointProtocolVersion": ["1.1"], "subprotocol": "OPC UA Basic SOAP", "subprotocolBody": "ns=2;s=MyAAS", "subprotocolBodyEncoding": "application/soap+xml" }, "interface": "AAS-3.0" } ] }',
} as const;

export const EndpointSchema = {
    required: ['interface', 'protocolInformation'],
    type: 'object',
    properties: {
        interface: {
            maxLength: 128,
            type: 'string',
        },
        protocolInformation: {
            $ref: '#/components/schemas/ProtocolInformation',
        },
    },
} as const;

export const ProtocolInformationSchema = {
    required: ['href'],
    type: 'object',
    properties: {
        href: {
            maxLength: 2048,
            type: 'string',
        },
        endpointProtocol: {
            maxLength: 128,
            type: 'string',
        },
        endpointProtocolVersion: {
            type: 'array',
            items: {
                maxLength: 128,
                type: 'string',
            },
        },
        subprotocol: {
            maxLength: 128,
            type: 'string',
        },
        subprotocolBody: {
            maxLength: 128,
            type: 'string',
        },
        subprotocolBodyEncoding: {
            maxLength: 128,
            type: 'string',
        },
        securityAttributes: {
            minItems: 1,
            type: 'array',
            items: {
                $ref: '#/components/schemas/ProtocolInformation_securityAttributes',
            },
        },
    },
} as const;

export const SubmodelDescriptorSchema = {
    required: ['endpoints', 'id'],
    type: 'object',
    properties: {
        administration: {
            $ref: '#/components/schemas/AdministrativeInformation',
        },
        endpoints: {
            minItems: 1,
            type: 'array',
            items: {
                $ref: '#/components/schemas/Endpoint',
            },
        },
        idShort: {
            maxLength: 128,
            type: 'string',
        },
        id: {
            maxLength: 2000,
            minLength: 1,
            pattern: '^([\\x09\\x0a\\x0d\\x20-\퟿\-\�]|\�[\�-\�]|[\�-\�][\�-\�]|\�[\�-\�])*$',
            type: 'string',
        },
        semanticId: {
            $ref: '#/components/schemas/Reference',
        },
        supplementalSemanticId: {
            minItems: 1,
            type: 'array',
            items: {
                $ref: '#/components/schemas/Reference',
            },
        },
    },
    example:
        '{ "id": "https://admin-shell.io/zvei/nameplate/1/0/Nameplate", "endpoints": [ { "href": { "href": "https://localhost:1234/api/v3.0/submodel", "endpointProtocol": "HTTP", "endpointProtocolVersion": ["1.1"] }, "interface": "AAS-3.0" }, { "protocolInformation": { "href": "opc.tcp://localhost:4840" }, "interface": "AAS-3.0" }, { "protocolInformation": { "href": "https://localhost:5678", "endpointProtocol": "HTTP", "endpointProtocolVersion": ["1.1"], "subprotocol": "OPC UA Basic SOAP", "subprotocolBody": "ns=2;s=MyAAS", "subprotocolBodyEncoding": "application/soap+xml" }, "interface": "AAS-3.0" } ] }',
    allOf: [
        {
            $ref: '#/components/schemas/Descriptor',
        },
    ],
} as const;

export const GetSubmodelDescriptorsResultSchema = {
    allOf: [
        {
            $ref: '#/components/schemas/PagedResult',
        },
        {
            type: 'object',
            properties: {
                result: {
                    type: 'array',
                    items: {
                        $ref: '#/components/schemas/SubmodelDescriptor',
                    },
                },
            },
        },
    ],
} as const;

export const GetPackageDescriptionsResultSchema = {
    allOf: [
        {
            $ref: '#/components/schemas/PagedResult',
        },
        {
            type: 'object',
            properties: {
                result: {
                    type: 'array',
                    items: {
                        $ref: '#/components/schemas/PackageDescription',
                    },
                },
            },
        },
    ],
} as const;

export const PackageDescriptionSchema = {
    type: 'object',
    properties: {
        aasIds: {
            type: 'array',
            items: {
                maxLength: 2000,
                pattern: '^([\\x09\\x0a\\x0d\\x20-\퟿\-\�]|\�[\�-\�]|[\�-\�][\�-\�]|\�[\�-\�])*$',
                type: 'string',
            },
        },
        packageId: {
            maxLength: 128,
            type: 'string',
        },
    },
} as const;

export const EnvironmentSchema = {
    type: 'object',
    properties: {
        assetAdministrationShells: {
            minItems: 1,
            type: 'array',
            items: {
                $ref: '#/components/schemas/AssetAdministrationShell',
            },
        },
        submodels: {
            minItems: 1,
            type: 'array',
            items: {
                $ref: '#/components/schemas/Submodel',
            },
        },
        conceptDescriptions: {
            minItems: 1,
            type: 'array',
            items: {
                $ref: '#/components/schemas/ConceptDescription',
            },
        },
    },
} as const;

export const ServiceDescriptionSchema = {
    type: 'object',
    properties: {
        profiles: {
            minItems: 1,
            type: 'array',
            items: {
                type: 'string',
                example:
                    '["https://admin-shell.io/aas/API/3/0/AssetAdministrationShellServiceSpecification/SSP-001","https://admin-shell.io/aas/API/3/0/AssetAdministrationShellServiceSpecification/SSP-002","https://admin-shell.io/aas/API/3/0/SubmodelServiceSpecification/SSP-001","https://admin-shell.io/aas/API/3/0/SubmodelServiceSpecification/SSP-002","https://admin-shell.io/aas/API/3/0/SubmodelServiceSpecification/SSP-003","https://admin-shell.io/aas/API/3/0/AasxFileServerServiceSpecification/SSP-001","https://admin-shell.io/aas/API/3/0/AssetAdministrationShellRegistryServiceSpecification/SSP-001","https://admin-shell.io/aas/API/3/0/AssetAdministrationShellRegistryServiceSpecification/SSP-002","https://admin-shell.io/aas/API/3/0/SubmodelRegistryServiceSpecification/SSP-001","https://admin-shell.io/aas/API/3/0/SubmodelRegistryServiceSpecification/SSP-002","https://admin-shell.io/aas/API/3/0/DiscoveryServiceSpecification/SSP-001","https://admin-shell.io/aas/API/3/0/AssetAdministrationShellRepositoryServiceSpecification/SSP-001","https://admin-shell.io/aas/API/3/0/AssetAdministrationShellRepositoryServiceSpecification/SSP-002","https://admin-shell.io/aas/API/3/0/SubmodelRepositoryServiceSpecification/SSP-001","https://admin-shell.io/aas/API/3/0/SubmodelRepositoryServiceSpecification/SSP-002","https://admin-shell.io/aas/API/3/0/SubmodelRepositoryServiceSpecification/SSP-003","https://admin-shell.io/aas/API/3/0/SubmodelRepositoryServiceSpecification/SSP-004","https://admin-shell.io/aas/API/3/0/ConceptDescriptionServiceSpecification/SSP-001"]',
            },
        },
    },
    description:
        'The Description object enables servers to present their capabilities to the clients, in particular which profiles they implement. At least one defined profile is required. Additional, proprietary attributes might be included. Nevertheless, the server must not expect that a regular client understands them.',
    example: `{
  "profiles": [
    "https://admin-shell.io/aas/API/3/0/AssetAdministrationShellRegistryServiceSpecification/SSP-002",
    "https://admin-shell.io/aas/API/3/0/SubmodelRegistryServiceSpecification/SSP-002"
  ]
}`,
} as const;

export const assetinformation_thumbnail_bodySchema = {
    type: 'object',
    properties: {
        fileName: {
            type: 'string',
        },
        file: {
            type: 'string',
            format: 'binary',
        },
    },
} as const;

export const idShortPath_attachment_bodySchema = {
    type: 'object',
    properties: {
        fileName: {
            type: 'string',
        },
        file: {
            type: 'string',
            format: 'binary',
        },
    },
} as const;

export const idShortPath_attachment_body_1Schema = {
    type: 'object',
    properties: {
        fileName: {
            type: 'string',
        },
        file: {
            type: 'string',
            format: 'binary',
        },
    },
} as const;

export const assetinformation_thumbnail_body_1Schema = {
    type: 'object',
    properties: {
        fileName: {
            type: 'string',
        },
        file: {
            type: 'string',
            format: 'binary',
        },
    },
} as const;

export const idShortPath_attachment_body_2Schema = {
    type: 'object',
    properties: {
        fileName: {
            type: 'string',
        },
        file: {
            type: 'string',
            format: 'binary',
        },
    },
} as const;

export const idShortPath_attachment_body_3Schema = {
    type: 'object',
    properties: {
        fileName: {
            type: 'string',
        },
        file: {
            type: 'string',
            format: 'binary',
        },
    },
} as const;

export const inline_response_200Schema = {
    allOf: [
        {
            $ref: '#/components/schemas/PagedResult',
        },
        {
            type: 'object',
            properties: {
                result: {
                    type: 'array',
                    items: {
                        type: 'string',
                    },
                },
            },
        },
    ],
} as const;

export const packages_bodySchema = {
    type: 'object',
    properties: {
        aasIds: {
            type: 'array',
            items: {
                type: 'string',
            },
        },
        file: {
            type: 'string',
            format: 'binary',
        },
        fileName: {
            type: 'string',
        },
    },
} as const;

export const packages_packageId_bodySchema = {
    type: 'object',
    properties: {
        aasIds: {
            type: 'array',
            items: {
                type: 'string',
            },
        },
        file: {
            type: 'string',
            format: 'binary',
        },
        fileName: {
            type: 'string',
        },
    },
} as const;

export const PagedResult_paging_metadataSchema = {
    type: 'object',
    properties: {
        cursor: {
            type: 'string',
            example: 'wJlCDLIl6KTWypN7T6vc6nWEmEYe99Hjf1XY1xmqV-M=#',
        },
    },
} as const;

export const ProtocolInformation_securityAttributesSchema = {
    required: ['key', 'type', 'value'],
    type: 'object',
    properties: {
        type: {
            type: 'string',
            enum: ['NONE', 'RFC_TLSA', 'W3C_DID'],
        },
        key: {
            type: 'string',
        },
        value: {
            type: 'string',
        },
    },
} as const;
