/* tslint:disable */
/* eslint-disable */
/**
 * DotAAS Part 2 | HTTP/REST | AASX File Server API
 * The AASX file server API as part of Details of the Asset Administration Shell Part 2
 *
 * The version of the OpenAPI document: V1.0RC03
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import * as runtime from '../../runtime';
import type {
  PackageDescription,
  Result,
} from '../models/index';

export interface DeleteAASXByPackageIdRequest {
    packageId: string;
}

export interface GetAASXByPackageIdRequest {
    packageId: string;
}

export interface GetAllAASXPackageIdsRequest {
    aasId?: string;
}

export interface PostAASXPackageRequest {
    aasIds?: Array<string>;
    file?: Blob;
    fileName?: string;
}

export interface PutAASXByPackageIdRequest {
    packageId: string;
    aasIds?: Array<string>;
    file?: Blob;
    fileName?: string;
}

/**
 * 
 */
export class AASXFileServerAPIApi extends runtime.BaseAPI {

    /**
     * Deletes a specific AASX package from the server
     */
    async deleteAASXByPackageIdRaw(requestParameters: DeleteAASXByPackageIdRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>> {
        if (requestParameters['packageId'] == null) {
            throw new runtime.RequiredError(
                'packageId',
                'Required parameter "packageId" was null or undefined when calling deleteAASXByPackageId().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/packages/{packageId}`.replace(`{${"packageId"}}`, encodeURIComponent(String(requestParameters['packageId']))),
            method: 'DELETE',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     * Deletes a specific AASX package from the server
     */
    async deleteAASXByPackageId(requestParameters: DeleteAASXByPackageIdRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void> {
        await this.deleteAASXByPackageIdRaw(requestParameters, initOverrides);
    }

    /**
     * Returns a specific AASX package from the server
     */
    async getAASXByPackageIdRaw(requestParameters: GetAASXByPackageIdRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Blob>> {
        if (requestParameters['packageId'] == null) {
            throw new runtime.RequiredError(
                'packageId',
                'Required parameter "packageId" was null or undefined when calling getAASXByPackageId().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/packages/{packageId}`.replace(`{${"packageId"}}`, encodeURIComponent(String(requestParameters['packageId']))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.BlobApiResponse(response);
    }

    /**
     * Returns a specific AASX package from the server
     */
    async getAASXByPackageId(requestParameters: GetAASXByPackageIdRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Blob> {
        const response = await this.getAASXByPackageIdRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Returns a list of available AASX packages at the server
     */
    async getAllAASXPackageIdsRaw(requestParameters: GetAllAASXPackageIdsRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Array<PackageDescription>>> {
        const queryParameters: any = {};

        if (requestParameters['aasId'] != null) {
            queryParameters['aasId'] = requestParameters['aasId'];
        }

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/packages`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response);
    }

    /**
     * Returns a list of available AASX packages at the server
     */
    async getAllAASXPackageIds(requestParameters: GetAllAASXPackageIdsRequest = {}, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Array<PackageDescription>> {
        const response = await this.getAllAASXPackageIdsRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Stores the AASX package at the server
     */
    async postAASXPackageRaw(requestParameters: PostAASXPackageRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<PackageDescription>> {
        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const consumes: runtime.Consume[] = [
            { contentType: 'multipart/form-data' },
        ];
        // @ts-ignore: canConsumeForm may be unused
        const canConsumeForm = runtime.canConsumeForm(consumes);

        let formParams: { append(param: string, value: any): any };
        let useForm = false;
        // use FormData to transmit files using content-type "multipart/form-data"
        useForm = canConsumeForm;
        if (useForm) {
            formParams = new FormData();
        } else {
            formParams = new URLSearchParams();
        }

        if (requestParameters['aasIds'] != null) {
            formParams.append('aasIds', requestParameters['aasIds']!.join(runtime.COLLECTION_FORMATS["csv"]));
        }

        if (requestParameters['file'] != null) {
            formParams.append('file', requestParameters['file'] as any);
        }

        if (requestParameters['fileName'] != null) {
            formParams.append('fileName', requestParameters['fileName'] as any);
        }

        const response = await this.request({
            path: `/packages`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: formParams,
        }, initOverrides);

        return new runtime.JSONApiResponse(response);
    }

    /**
     * Stores the AASX package at the server
     */
    async postAASXPackage(requestParameters: PostAASXPackageRequest = {}, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<PackageDescription> {
        const response = await this.postAASXPackageRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Updates the AASX package at the server
     */
    async putAASXByPackageIdRaw(requestParameters: PutAASXByPackageIdRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>> {
        if (requestParameters['packageId'] == null) {
            throw new runtime.RequiredError(
                'packageId',
                'Required parameter "packageId" was null or undefined when calling putAASXByPackageId().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const consumes: runtime.Consume[] = [
            { contentType: 'multipart/form-data' },
        ];
        // @ts-ignore: canConsumeForm may be unused
        const canConsumeForm = runtime.canConsumeForm(consumes);

        let formParams: { append(param: string, value: any): any };
        let useForm = false;
        // use FormData to transmit files using content-type "multipart/form-data"
        useForm = canConsumeForm;
        if (useForm) {
            formParams = new FormData();
        } else {
            formParams = new URLSearchParams();
        }

        if (requestParameters['aasIds'] != null) {
            formParams.append('aasIds', requestParameters['aasIds']!.join(runtime.COLLECTION_FORMATS["csv"]));
        }

        if (requestParameters['file'] != null) {
            formParams.append('file', requestParameters['file'] as any);
        }

        if (requestParameters['fileName'] != null) {
            formParams.append('fileName', requestParameters['fileName'] as any);
        }

        const response = await this.request({
            path: `/packages/{packageId}`.replace(`{${"packageId"}}`, encodeURIComponent(String(requestParameters['packageId']))),
            method: 'PUT',
            headers: headerParameters,
            query: queryParameters,
            body: formParams,
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     * Updates the AASX package at the server
     */
    async putAASXByPackageId(requestParameters: PutAASXByPackageIdRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void> {
        await this.putAASXByPackageIdRaw(requestParameters, initOverrides);
    }

}
