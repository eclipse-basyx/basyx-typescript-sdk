/* tslint:disable */
/* eslint-disable */
/**
 * DotAAS Part 2 | HTTP/REST | Asset Administration Shell Registry Service Specification
 * The Full Profile of the Asset Administration Shell Registry Service Specification as part of the [Specification of the Asset Administration Shell: Part 2](https://industrialdigitaltwin.org/en/content-hub/aasspecifications).   Copyright: Industrial Digital Twin Association (IDTA) 2025
 *
 * The version of the OpenAPI document: V3.1.0_SSP-001
 * Contact: info@idtwin.org
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import * as runtime from '../../runtime';
import type {
  AssetAdministrationShellDescriptor,
  AssetKind,
  GetAssetAdministrationShellDescriptorsResult,
  GetSubmodelDescriptorsResult,
  Result,
  SubmodelDescriptor,
} from '../models/index';

export interface DeleteAssetAdministrationShellDescriptorByIdRequest {
    aasIdentifier: string;
}

export interface DeleteSubmodelDescriptorByIdThroughSuperpathRequest {
    aasIdentifier: string;
    submodelIdentifier: string;
}

export interface GetAllAssetAdministrationShellDescriptorsRequest {
    limit?: number;
    cursor?: string;
    assetKind?: AssetKind;
    assetType?: string;
}

export interface GetAllSubmodelDescriptorsThroughSuperpathRequest {
    aasIdentifier: string;
    limit?: number;
    cursor?: string;
}

export interface GetAssetAdministrationShellDescriptorByIdRequest {
    aasIdentifier: string;
}

export interface GetSubmodelDescriptorByIdThroughSuperpathRequest {
    aasIdentifier: string;
    submodelIdentifier: string;
}

export interface PostAssetAdministrationShellDescriptorRequest {
    assetAdministrationShellDescriptor: AssetAdministrationShellDescriptor;
}

export interface PostSubmodelDescriptorThroughSuperpathRequest {
    aasIdentifier: string;
    submodelDescriptor: SubmodelDescriptor;
}

export interface PutAssetAdministrationShellDescriptorByIdRequest {
    aasIdentifier: string;
    assetAdministrationShellDescriptor: AssetAdministrationShellDescriptor;
}

export interface PutSubmodelDescriptorByIdThroughSuperpathRequest {
    aasIdentifier: string;
    submodelIdentifier: string;
    submodelDescriptor: SubmodelDescriptor;
}

/**
 * 
 */
export class AssetAdministrationShellRegistryAPIApi extends runtime.BaseAPI {

    /**
     * Deletes an Asset Administration Shell Descriptor, i.e. de-registers an AAS
     */
    async deleteAssetAdministrationShellDescriptorByIdRaw(requestParameters: DeleteAssetAdministrationShellDescriptorByIdRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>> {
        if (requestParameters['aasIdentifier'] == null) {
            throw new runtime.RequiredError(
                'aasIdentifier',
                'Required parameter "aasIdentifier" was null or undefined when calling deleteAssetAdministrationShellDescriptorById().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/shell-descriptors/{aasIdentifier}`.replace(`{${"aasIdentifier"}}`, encodeURIComponent(String(requestParameters['aasIdentifier']))),
            method: 'DELETE',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     * Deletes an Asset Administration Shell Descriptor, i.e. de-registers an AAS
     */
    async deleteAssetAdministrationShellDescriptorById(requestParameters: DeleteAssetAdministrationShellDescriptorByIdRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void> {
        await this.deleteAssetAdministrationShellDescriptorByIdRaw(requestParameters, initOverrides);
    }

    /**
     * Deletes a Submodel Descriptor, i.e. de-registers a submodel
     */
    async deleteSubmodelDescriptorByIdThroughSuperpathRaw(requestParameters: DeleteSubmodelDescriptorByIdThroughSuperpathRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>> {
        if (requestParameters['aasIdentifier'] == null) {
            throw new runtime.RequiredError(
                'aasIdentifier',
                'Required parameter "aasIdentifier" was null or undefined when calling deleteSubmodelDescriptorByIdThroughSuperpath().'
            );
        }

        if (requestParameters['submodelIdentifier'] == null) {
            throw new runtime.RequiredError(
                'submodelIdentifier',
                'Required parameter "submodelIdentifier" was null or undefined when calling deleteSubmodelDescriptorByIdThroughSuperpath().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/shell-descriptors/{aasIdentifier}/submodel-descriptors/{submodelIdentifier}`.replace(`{${"aasIdentifier"}}`, encodeURIComponent(String(requestParameters['aasIdentifier']))).replace(`{${"submodelIdentifier"}}`, encodeURIComponent(String(requestParameters['submodelIdentifier']))),
            method: 'DELETE',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     * Deletes a Submodel Descriptor, i.e. de-registers a submodel
     */
    async deleteSubmodelDescriptorByIdThroughSuperpath(requestParameters: DeleteSubmodelDescriptorByIdThroughSuperpathRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void> {
        await this.deleteSubmodelDescriptorByIdThroughSuperpathRaw(requestParameters, initOverrides);
    }

    /**
     * Returns all Asset Administration Shell Descriptors
     */
    async getAllAssetAdministrationShellDescriptorsRaw(requestParameters: GetAllAssetAdministrationShellDescriptorsRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<GetAssetAdministrationShellDescriptorsResult>> {
        const queryParameters: any = {};

        if (requestParameters['limit'] != null) {
            queryParameters['limit'] = requestParameters['limit'];
        }

        if (requestParameters['cursor'] != null) {
            queryParameters['cursor'] = requestParameters['cursor'];
        }

        if (requestParameters['assetKind'] != null) {
            queryParameters['assetKind'] = requestParameters['assetKind'];
        }

        if (requestParameters['assetType'] != null) {
            queryParameters['assetType'] = requestParameters['assetType'];
        }

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/shell-descriptors`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response);
    }

    /**
     * Returns all Asset Administration Shell Descriptors
     */
    async getAllAssetAdministrationShellDescriptors(requestParameters: GetAllAssetAdministrationShellDescriptorsRequest = {}, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<GetAssetAdministrationShellDescriptorsResult> {
        const response = await this.getAllAssetAdministrationShellDescriptorsRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Returns all Submodel Descriptors
     */
    async getAllSubmodelDescriptorsThroughSuperpathRaw(requestParameters: GetAllSubmodelDescriptorsThroughSuperpathRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<GetSubmodelDescriptorsResult>> {
        if (requestParameters['aasIdentifier'] == null) {
            throw new runtime.RequiredError(
                'aasIdentifier',
                'Required parameter "aasIdentifier" was null or undefined when calling getAllSubmodelDescriptorsThroughSuperpath().'
            );
        }

        const queryParameters: any = {};

        if (requestParameters['limit'] != null) {
            queryParameters['limit'] = requestParameters['limit'];
        }

        if (requestParameters['cursor'] != null) {
            queryParameters['cursor'] = requestParameters['cursor'];
        }

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/shell-descriptors/{aasIdentifier}/submodel-descriptors`.replace(`{${"aasIdentifier"}}`, encodeURIComponent(String(requestParameters['aasIdentifier']))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response);
    }

    /**
     * Returns all Submodel Descriptors
     */
    async getAllSubmodelDescriptorsThroughSuperpath(requestParameters: GetAllSubmodelDescriptorsThroughSuperpathRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<GetSubmodelDescriptorsResult> {
        const response = await this.getAllSubmodelDescriptorsThroughSuperpathRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Returns a specific Asset Administration Shell Descriptor
     */
    async getAssetAdministrationShellDescriptorByIdRaw(requestParameters: GetAssetAdministrationShellDescriptorByIdRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<AssetAdministrationShellDescriptor>> {
        if (requestParameters['aasIdentifier'] == null) {
            throw new runtime.RequiredError(
                'aasIdentifier',
                'Required parameter "aasIdentifier" was null or undefined when calling getAssetAdministrationShellDescriptorById().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/shell-descriptors/{aasIdentifier}`.replace(`{${"aasIdentifier"}}`, encodeURIComponent(String(requestParameters['aasIdentifier']))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response);
    }

    /**
     * Returns a specific Asset Administration Shell Descriptor
     */
    async getAssetAdministrationShellDescriptorById(requestParameters: GetAssetAdministrationShellDescriptorByIdRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<AssetAdministrationShellDescriptor> {
        const response = await this.getAssetAdministrationShellDescriptorByIdRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Returns a specific Submodel Descriptor
     */
    async getSubmodelDescriptorByIdThroughSuperpathRaw(requestParameters: GetSubmodelDescriptorByIdThroughSuperpathRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<SubmodelDescriptor>> {
        if (requestParameters['aasIdentifier'] == null) {
            throw new runtime.RequiredError(
                'aasIdentifier',
                'Required parameter "aasIdentifier" was null or undefined when calling getSubmodelDescriptorByIdThroughSuperpath().'
            );
        }

        if (requestParameters['submodelIdentifier'] == null) {
            throw new runtime.RequiredError(
                'submodelIdentifier',
                'Required parameter "submodelIdentifier" was null or undefined when calling getSubmodelDescriptorByIdThroughSuperpath().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/shell-descriptors/{aasIdentifier}/submodel-descriptors/{submodelIdentifier}`.replace(`{${"aasIdentifier"}}`, encodeURIComponent(String(requestParameters['aasIdentifier']))).replace(`{${"submodelIdentifier"}}`, encodeURIComponent(String(requestParameters['submodelIdentifier']))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response);
    }

    /**
     * Returns a specific Submodel Descriptor
     */
    async getSubmodelDescriptorByIdThroughSuperpath(requestParameters: GetSubmodelDescriptorByIdThroughSuperpathRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<SubmodelDescriptor> {
        const response = await this.getSubmodelDescriptorByIdThroughSuperpathRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Creates a new Asset Administration Shell Descriptor, i.e. registers an AAS
     */
    async postAssetAdministrationShellDescriptorRaw(requestParameters: PostAssetAdministrationShellDescriptorRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<AssetAdministrationShellDescriptor>> {
        if (requestParameters['assetAdministrationShellDescriptor'] == null) {
            throw new runtime.RequiredError(
                'assetAdministrationShellDescriptor',
                'Required parameter "assetAdministrationShellDescriptor" was null or undefined when calling postAssetAdministrationShellDescriptor().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        const response = await this.request({
            path: `/shell-descriptors`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: requestParameters['assetAdministrationShellDescriptor'],
        }, initOverrides);

        return new runtime.JSONApiResponse(response);
    }

    /**
     * Creates a new Asset Administration Shell Descriptor, i.e. registers an AAS
     */
    async postAssetAdministrationShellDescriptor(requestParameters: PostAssetAdministrationShellDescriptorRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<AssetAdministrationShellDescriptor> {
        const response = await this.postAssetAdministrationShellDescriptorRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Creates a new Submodel Descriptor, i.e. registers a submodel
     */
    async postSubmodelDescriptorThroughSuperpathRaw(requestParameters: PostSubmodelDescriptorThroughSuperpathRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<SubmodelDescriptor>> {
        if (requestParameters['aasIdentifier'] == null) {
            throw new runtime.RequiredError(
                'aasIdentifier',
                'Required parameter "aasIdentifier" was null or undefined when calling postSubmodelDescriptorThroughSuperpath().'
            );
        }

        if (requestParameters['submodelDescriptor'] == null) {
            throw new runtime.RequiredError(
                'submodelDescriptor',
                'Required parameter "submodelDescriptor" was null or undefined when calling postSubmodelDescriptorThroughSuperpath().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        const response = await this.request({
            path: `/shell-descriptors/{aasIdentifier}/submodel-descriptors`.replace(`{${"aasIdentifier"}}`, encodeURIComponent(String(requestParameters['aasIdentifier']))),
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: requestParameters['submodelDescriptor'],
        }, initOverrides);

        return new runtime.JSONApiResponse(response);
    }

    /**
     * Creates a new Submodel Descriptor, i.e. registers a submodel
     */
    async postSubmodelDescriptorThroughSuperpath(requestParameters: PostSubmodelDescriptorThroughSuperpathRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<SubmodelDescriptor> {
        const response = await this.postSubmodelDescriptorThroughSuperpathRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Creates or updates an existing Asset Administration Shell Descriptor
     */
    async putAssetAdministrationShellDescriptorByIdRaw(requestParameters: PutAssetAdministrationShellDescriptorByIdRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<AssetAdministrationShellDescriptor>> {
        if (requestParameters['aasIdentifier'] == null) {
            throw new runtime.RequiredError(
                'aasIdentifier',
                'Required parameter "aasIdentifier" was null or undefined when calling putAssetAdministrationShellDescriptorById().'
            );
        }

        if (requestParameters['assetAdministrationShellDescriptor'] == null) {
            throw new runtime.RequiredError(
                'assetAdministrationShellDescriptor',
                'Required parameter "assetAdministrationShellDescriptor" was null or undefined when calling putAssetAdministrationShellDescriptorById().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        const response = await this.request({
            path: `/shell-descriptors/{aasIdentifier}`.replace(`{${"aasIdentifier"}}`, encodeURIComponent(String(requestParameters['aasIdentifier']))),
            method: 'PUT',
            headers: headerParameters,
            query: queryParameters,
            body: requestParameters['assetAdministrationShellDescriptor'],
        }, initOverrides);

        return new runtime.JSONApiResponse(response);
    }

    /**
     * Creates or updates an existing Asset Administration Shell Descriptor
     */
    async putAssetAdministrationShellDescriptorById(requestParameters: PutAssetAdministrationShellDescriptorByIdRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<AssetAdministrationShellDescriptor | null | undefined > {
        const response = await this.putAssetAdministrationShellDescriptorByIdRaw(requestParameters, initOverrides);
        switch (response.raw.status) {
            case 201:
                return await response.value();
            case 204:
                return null;
            default:
                return await response.value();
        }
    }

    /**
     * Creates or updates an existing Submodel Descriptor
     */
    async putSubmodelDescriptorByIdThroughSuperpathRaw(requestParameters: PutSubmodelDescriptorByIdThroughSuperpathRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<SubmodelDescriptor>> {
        if (requestParameters['aasIdentifier'] == null) {
            throw new runtime.RequiredError(
                'aasIdentifier',
                'Required parameter "aasIdentifier" was null or undefined when calling putSubmodelDescriptorByIdThroughSuperpath().'
            );
        }

        if (requestParameters['submodelIdentifier'] == null) {
            throw new runtime.RequiredError(
                'submodelIdentifier',
                'Required parameter "submodelIdentifier" was null or undefined when calling putSubmodelDescriptorByIdThroughSuperpath().'
            );
        }

        if (requestParameters['submodelDescriptor'] == null) {
            throw new runtime.RequiredError(
                'submodelDescriptor',
                'Required parameter "submodelDescriptor" was null or undefined when calling putSubmodelDescriptorByIdThroughSuperpath().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        const response = await this.request({
            path: `/shell-descriptors/{aasIdentifier}/submodel-descriptors/{submodelIdentifier}`.replace(`{${"aasIdentifier"}}`, encodeURIComponent(String(requestParameters['aasIdentifier']))).replace(`{${"submodelIdentifier"}}`, encodeURIComponent(String(requestParameters['submodelIdentifier']))),
            method: 'PUT',
            headers: headerParameters,
            query: queryParameters,
            body: requestParameters['submodelDescriptor'],
        }, initOverrides);

        return new runtime.JSONApiResponse(response);
    }

    /**
     * Creates or updates an existing Submodel Descriptor
     */
    async putSubmodelDescriptorByIdThroughSuperpath(requestParameters: PutSubmodelDescriptorByIdThroughSuperpathRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<SubmodelDescriptor | null | undefined > {
        const response = await this.putSubmodelDescriptorByIdThroughSuperpathRaw(requestParameters, initOverrides);
        switch (response.raw.status) {
            case 201:
                return await response.value();
            case 204:
                return null;
            default:
                return await response.value();
        }
    }

}
