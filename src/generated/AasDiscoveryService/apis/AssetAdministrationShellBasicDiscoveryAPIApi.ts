/* tslint:disable */
/* eslint-disable */
/**
 * DotAAS Part 2 | HTTP/REST | Discovery Service Specification
 * The entire Full Profile of the Discovery Service Specification as part of the [Specification of the Asset Administration Shell - Part 2: API](https://industrialdigitaltwin.org/en/content-hub/aasspecifications).   Copyright: Industrial Digital Twin Association (IDTA) 2025
 *
 * The version of the OpenAPI document: V3.1.0_SSP-001
 * Contact: info@idtwin.org
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import * as runtime from '../../runtime';
import type {
  AssetLink,
  InlineResponse200,
  Result,
  SpecificAssetId,
} from '../models/index';

export interface DeleteAllAssetLinksByIdRequest {
    aasIdentifier: string;
}

export interface GetAllAssetAdministrationShellIdsByAssetLinkRequest {
    assetIds?: Array<string>;
    limit?: number;
    cursor?: string;
}

export interface GetAllAssetLinksByIdRequest {
    aasIdentifier: string;
}

export interface PostAllAssetLinksByIdRequest {
    aasIdentifier: string;
    specificAssetId: Array<SpecificAssetId>;
}

export interface SearchAllAssetAdministrationShellIdsByAssetLinkRequest {
    limit?: number;
    cursor?: string;
    assetLink?: Array<AssetLink>;
}

/**
 * 
 */
export class AssetAdministrationShellBasicDiscoveryAPIApi extends runtime.BaseAPI {

    /**
     * Deletes specified specific asset identifiers linked to an Asset Administration Shell: discovery via these specific asset IDs shall not be supported any longer
     */
    async deleteAllAssetLinksByIdRaw(requestParameters: DeleteAllAssetLinksByIdRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>> {
        if (requestParameters['aasIdentifier'] == null) {
            throw new runtime.RequiredError(
                'aasIdentifier',
                'Required parameter "aasIdentifier" was null or undefined when calling deleteAllAssetLinksById().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/lookup/shells/{aasIdentifier}`.replace(`{${"aasIdentifier"}}`, encodeURIComponent(String(requestParameters['aasIdentifier']))),
            method: 'DELETE',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     * Deletes specified specific asset identifiers linked to an Asset Administration Shell: discovery via these specific asset IDs shall not be supported any longer
     */
    async deleteAllAssetLinksById(requestParameters: DeleteAllAssetLinksByIdRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void> {
        await this.deleteAllAssetLinksByIdRaw(requestParameters, initOverrides);
    }

    /**
     * Returns a list of Asset Administration Shell IDs linked to specific asset identifiers or the global asset ID
     * @deprecated
     */
    async getAllAssetAdministrationShellIdsByAssetLinkRaw(requestParameters: GetAllAssetAdministrationShellIdsByAssetLinkRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<InlineResponse200>> {
        const queryParameters: any = {};

        if (requestParameters['assetIds'] != null) {
            queryParameters['assetIds'] = requestParameters['assetIds'];
        }

        if (requestParameters['limit'] != null) {
            queryParameters['limit'] = requestParameters['limit'];
        }

        if (requestParameters['cursor'] != null) {
            queryParameters['cursor'] = requestParameters['cursor'];
        }

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/lookup/shells`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response);
    }

    /**
     * Returns a list of Asset Administration Shell IDs linked to specific asset identifiers or the global asset ID
     * @deprecated
     */
    async getAllAssetAdministrationShellIdsByAssetLink(requestParameters: GetAllAssetAdministrationShellIdsByAssetLinkRequest = {}, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<InlineResponse200> {
        const response = await this.getAllAssetAdministrationShellIdsByAssetLinkRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Returns a list of specific asset identifiers based on an Asset Administration Shell ID to edit discoverable content. The global asset ID is returned as specific asset ID with \"name\" equal to \"globalAssetId\" (see Constraint AASd-116).
     */
    async getAllAssetLinksByIdRaw(requestParameters: GetAllAssetLinksByIdRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Array<SpecificAssetId>>> {
        if (requestParameters['aasIdentifier'] == null) {
            throw new runtime.RequiredError(
                'aasIdentifier',
                'Required parameter "aasIdentifier" was null or undefined when calling getAllAssetLinksById().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/lookup/shells/{aasIdentifier}`.replace(`{${"aasIdentifier"}}`, encodeURIComponent(String(requestParameters['aasIdentifier']))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response);
    }

    /**
     * Returns a list of specific asset identifiers based on an Asset Administration Shell ID to edit discoverable content. The global asset ID is returned as specific asset ID with \"name\" equal to \"globalAssetId\" (see Constraint AASd-116).
     */
    async getAllAssetLinksById(requestParameters: GetAllAssetLinksByIdRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Array<SpecificAssetId>> {
        const response = await this.getAllAssetLinksByIdRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Creates specific asset identifiers linked to an Asset Administration Shell to edit discoverable content
     */
    async postAllAssetLinksByIdRaw(requestParameters: PostAllAssetLinksByIdRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Array<SpecificAssetId>>> {
        if (requestParameters['aasIdentifier'] == null) {
            throw new runtime.RequiredError(
                'aasIdentifier',
                'Required parameter "aasIdentifier" was null or undefined when calling postAllAssetLinksById().'
            );
        }

        if (requestParameters['specificAssetId'] == null) {
            throw new runtime.RequiredError(
                'specificAssetId',
                'Required parameter "specificAssetId" was null or undefined when calling postAllAssetLinksById().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        const response = await this.request({
            path: `/lookup/shells/{aasIdentifier}`.replace(`{${"aasIdentifier"}}`, encodeURIComponent(String(requestParameters['aasIdentifier']))),
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: requestParameters['specificAssetId'],
        }, initOverrides);

        return new runtime.JSONApiResponse(response);
    }

    /**
     * Creates specific asset identifiers linked to an Asset Administration Shell to edit discoverable content
     */
    async postAllAssetLinksById(requestParameters: PostAllAssetLinksByIdRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Array<SpecificAssetId>> {
        const response = await this.postAllAssetLinksByIdRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Returns a list of Asset Administration Shell IDs linked to specific asset identifiers or the global asset ID
     */
    async searchAllAssetAdministrationShellIdsByAssetLinkRaw(requestParameters: SearchAllAssetAdministrationShellIdsByAssetLinkRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<InlineResponse200>> {
        const queryParameters: any = {};

        if (requestParameters['limit'] != null) {
            queryParameters['limit'] = requestParameters['limit'];
        }

        if (requestParameters['cursor'] != null) {
            queryParameters['cursor'] = requestParameters['cursor'];
        }

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        const response = await this.request({
            path: `/lookup/shellsByAssetLink`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: requestParameters['assetLink'],
        }, initOverrides);

        return new runtime.JSONApiResponse(response);
    }

    /**
     * Returns a list of Asset Administration Shell IDs linked to specific asset identifiers or the global asset ID
     */
    async searchAllAssetAdministrationShellIdsByAssetLink(requestParameters: SearchAllAssetAdministrationShellIdsByAssetLinkRequest = {}, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<InlineResponse200> {
        const response = await this.searchAllAssetAdministrationShellIdsByAssetLinkRaw(requestParameters, initOverrides);
        return await response.value();
    }

}
