// This file is auto-generated by @hey-api/openapi-ts

import { createClient, createConfig, type Options, formDataBodySerializer } from '@hey-api/client-fetch';
import type {
    GetAssetAdministrationShellData,
    GetAssetAdministrationShellResponse,
    GetAssetAdministrationShellError,
    PutAssetAdministrationShellData,
    PutAssetAdministrationShellResponse,
    PutAssetAdministrationShellError,
    GetAssetAdministrationShellReferenceData,
    GetAssetAdministrationShellReferenceResponse,
    GetAssetAdministrationShellReferenceError,
    GetAssetInformationData,
    GetAssetInformationResponse,
    GetAssetInformationError,
    PutAssetInformationData,
    PutAssetInformationResponse,
    PutAssetInformationError,
    DeleteThumbnailData,
    DeleteThumbnailError,
    GetThumbnailData,
    GetThumbnailResponse,
    GetThumbnailError,
    PutThumbnailData,
    PutThumbnailResponse,
    PutThumbnailError,
    GetAllSubmodelReferencesData,
    GetAllSubmodelReferencesResponse,
    GetAllSubmodelReferencesError,
    PostSubmodelReferenceData,
    PostSubmodelReferenceResponse,
    PostSubmodelReferenceError,
    DeleteSubmodelReferenceByIdData,
    DeleteSubmodelReferenceByIdResponse,
    DeleteSubmodelReferenceByIdError,
    DeleteSubmodelByIdAasData,
    DeleteSubmodelByIdAasResponse,
    DeleteSubmodelByIdAasError,
    GetSubmodelAasData,
    GetSubmodelAasResponse,
    GetSubmodelAasError,
    PatchSubmodelAasData,
    PatchSubmodelAasResponse,
    PatchSubmodelAasError,
    PutSubmodelAasData,
    PutSubmodelAasResponse,
    PutSubmodelAasError,
    GetSubmodelMetadataAasData,
    GetSubmodelMetadataAasResponse,
    GetSubmodelMetadataAasError,
    PatchSubmodelMetadataAasData,
    PatchSubmodelMetadataAasResponse,
    PatchSubmodelMetadataAasError,
    GetSubmodelValueOnlyAasData,
    GetSubmodelValueOnlyAasResponse,
    GetSubmodelValueOnlyAasError,
    PatchSubmodelValueOnlyAasData,
    PatchSubmodelValueOnlyAasResponse,
    PatchSubmodelValueOnlyAasError,
    GetSubmodelMetadataReferenceAasData,
    GetSubmodelMetadataReferenceAasResponse,
    GetSubmodelMetadataReferenceAasError,
    GetSubmodelPathAasData,
    GetSubmodelPathAasResponse,
    GetSubmodelPathAasError,
    GetAllSubmodelElementsAasData,
    GetAllSubmodelElementsAasResponse,
    GetAllSubmodelElementsAasError,
    PostSubmodelElementAasData,
    PostSubmodelElementAasResponse,
    PostSubmodelElementAasError,
    GetAllSubmodelElementsMetadataAasData,
    GetAllSubmodelElementsMetadataAasResponse,
    GetAllSubmodelElementsMetadataAasError,
    GetAllSubmodelElementsValueOnlyAasData,
    GetAllSubmodelElementsValueOnlyAasResponse,
    GetAllSubmodelElementsValueOnlyAasError,
    GetAllSubmodelElementsReferenceAasData,
    GetAllSubmodelElementsReferenceAasResponse,
    GetAllSubmodelElementsReferenceAasError,
    GetAllSubmodelElementsPathAasData,
    GetAllSubmodelElementsPathAasResponse,
    GetAllSubmodelElementsPathAasError,
    DeleteSubmodelElementByPathAasData,
    DeleteSubmodelElementByPathAasResponse,
    DeleteSubmodelElementByPathAasError,
    GetSubmodelElementByPathAasData,
    GetSubmodelElementByPathAasResponse,
    GetSubmodelElementByPathAasError,
    PatchSubmodelElementValueByPathAasData,
    PatchSubmodelElementValueByPathAasResponse,
    PatchSubmodelElementValueByPathAasError,
    PostSubmodelElementByPathAasData,
    PostSubmodelElementByPathAasResponse,
    PostSubmodelElementByPathAasError,
    PutSubmodelElementByPathAasData,
    PutSubmodelElementByPathAasResponse,
    PutSubmodelElementByPathAasError,
    GetSubmodelElementByPathMetadataAasData,
    GetSubmodelElementByPathMetadataAasResponse,
    GetSubmodelElementByPathMetadataAasError,
    PatchSubmodelElementValueByPathMetadataAasData,
    PatchSubmodelElementValueByPathMetadataAasResponse,
    PatchSubmodelElementValueByPathMetadataAasError,
    GetSubmodelElementByPathValueOnlyAasData,
    GetSubmodelElementByPathValueOnlyAasResponse,
    GetSubmodelElementByPathValueOnlyAasError,
    PatchSubmodelElementValueByPathValueOnlyAasData,
    PatchSubmodelElementValueByPathValueOnlyAasResponse,
    PatchSubmodelElementValueByPathValueOnlyAasError,
    GetSubmodelElementByPathReferenceAasData,
    GetSubmodelElementByPathReferenceAasResponse,
    GetSubmodelElementByPathReferenceAasError,
    GetSubmodelElementByPathPathAasData,
    GetSubmodelElementByPathPathAasResponse,
    GetSubmodelElementByPathPathAasError,
    DeleteFileByPathAasData,
    DeleteFileByPathAasError,
    GetFileByPathAasData,
    GetFileByPathAasResponse,
    GetFileByPathAasError,
    PutFileByPathAasData,
    PutFileByPathAasResponse,
    PutFileByPathAasError,
    InvokeOperationSyncAasData,
    InvokeOperationSyncAasResponse,
    InvokeOperationSyncAasError,
    InvokeOperationSyncValueOnlyAasData,
    InvokeOperationSyncValueOnlyAasResponse,
    InvokeOperationSyncValueOnlyAasError,
    InvokeOperationAsyncAasData,
    InvokeOperationAsyncAasError,
    InvokeOperationAsyncValueOnlyAasData,
    InvokeOperationAsyncValueOnlyAasError,
    GetOperationAsyncStatusAasData,
    GetOperationAsyncStatusAasResponse,
    GetOperationAsyncStatusAasError,
    GetOperationAsyncResultAasData,
    GetOperationAsyncResultAasResponse,
    GetOperationAsyncResultAasError,
    GetOperationAsyncResultValueOnlyAasData,
    GetOperationAsyncResultValueOnlyAasResponse,
    GetOperationAsyncResultValueOnlyAasError,
    GetSubmodelData,
    GetSubmodelResponse,
    GetSubmodelError,
    PatchSubmodelData,
    PatchSubmodelResponse,
    PatchSubmodelError,
    PutSubmodelData,
    PutSubmodelResponse,
    PutSubmodelError,
    GetSubmodelMetadataData,
    GetSubmodelMetadataResponse,
    GetSubmodelMetadataError,
    PatchSubmodelMetadataData,
    PatchSubmodelMetadataResponse,
    PatchSubmodelMetadataError,
    GetSubmodelValueOnlyData,
    GetSubmodelValueOnlyResponse,
    GetSubmodelValueOnlyError,
    PatchSubmodelValueOnlyData,
    PatchSubmodelValueOnlyResponse,
    PatchSubmodelValueOnlyError,
    GetSubmodelReferenceData,
    GetSubmodelReferenceResponse,
    GetSubmodelReferenceError,
    GetSubmodelPathData,
    GetSubmodelPathResponse,
    GetSubmodelPathError,
    GetAllSubmodelElementsData,
    GetAllSubmodelElementsResponse,
    GetAllSubmodelElementsError,
    PostSubmodelElementData,
    PostSubmodelElementResponse,
    PostSubmodelElementError,
    GetAllSubmodelElementsMetadataData,
    GetAllSubmodelElementsMetadataResponse,
    GetAllSubmodelElementsMetadataError,
    GetAllSubmodelElementsValueOnlyData,
    GetAllSubmodelElementsValueOnlyResponse,
    GetAllSubmodelElementsValueOnlyError,
    GetAllSubmodelElementsReferenceData,
    GetAllSubmodelElementsReferenceResponse,
    GetAllSubmodelElementsReferenceError,
    GetAllSubmodelElementsPathData,
    GetAllSubmodelElementsPathResponse,
    GetAllSubmodelElementsPathError,
    DeleteSubmodelElementByPathData,
    DeleteSubmodelElementByPathResponse,
    DeleteSubmodelElementByPathError,
    GetSubmodelElementByPathData,
    GetSubmodelElementByPathResponse,
    GetSubmodelElementByPathError,
    PatchSubmodelElementByPathData,
    PatchSubmodelElementByPathResponse,
    PatchSubmodelElementByPathError,
    PostSubmodelElementByPathData,
    PostSubmodelElementByPathResponse,
    PostSubmodelElementByPathError,
    PutSubmodelElementByPathData,
    PutSubmodelElementByPathResponse,
    PutSubmodelElementByPathError,
    GetSubmodelElementByPathMetadataData,
    GetSubmodelElementByPathMetadataResponse,
    GetSubmodelElementByPathMetadataError,
    PatchSubmodelElementByPathMetadataData,
    PatchSubmodelElementByPathMetadataResponse,
    PatchSubmodelElementByPathMetadataError,
    GetSubmodelElementByPathValueOnlyData,
    GetSubmodelElementByPathValueOnlyResponse,
    GetSubmodelElementByPathValueOnlyError,
    PatchSubmodelElementByPathValueOnlyData,
    PatchSubmodelElementByPathValueOnlyResponse,
    PatchSubmodelElementByPathValueOnlyError,
    GetSubmodelElementByPathReferenceData,
    GetSubmodelElementByPathReferenceResponse,
    GetSubmodelElementByPathReferenceError,
    GetSubmodelElementByPathPathData,
    GetSubmodelElementByPathPathResponse,
    GetSubmodelElementByPathPathError,
    DeleteFileByPathData,
    DeleteFileByPathError,
    GetFileByPathData,
    GetFileByPathResponse,
    GetFileByPathError,
    PutFileByPathData,
    PutFileByPathResponse,
    PutFileByPathError,
    InvokeOperationData,
    InvokeOperationResponse,
    InvokeOperationError,
    InvokeOperationAsyncData,
    InvokeOperationAsyncError,
    InvokeOperationSyncValueOnlyData,
    InvokeOperationSyncValueOnlyResponse,
    InvokeOperationSyncValueOnlyError,
    InvokeOperationAsyncValueOnlyData,
    InvokeOperationAsyncValueOnlyError,
    GetOperationAsyncStatusData,
    GetOperationAsyncStatusResponse,
    GetOperationAsyncStatusError,
    GetOperationAsyncResultData,
    GetOperationAsyncResultResponse,
    GetOperationAsyncResultError,
    GetOperationAsyncResultValueOnlyData,
    GetOperationAsyncResultValueOnlyResponse,
    GetOperationAsyncResultValueOnlyError,
    GetAllAssetAdministrationShellsData,
    GetAllAssetAdministrationShellsResponse,
    GetAllAssetAdministrationShellsError,
    PostAssetAdministrationShellData,
    PostAssetAdministrationShellResponse,
    PostAssetAdministrationShellError,
    GetAllAssetAdministrationShellsReferenceData,
    GetAllAssetAdministrationShellsReferenceResponse,
    GetAllAssetAdministrationShellsReferenceError,
    DeleteAssetAdministrationShellByIdData,
    DeleteAssetAdministrationShellByIdResponse,
    DeleteAssetAdministrationShellByIdError,
    GetAssetAdministrationShellByIdData,
    GetAssetAdministrationShellByIdResponse,
    GetAssetAdministrationShellByIdError,
    PutAssetAdministrationShellByIdData,
    PutAssetAdministrationShellByIdResponse,
    PutAssetAdministrationShellByIdError,
    GetAssetAdministrationShellByIdReferenceAasRepositoryData,
    GetAssetAdministrationShellByIdReferenceAasRepositoryResponse,
    GetAssetAdministrationShellByIdReferenceAasRepositoryError,
    GetAssetInformationAasRepositoryData,
    GetAssetInformationAasRepositoryResponse,
    GetAssetInformationAasRepositoryError,
    PutAssetInformationAasRepositoryData,
    PutAssetInformationAasRepositoryResponse,
    PutAssetInformationAasRepositoryError,
    DeleteThumbnailAasRepositoryData,
    DeleteThumbnailAasRepositoryError,
    GetThumbnailAasRepositoryData,
    GetThumbnailAasRepositoryResponse,
    GetThumbnailAasRepositoryError,
    PutThumbnailAasRepositoryData,
    PutThumbnailAasRepositoryResponse,
    PutThumbnailAasRepositoryError,
    GetAllSubmodelReferencesAasRepositoryData,
    GetAllSubmodelReferencesAasRepositoryResponse,
    GetAllSubmodelReferencesAasRepositoryError,
    PostSubmodelReferenceAasRepositoryData,
    PostSubmodelReferenceAasRepositoryResponse,
    PostSubmodelReferenceAasRepositoryError,
    DeleteSubmodelReferenceByIdAasRepositoryData,
    DeleteSubmodelReferenceByIdAasRepositoryResponse,
    DeleteSubmodelReferenceByIdAasRepositoryError,
    DeleteSubmodelByIdAasRepositoryData,
    DeleteSubmodelByIdAasRepositoryResponse,
    DeleteSubmodelByIdAasRepositoryError,
    GetSubmodelByIdAasRepositoryData,
    GetSubmodelByIdAasRepositoryResponse,
    GetSubmodelByIdAasRepositoryError,
    PatchSubmodelAasRepositoryData,
    PatchSubmodelAasRepositoryResponse,
    PatchSubmodelAasRepositoryError,
    PutSubmodelByIdAasRepositoryData,
    PutSubmodelByIdAasRepositoryResponse,
    PutSubmodelByIdAasRepositoryError,
    GetSubmodelByIdMetadataAasRepositoryData,
    GetSubmodelByIdMetadataAasRepositoryResponse,
    GetSubmodelByIdMetadataAasRepositoryError,
    PatchSubmodelByIdMetadataAasRepositoryData,
    PatchSubmodelByIdMetadataAasRepositoryResponse,
    PatchSubmodelByIdMetadataAasRepositoryError,
    GetSubmodelByIdValueOnlyAasRepositoryData,
    GetSubmodelByIdValueOnlyAasRepositoryResponse,
    GetSubmodelByIdValueOnlyAasRepositoryError,
    PatchSubmodelByIdValueOnlyAasRepositoryData,
    PatchSubmodelByIdValueOnlyAasRepositoryResponse,
    PatchSubmodelByIdValueOnlyAasRepositoryError,
    GetSubmodelByIdReferenceAasRepositoryData,
    GetSubmodelByIdReferenceAasRepositoryResponse,
    GetSubmodelByIdReferenceAasRepositoryError,
    GetSubmodelByIdPathAasRepositoryData,
    GetSubmodelByIdPathAasRepositoryResponse,
    GetSubmodelByIdPathAasRepositoryError,
    GetAllSubmodelElementsAasRepositoryData,
    GetAllSubmodelElementsAasRepositoryResponse,
    GetAllSubmodelElementsAasRepositoryError,
    PostSubmodelElementAasRepositoryData,
    PostSubmodelElementAasRepositoryResponse,
    PostSubmodelElementAasRepositoryError,
    GetAllSubmodelElementsMetadataAasRepositoryData,
    GetAllSubmodelElementsMetadataAasRepositoryResponse,
    GetAllSubmodelElementsMetadataAasRepositoryError,
    GetAllSubmodelElementsValueOnlyAasRepositoryData,
    GetAllSubmodelElementsValueOnlyAasRepositoryResponse,
    GetAllSubmodelElementsValueOnlyAasRepositoryError,
    GetAllSubmodelElementsReferenceAasRepositoryData,
    GetAllSubmodelElementsReferenceAasRepositoryResponse,
    GetAllSubmodelElementsReferenceAasRepositoryError,
    GetAllSubmodelElementsPathAasRepositoryData,
    GetAllSubmodelElementsPathAasRepositoryResponse,
    GetAllSubmodelElementsPathAasRepositoryError,
    DeleteSubmodelElementByPathAasRepositoryData,
    DeleteSubmodelElementByPathAasRepositoryResponse,
    DeleteSubmodelElementByPathAasRepositoryError,
    GetSubmodelElementByPathAasRepositoryData,
    GetSubmodelElementByPathAasRepositoryResponse,
    GetSubmodelElementByPathAasRepositoryError,
    PatchSubmodelElementValueByPathAasRepositoryData,
    PatchSubmodelElementValueByPathAasRepositoryResponse,
    PatchSubmodelElementValueByPathAasRepositoryError,
    PostSubmodelElementByPathAasRepositoryData,
    PostSubmodelElementByPathAasRepositoryResponse,
    PostSubmodelElementByPathAasRepositoryError,
    PutSubmodelElementByPathAasRepositoryData,
    PutSubmodelElementByPathAasRepositoryResponse,
    PutSubmodelElementByPathAasRepositoryError,
    GetSubmodelElementByPathMetadataAasRepositoryData,
    GetSubmodelElementByPathMetadataAasRepositoryResponse,
    GetSubmodelElementByPathMetadataAasRepositoryError,
    PatchSubmodelElementValueByPathMetadataData,
    PatchSubmodelElementValueByPathMetadataResponse,
    PatchSubmodelElementValueByPathMetadataError,
    GetSubmodelElementByPathValueOnlyAasRepositoryData,
    GetSubmodelElementByPathValueOnlyAasRepositoryResponse,
    GetSubmodelElementByPathValueOnlyAasRepositoryError,
    PatchSubmodelElementValueByPathValueOnlyData,
    PatchSubmodelElementValueByPathValueOnlyResponse,
    PatchSubmodelElementValueByPathValueOnlyError,
    GetSubmodelElementByPathReferenceAasRepositoryData,
    GetSubmodelElementByPathReferenceAasRepositoryResponse,
    GetSubmodelElementByPathReferenceAasRepositoryError,
    GetSubmodelElementByPathPathAasRepositoryData,
    GetSubmodelElementByPathPathAasRepositoryResponse,
    GetSubmodelElementByPathPathAasRepositoryError,
    DeleteFileByPathAasRepositoryData,
    DeleteFileByPathAasRepositoryError,
    GetFileByPathAasRepositoryData,
    GetFileByPathAasRepositoryResponse,
    GetFileByPathAasRepositoryError,
    PutFileByPathAasRepositoryData,
    PutFileByPathAasRepositoryResponse,
    PutFileByPathAasRepositoryError,
    InvokeOperationAasRepositoryData,
    InvokeOperationAasRepositoryResponse,
    InvokeOperationAasRepositoryError,
    InvokeOperationValueOnlyAasRepositoryData,
    InvokeOperationValueOnlyAasRepositoryResponse,
    InvokeOperationValueOnlyAasRepositoryError,
    InvokeOperationAsyncAasRepositoryData,
    InvokeOperationAsyncAasRepositoryError,
    InvokeOperationAsyncValueOnlyAasRepositoryData,
    InvokeOperationAsyncValueOnlyAasRepositoryError,
    GetOperationAsyncStatusAasRepositoryData,
    GetOperationAsyncStatusAasRepositoryResponse,
    GetOperationAsyncStatusAasRepositoryError,
    GetOperationAsyncResultAasRepositoryData,
    GetOperationAsyncResultAasRepositoryResponse,
    GetOperationAsyncResultAasRepositoryError,
    GetOperationAsyncResultValueOnlyAasRepositoryData,
    GetOperationAsyncResultValueOnlyAasRepositoryResponse,
    GetOperationAsyncResultValueOnlyAasRepositoryError,
    GetAllSubmodelsData,
    GetAllSubmodelsResponse,
    GetAllSubmodelsError,
    PostSubmodelData,
    PostSubmodelResponse,
    PostSubmodelError,
    GetAllSubmodelsMetadataData,
    GetAllSubmodelsMetadataResponse,
    GetAllSubmodelsMetadataError,
    GetAllSubmodelsValueOnlyData,
    GetAllSubmodelsValueOnlyResponse,
    GetAllSubmodelsValueOnlyError,
    GetAllSubmodelsReferenceData,
    GetAllSubmodelsReferenceResponse,
    GetAllSubmodelsReferenceError,
    GetAllSubmodelsPathData,
    GetAllSubmodelsPathResponse,
    GetAllSubmodelsPathError,
    DeleteSubmodelByIdData,
    DeleteSubmodelByIdResponse,
    DeleteSubmodelByIdError,
    GetSubmodelByIdData,
    GetSubmodelByIdResponse,
    GetSubmodelByIdError,
    PatchSubmodelByIdData,
    PatchSubmodelByIdResponse,
    PatchSubmodelByIdError,
    PutSubmodelByIdData,
    PutSubmodelByIdResponse,
    PutSubmodelByIdError,
    GetSubmodelByIdMetadataData,
    GetSubmodelByIdMetadataResponse,
    GetSubmodelByIdMetadataError,
    PatchSubmodelByIdMetadataData,
    PatchSubmodelByIdMetadataResponse,
    PatchSubmodelByIdMetadataError,
    GetSubmodelByIdValueOnlyData,
    GetSubmodelByIdValueOnlyResponse,
    GetSubmodelByIdValueOnlyError,
    PatchSubmodelByIdValueOnlyData,
    PatchSubmodelByIdValueOnlyResponse,
    PatchSubmodelByIdValueOnlyError,
    GetSubmodelByIdReferenceData,
    GetSubmodelByIdReferenceResponse,
    GetSubmodelByIdReferenceError,
    GetSubmodelByIdPathData,
    GetSubmodelByIdPathResponse,
    GetSubmodelByIdPathError,
    GetAllSubmodelElementsSubmodelRepositoryData,
    GetAllSubmodelElementsSubmodelRepositoryResponse,
    GetAllSubmodelElementsSubmodelRepositoryError,
    PostSubmodelElementSubmodelRepositoryData,
    PostSubmodelElementSubmodelRepositoryResponse,
    PostSubmodelElementSubmodelRepositoryError,
    GetAllSubmodelElementsMetadataSubmodelRepositoryData,
    GetAllSubmodelElementsMetadataSubmodelRepositoryResponse,
    GetAllSubmodelElementsMetadataSubmodelRepositoryError,
    GetAllSubmodelElementsValueOnlySubmodelRepoData,
    GetAllSubmodelElementsValueOnlySubmodelRepoResponse,
    GetAllSubmodelElementsValueOnlySubmodelRepoError,
    GetAllSubmodelElementsReferenceSubmodelRepoData,
    GetAllSubmodelElementsReferenceSubmodelRepoResponse,
    GetAllSubmodelElementsReferenceSubmodelRepoError,
    GetAllSubmodelElementsPathSubmodelRepoData,
    GetAllSubmodelElementsPathSubmodelRepoResponse,
    GetAllSubmodelElementsPathSubmodelRepoError,
    DeleteSubmodelElementByPathSubmodelRepoData,
    DeleteSubmodelElementByPathSubmodelRepoResponse,
    DeleteSubmodelElementByPathSubmodelRepoError,
    GetSubmodelElementByPathSubmodelRepoData,
    GetSubmodelElementByPathSubmodelRepoResponse,
    GetSubmodelElementByPathSubmodelRepoError,
    PatchSubmodelElementByPathSubmodelRepoData,
    PatchSubmodelElementByPathSubmodelRepoResponse,
    PatchSubmodelElementByPathSubmodelRepoError,
    PostSubmodelElementByPathSubmodelRepoData,
    PostSubmodelElementByPathSubmodelRepoResponse,
    PostSubmodelElementByPathSubmodelRepoError,
    PutSubmodelElementByPathSubmodelRepoData,
    PutSubmodelElementByPathSubmodelRepoResponse,
    PutSubmodelElementByPathSubmodelRepoError,
    GetSubmodelElementByPathMetadataSubmodelRepoData,
    GetSubmodelElementByPathMetadataSubmodelRepoResponse,
    GetSubmodelElementByPathMetadataSubmodelRepoError,
    PatchSubmodelElementByPathMetadataSubmodelRepoData,
    PatchSubmodelElementByPathMetadataSubmodelRepoResponse,
    PatchSubmodelElementByPathMetadataSubmodelRepoError,
    GetSubmodelElementByPathValueOnlySubmodelRepoData,
    GetSubmodelElementByPathValueOnlySubmodelRepoResponse,
    GetSubmodelElementByPathValueOnlySubmodelRepoError,
    PatchSubmodelElementByPathValueOnlySubmodelRepoData,
    PatchSubmodelElementByPathValueOnlySubmodelRepoResponse,
    PatchSubmodelElementByPathValueOnlySubmodelRepoError,
    GetSubmodelElementByPathReferenceSubmodelRepoData,
    GetSubmodelElementByPathReferenceSubmodelRepoResponse,
    GetSubmodelElementByPathReferenceSubmodelRepoError,
    GetSubmodelElementByPathPathSubmodelRepoData,
    GetSubmodelElementByPathPathSubmodelRepoResponse,
    GetSubmodelElementByPathPathSubmodelRepoError,
    DeleteFileByPathSubmodelRepoData,
    DeleteFileByPathSubmodelRepoError,
    GetFileByPathSubmodelRepoData,
    GetFileByPathSubmodelRepoResponse,
    GetFileByPathSubmodelRepoError,
    PutFileByPathSubmodelRepoData,
    PutFileByPathSubmodelRepoResponse,
    PutFileByPathSubmodelRepoError,
    InvokeOperationSubmodelRepoData,
    InvokeOperationSubmodelRepoResponse,
    InvokeOperationSubmodelRepoError,
    InvokeOperationValueOnlySubmodelRepoData,
    InvokeOperationValueOnlySubmodelRepoResponse,
    InvokeOperationValueOnlySubmodelRepoError,
    InvokeOperationAsyncSubmodelRepoData,
    InvokeOperationAsyncSubmodelRepoError,
    InvokeOperationAsyncValueOnlySubmodelRepoData,
    InvokeOperationAsyncValueOnlySubmodelRepoError,
    GetOperationAsyncStatusSubmodelRepoData,
    GetOperationAsyncStatusSubmodelRepoResponse,
    GetOperationAsyncStatusSubmodelRepoError,
    GetOperationAsyncResultSubmodelRepoData,
    GetOperationAsyncResultSubmodelRepoResponse,
    GetOperationAsyncResultSubmodelRepoError,
    GetOperationAsyncResultValueOnlySubmodelRepoData,
    GetOperationAsyncResultValueOnlySubmodelRepoResponse,
    GetOperationAsyncResultValueOnlySubmodelRepoError,
    GetAllConceptDescriptionsData,
    GetAllConceptDescriptionsResponse,
    GetAllConceptDescriptionsError,
    PostConceptDescriptionData,
    PostConceptDescriptionResponse,
    PostConceptDescriptionError,
    DeleteConceptDescriptionByIdData,
    DeleteConceptDescriptionByIdResponse,
    DeleteConceptDescriptionByIdError,
    GetConceptDescriptionByIdData,
    GetConceptDescriptionByIdResponse,
    GetConceptDescriptionByIdError,
    PutConceptDescriptionByIdData,
    PutConceptDescriptionByIdResponse,
    PutConceptDescriptionByIdError,
    GetAllAssetAdministrationShellDescriptorsData,
    GetAllAssetAdministrationShellDescriptorsResponse,
    GetAllAssetAdministrationShellDescriptorsError,
    PostAssetAdministrationShellDescriptorData,
    PostAssetAdministrationShellDescriptorResponse,
    PostAssetAdministrationShellDescriptorError,
    DeleteAssetAdministrationShellDescriptorByIdData,
    DeleteAssetAdministrationShellDescriptorByIdResponse,
    DeleteAssetAdministrationShellDescriptorByIdError,
    GetAssetAdministrationShellDescriptorByIdData,
    GetAssetAdministrationShellDescriptorByIdResponse,
    GetAssetAdministrationShellDescriptorByIdError,
    PutAssetAdministrationShellDescriptorByIdData,
    PutAssetAdministrationShellDescriptorByIdResponse,
    PutAssetAdministrationShellDescriptorByIdError,
    GetAllSubmodelDescriptorsThroughSuperpathData,
    GetAllSubmodelDescriptorsThroughSuperpathResponse,
    GetAllSubmodelDescriptorsThroughSuperpathError,
    PostSubmodelDescriptorThroughSuperpathData,
    PostSubmodelDescriptorThroughSuperpathResponse,
    PostSubmodelDescriptorThroughSuperpathError,
    DeleteSubmodelDescriptorByIdThroughSuperpathData,
    DeleteSubmodelDescriptorByIdThroughSuperpathResponse,
    DeleteSubmodelDescriptorByIdThroughSuperpathError,
    GetSubmodelDescriptorByIdThroughSuperpathData,
    GetSubmodelDescriptorByIdThroughSuperpathResponse,
    GetSubmodelDescriptorByIdThroughSuperpathError,
    PutSubmodelDescriptorByIdThroughSuperpathData,
    PutSubmodelDescriptorByIdThroughSuperpathResponse,
    PutSubmodelDescriptorByIdThroughSuperpathError,
    GetAllSubmodelDescriptorsData,
    GetAllSubmodelDescriptorsResponse,
    GetAllSubmodelDescriptorsError,
    PostSubmodelDescriptorData,
    PostSubmodelDescriptorResponse,
    PostSubmodelDescriptorError,
    DeleteSubmodelDescriptorByIdData,
    DeleteSubmodelDescriptorByIdResponse,
    DeleteSubmodelDescriptorByIdError,
    GetSubmodelDescriptorByIdData,
    GetSubmodelDescriptorByIdResponse,
    GetSubmodelDescriptorByIdError,
    PutSubmodelDescriptorByIdData,
    PutSubmodelDescriptorByIdResponse,
    PutSubmodelDescriptorByIdError,
    GetAllAssetAdministrationShellIdsByAssetLinkData,
    GetAllAssetAdministrationShellIdsByAssetLinkResponse,
    GetAllAssetAdministrationShellIdsByAssetLinkError,
    DeleteAllAssetLinksByIdData,
    DeleteAllAssetLinksByIdResponse,
    DeleteAllAssetLinksByIdError,
    GetAllAssetLinksByIdData,
    GetAllAssetLinksByIdResponse,
    GetAllAssetLinksByIdError,
    PostAllAssetLinksByIdData,
    PostAllAssetLinksByIdResponse,
    PostAllAssetLinksByIdError,
    GetAllAasxPackageIdsData,
    GetAllAasxPackageIdsResponse,
    GetAllAasxPackageIdsError,
    PostAasxPackageData,
    PostAasxPackageResponse,
    PostAasxPackageError,
    DeleteAasxByPackageIdData,
    DeleteAasxByPackageIdResponse,
    DeleteAasxByPackageIdError,
    GetAasxByPackageIdData,
    GetAasxByPackageIdResponse,
    GetAasxByPackageIdError,
    PutAasxByPackageIdData,
    PutAasxByPackageIdResponse,
    PutAasxByPackageIdError,
    GenerateSerializationByIdsData,
    GenerateSerializationByIdsResponse,
    GenerateSerializationByIdsError,
    GetDescriptionData,
    GetDescriptionResponse,
    GetDescriptionError,
} from './types.gen';

export const client = createClient(createConfig());

/**
 * Returns a specific Asset Administration Shell
 */
export const getAssetAdministrationShell = <ThrowOnError extends boolean = false>(
    options?: Options<GetAssetAdministrationShellData, ThrowOnError>
) => {
    return (options?.client ?? client).get<
        GetAssetAdministrationShellResponse,
        GetAssetAdministrationShellError,
        ThrowOnError
    >({
        url: '/aas',
        ...options,
    });
};

/**
 * Updates an existing Asset Administration Shell
 */
export const putAssetAdministrationShell = <ThrowOnError extends boolean = false>(
    options: Options<PutAssetAdministrationShellData, ThrowOnError>
) => {
    return (options?.client ?? client).put<
        PutAssetAdministrationShellResponse,
        PutAssetAdministrationShellError,
        ThrowOnError
    >({
        url: '/aas',
        ...options,
        headers: {
            'Content-Type': 'application/json',
            ...options?.headers,
        },
    });
};

/**
 * Returns a specific Asset Administration Shell as a Reference
 */
export const getAssetAdministrationShellReference = <ThrowOnError extends boolean = false>(
    options?: Options<GetAssetAdministrationShellReferenceData, ThrowOnError>
) => {
    return (options?.client ?? client).get<
        GetAssetAdministrationShellReferenceResponse,
        GetAssetAdministrationShellReferenceError,
        ThrowOnError
    >({
        url: '/aas/$reference',
        ...options,
    });
};

/**
 * Returns the Asset Information
 */
export const getAssetInformation = <ThrowOnError extends boolean = false>(
    options?: Options<GetAssetInformationData, ThrowOnError>
) => {
    return (options?.client ?? client).get<GetAssetInformationResponse, GetAssetInformationError, ThrowOnError>({
        url: '/aas/asset-information',
        ...options,
    });
};

/**
 * Updates the Asset Information
 */
export const putAssetInformation = <ThrowOnError extends boolean = false>(
    options: Options<PutAssetInformationData, ThrowOnError>
) => {
    return (options?.client ?? client).put<PutAssetInformationResponse, PutAssetInformationError, ThrowOnError>({
        url: '/aas/asset-information',
        ...options,
        headers: {
            'Content-Type': 'application/json',
            ...options?.headers,
        },
    });
};

export const deleteThumbnail = <ThrowOnError extends boolean = false>(
    options?: Options<DeleteThumbnailData, ThrowOnError>
) => {
    return (options?.client ?? client).delete<unknown, DeleteThumbnailError, ThrowOnError>({
        url: '/aas/asset-information/thumbnail',
        ...options,
    });
};

export const getThumbnail = <ThrowOnError extends boolean = false>(
    options?: Options<GetThumbnailData, ThrowOnError>
) => {
    return (options?.client ?? client).get<GetThumbnailResponse, GetThumbnailError, ThrowOnError>({
        url: '/aas/asset-information/thumbnail',
        ...options,
    });
};

export const putThumbnail = <ThrowOnError extends boolean = false>(
    options: Options<PutThumbnailData, ThrowOnError>
) => {
    return (options?.client ?? client).put<PutThumbnailResponse, PutThumbnailError, ThrowOnError>({
        ...formDataBodySerializer,
        url: '/aas/asset-information/thumbnail',
        ...options,
        headers: {
            'Content-Type': null,
            ...options?.headers,
        },
    });
};

/**
 * Returns all submodel references
 */
export const getAllSubmodelReferences = <ThrowOnError extends boolean = false>(
    options?: Options<GetAllSubmodelReferencesData, ThrowOnError>
) => {
    return (options?.client ?? client).get<
        GetAllSubmodelReferencesResponse,
        GetAllSubmodelReferencesError,
        ThrowOnError
    >({
        url: '/aas/submodel-refs',
        ...options,
    });
};

/**
 * Creates a submodel reference at the Asset Administration Shell
 */
export const postSubmodelReference = <ThrowOnError extends boolean = false>(
    options: Options<PostSubmodelReferenceData, ThrowOnError>
) => {
    return (options?.client ?? client).post<PostSubmodelReferenceResponse, PostSubmodelReferenceError, ThrowOnError>({
        url: '/aas/submodel-refs',
        ...options,
        headers: {
            'Content-Type': 'application/json',
            ...options?.headers,
        },
    });
};

/**
 * Deletes the submodel reference from the Asset Administration Shell. Does not delete the submodel itself!
 */
export const deleteSubmodelReferenceById = <ThrowOnError extends boolean = false>(
    options: Options<DeleteSubmodelReferenceByIdData, ThrowOnError>
) => {
    return (options?.client ?? client).delete<
        DeleteSubmodelReferenceByIdResponse,
        DeleteSubmodelReferenceByIdError,
        ThrowOnError
    >({
        url: '/aas/submodel-refs/{submodelIdentifier}',
        ...options,
    });
};

/**
 * Deletes the submodel from the Asset Administration Shell.
 */
export const deleteSubmodelByIdAas = <ThrowOnError extends boolean = false>(
    options: Options<DeleteSubmodelByIdAasData, ThrowOnError>
) => {
    return (options?.client ?? client).delete<DeleteSubmodelByIdAasResponse, DeleteSubmodelByIdAasError, ThrowOnError>({
        url: '/aas/submodels/{submodelIdentifier}',
        ...options,
    });
};

/**
 * Returns the Submodel
 */
export const getSubmodelAas = <ThrowOnError extends boolean = false>(
    options: Options<GetSubmodelAasData, ThrowOnError>
) => {
    return (options?.client ?? client).get<GetSubmodelAasResponse, GetSubmodelAasError, ThrowOnError>({
        url: '/aas/submodels/{submodelIdentifier}',
        ...options,
    });
};

/**
 * Updates the Submodel
 */
export const patchSubmodelAas = <ThrowOnError extends boolean = false>(
    options: Options<PatchSubmodelAasData, ThrowOnError>
) => {
    return (options?.client ?? client).patch<PatchSubmodelAasResponse, PatchSubmodelAasError, ThrowOnError>({
        url: '/aas/submodels/{submodelIdentifier}',
        ...options,
        headers: {
            'Content-Type': 'application/json',
            ...options?.headers,
        },
    });
};

/**
 * Updates the Submodel
 */
export const putSubmodelAas = <ThrowOnError extends boolean = false>(
    options: Options<PutSubmodelAasData, ThrowOnError>
) => {
    return (options?.client ?? client).put<PutSubmodelAasResponse, PutSubmodelAasError, ThrowOnError>({
        url: '/aas/submodels/{submodelIdentifier}',
        ...options,
        headers: {
            'Content-Type': 'application/json',
            ...options?.headers,
        },
    });
};

/**
 * Returns the Submodel's metadata elements
 */
export const getSubmodelMetadataAas = <ThrowOnError extends boolean = false>(
    options: Options<GetSubmodelMetadataAasData, ThrowOnError>
) => {
    return (options?.client ?? client).get<GetSubmodelMetadataAasResponse, GetSubmodelMetadataAasError, ThrowOnError>({
        url: '/aas/submodels/{submodelIdentifier}/$metadata',
        ...options,
    });
};

/**
 * Updates the metadata attributes of the Submodel
 */
export const patchSubmodelMetadataAas = <ThrowOnError extends boolean = false>(
    options: Options<PatchSubmodelMetadataAasData, ThrowOnError>
) => {
    return (options?.client ?? client).patch<
        PatchSubmodelMetadataAasResponse,
        PatchSubmodelMetadataAasError,
        ThrowOnError
    >({
        url: '/aas/submodels/{submodelIdentifier}/$metadata',
        ...options,
        headers: {
            'Content-Type': 'application/json',
            ...options?.headers,
        },
    });
};

/**
 * Returns the Submodel's ValueOnly representation
 */
export const getSubmodelValueOnlyAas = <ThrowOnError extends boolean = false>(
    options: Options<GetSubmodelValueOnlyAasData, ThrowOnError>
) => {
    return (options?.client ?? client).get<GetSubmodelValueOnlyAasResponse, GetSubmodelValueOnlyAasError, ThrowOnError>(
        {
            url: '/aas/submodels/{submodelIdentifier}/$value',
            ...options,
        }
    );
};

/**
 * Updates the values of the Submodel
 */
export const patchSubmodelValueOnlyAas = <ThrowOnError extends boolean = false>(
    options: Options<PatchSubmodelValueOnlyAasData, ThrowOnError>
) => {
    return (options?.client ?? client).patch<
        PatchSubmodelValueOnlyAasResponse,
        PatchSubmodelValueOnlyAasError,
        ThrowOnError
    >({
        url: '/aas/submodels/{submodelIdentifier}/$value',
        ...options,
        headers: {
            'Content-Type': 'application/json',
            ...options?.headers,
        },
    });
};

/**
 * Returns the Submodel as a Reference
 */
export const getSubmodelMetadataReferenceAas = <ThrowOnError extends boolean = false>(
    options: Options<GetSubmodelMetadataReferenceAasData, ThrowOnError>
) => {
    return (options?.client ?? client).get<
        GetSubmodelMetadataReferenceAasResponse,
        GetSubmodelMetadataReferenceAasError,
        ThrowOnError
    >({
        url: '/aas/submodels/{submodelIdentifier}/$reference',
        ...options,
    });
};

/**
 * Returns the Submodel's metadata elements
 */
export const getSubmodelPathAas = <ThrowOnError extends boolean = false>(
    options: Options<GetSubmodelPathAasData, ThrowOnError>
) => {
    return (options?.client ?? client).get<GetSubmodelPathAasResponse, GetSubmodelPathAasError, ThrowOnError>({
        url: '/aas/submodels/{submodelIdentifier}/$path',
        ...options,
    });
};

/**
 * Returns all submodel elements including their hierarchy
 */
export const getAllSubmodelElementsAas = <ThrowOnError extends boolean = false>(
    options: Options<GetAllSubmodelElementsAasData, ThrowOnError>
) => {
    return (options?.client ?? client).get<
        GetAllSubmodelElementsAasResponse,
        GetAllSubmodelElementsAasError,
        ThrowOnError
    >({
        url: '/aas/submodels/{submodelIdentifier}/submodel-elements',
        ...options,
    });
};

/**
 * Creates a new submodel element
 */
export const postSubmodelElementAas = <ThrowOnError extends boolean = false>(
    options: Options<PostSubmodelElementAasData, ThrowOnError>
) => {
    return (options?.client ?? client).post<PostSubmodelElementAasResponse, PostSubmodelElementAasError, ThrowOnError>({
        url: '/aas/submodels/{submodelIdentifier}/submodel-elements',
        ...options,
        headers: {
            'Content-Type': 'application/json',
            ...options?.headers,
        },
    });
};

/**
 * Returns all submodel elements including their hierarchy
 */
export const getAllSubmodelElementsMetadataAas = <ThrowOnError extends boolean = false>(
    options: Options<GetAllSubmodelElementsMetadataAasData, ThrowOnError>
) => {
    return (options?.client ?? client).get<
        GetAllSubmodelElementsMetadataAasResponse,
        GetAllSubmodelElementsMetadataAasError,
        ThrowOnError
    >({
        url: '/aas/submodels/{submodelIdentifier}/submodel-elements/$metadata',
        ...options,
    });
};

/**
 * Returns all submodel elements including their hierarchy in the ValueOnly representation
 */
export const getAllSubmodelElementsValueOnlyAas = <ThrowOnError extends boolean = false>(
    options: Options<GetAllSubmodelElementsValueOnlyAasData, ThrowOnError>
) => {
    return (options?.client ?? client).get<
        GetAllSubmodelElementsValueOnlyAasResponse,
        GetAllSubmodelElementsValueOnlyAasError,
        ThrowOnError
    >({
        url: '/aas/submodels/{submodelIdentifier}/submodel-elements/$value',
        ...options,
    });
};

/**
 * Returns all submodel elements as a list of References
 */
export const getAllSubmodelElementsReferenceAas = <ThrowOnError extends boolean = false>(
    options: Options<GetAllSubmodelElementsReferenceAasData, ThrowOnError>
) => {
    return (options?.client ?? client).get<
        GetAllSubmodelElementsReferenceAasResponse,
        GetAllSubmodelElementsReferenceAasError,
        ThrowOnError
    >({
        url: '/aas/submodels/{submodelIdentifier}/submodel-elements/$reference',
        ...options,
    });
};

/**
 * Returns all submodel elements including their hierarchy
 */
export const getAllSubmodelElementsPathAas = <ThrowOnError extends boolean = false>(
    options: Options<GetAllSubmodelElementsPathAasData, ThrowOnError>
) => {
    return (options?.client ?? client).get<
        GetAllSubmodelElementsPathAasResponse,
        GetAllSubmodelElementsPathAasError,
        ThrowOnError
    >({
        url: '/aas/submodels/{submodelIdentifier}/submodel-elements/$path',
        ...options,
    });
};

/**
 * Deletes a submodel element at a specified path within the submodel elements hierarchy
 */
export const deleteSubmodelElementByPathAas = <ThrowOnError extends boolean = false>(
    options: Options<DeleteSubmodelElementByPathAasData, ThrowOnError>
) => {
    return (options?.client ?? client).delete<
        DeleteSubmodelElementByPathAasResponse,
        DeleteSubmodelElementByPathAasError,
        ThrowOnError
    >({
        url: '/aas/submodels/{submodelIdentifier}/submodel-elements/{idShortPath}',
        ...options,
    });
};

/**
 * Returns a specific submodel element from the Submodel at a specified path
 */
export const getSubmodelElementByPathAas = <ThrowOnError extends boolean = false>(
    options: Options<GetSubmodelElementByPathAasData, ThrowOnError>
) => {
    return (options?.client ?? client).get<
        GetSubmodelElementByPathAasResponse,
        GetSubmodelElementByPathAasError,
        ThrowOnError
    >({
        url: '/aas/submodels/{submodelIdentifier}/submodel-elements/{idShortPath}',
        ...options,
    });
};

/**
 * Updates an existing submodel element value at a specified path within submodel elements hierarchy
 */
export const patchSubmodelElementValueByPathAas = <ThrowOnError extends boolean = false>(
    options: Options<PatchSubmodelElementValueByPathAasData, ThrowOnError>
) => {
    return (options?.client ?? client).patch<
        PatchSubmodelElementValueByPathAasResponse,
        PatchSubmodelElementValueByPathAasError,
        ThrowOnError
    >({
        url: '/aas/submodels/{submodelIdentifier}/submodel-elements/{idShortPath}',
        ...options,
        headers: {
            'Content-Type': 'application/json',
            ...options?.headers,
        },
    });
};

/**
 * Creates a new submodel element at a specified path within submodel elements hierarchy
 */
export const postSubmodelElementByPathAas = <ThrowOnError extends boolean = false>(
    options: Options<PostSubmodelElementByPathAasData, ThrowOnError>
) => {
    return (options?.client ?? client).post<
        PostSubmodelElementByPathAasResponse,
        PostSubmodelElementByPathAasError,
        ThrowOnError
    >({
        url: '/aas/submodels/{submodelIdentifier}/submodel-elements/{idShortPath}',
        ...options,
        headers: {
            'Content-Type': 'application/json',
            ...options?.headers,
        },
    });
};

/**
 * Updates an existing submodel element at a specified path within submodel elements hierarchy
 */
export const putSubmodelElementByPathAas = <ThrowOnError extends boolean = false>(
    options: Options<PutSubmodelElementByPathAasData, ThrowOnError>
) => {
    return (options?.client ?? client).put<
        PutSubmodelElementByPathAasResponse,
        PutSubmodelElementByPathAasError,
        ThrowOnError
    >({
        url: '/aas/submodels/{submodelIdentifier}/submodel-elements/{idShortPath}',
        ...options,
        headers: {
            'Content-Type': 'application/json',
            ...options?.headers,
        },
    });
};

/**
 * Returns the metadata attributes if a specific submodel element from the Submodel at a specified path
 */
export const getSubmodelElementByPathMetadataAas = <ThrowOnError extends boolean = false>(
    options: Options<GetSubmodelElementByPathMetadataAasData, ThrowOnError>
) => {
    return (options?.client ?? client).get<
        GetSubmodelElementByPathMetadataAasResponse,
        GetSubmodelElementByPathMetadataAasError,
        ThrowOnError
    >({
        url: '/aas/submodels/{submodelIdentifier}/submodel-elements/{idShortPath}/$metadata',
        ...options,
    });
};

/**
 * Updates the metadata attributes of an existing submodel element value at a specified path within submodel elements hierarchy
 */
export const patchSubmodelElementValueByPathMetadataAas = <ThrowOnError extends boolean = false>(
    options: Options<PatchSubmodelElementValueByPathMetadataAasData, ThrowOnError>
) => {
    return (options?.client ?? client).patch<
        PatchSubmodelElementValueByPathMetadataAasResponse,
        PatchSubmodelElementValueByPathMetadataAasError,
        ThrowOnError
    >({
        url: '/aas/submodels/{submodelIdentifier}/submodel-elements/{idShortPath}/$metadata',
        ...options,
        headers: {
            'Content-Type': 'application/json',
            ...options?.headers,
        },
    });
};

/**
 * Returns a specific submodel element from the Submodel at a specified path in the ValueOnly representation
 */
export const getSubmodelElementByPathValueOnlyAas = <ThrowOnError extends boolean = false>(
    options: Options<GetSubmodelElementByPathValueOnlyAasData, ThrowOnError>
) => {
    return (options?.client ?? client).get<
        GetSubmodelElementByPathValueOnlyAasResponse,
        GetSubmodelElementByPathValueOnlyAasError,
        ThrowOnError
    >({
        url: '/aas/submodels/{submodelIdentifier}/submodel-elements/{idShortPath}/$value',
        ...options,
    });
};

/**
 * Updates the value of an existing submodel element value at a specified path within submodel elements hierarchy
 */
// export const patchSubmodelElementValueByPathValueOnlyAas = <ThrowOnError extends boolean = false>(
//     options: Options<PatchSubmodelElementValueByPathValueOnlyAasData, ThrowOnError>
// ) => {
//     return (options?.client ?? client).patch<
//         PatchSubmodelElementValueByPathValueOnlyAasResponse,
//         PatchSubmodelElementValueByPathValueOnlyAasError,
//         ThrowOnError
//     >({
//         url: '/aas/submodels/{submodelIdentifier}/submodel-elements/{idShortPath}/$value',
//         ...options,
//         headers: {
//             'Content-Type': 'application/json',
//             ...options?.headers,
//         },
//     });
// };

/**
 * Returns the Reference of a specific submodel element from the Submodel at a specified path in the ValueOnly representation
 */
export const getSubmodelElementByPathReferenceAas = <ThrowOnError extends boolean = false>(
    options: Options<GetSubmodelElementByPathReferenceAasData, ThrowOnError>
) => {
    return (options?.client ?? client).get<
        GetSubmodelElementByPathReferenceAasResponse,
        GetSubmodelElementByPathReferenceAasError,
        ThrowOnError
    >({
        url: '/aas/submodels/{submodelIdentifier}/submodel-elements/{idShortPath}/$reference',
        ...options,
    });
};

/**
 * Returns a specific submodel element from the Submodel at a specified path in the Path notation
 */
export const getSubmodelElementByPathPathAas = <ThrowOnError extends boolean = false>(
    options: Options<GetSubmodelElementByPathPathAasData, ThrowOnError>
) => {
    return (options?.client ?? client).get<
        GetSubmodelElementByPathPathAasResponse,
        GetSubmodelElementByPathPathAasError,
        ThrowOnError
    >({
        url: '/aas/submodels/{submodelIdentifier}/submodel-elements/{idShortPath}/$path',
        ...options,
    });
};

/**
 * Deletes file content of an existing submodel element at a specified path within submodel elements hierarchy
 */
export const deleteFileByPathAas = <ThrowOnError extends boolean = false>(
    options: Options<DeleteFileByPathAasData, ThrowOnError>
) => {
    return (options?.client ?? client).delete<unknown, DeleteFileByPathAasError, ThrowOnError>({
        url: '/aas/submodels/{submodelIdentifier}/submodel-elements/{idShortPath}/attachment',
        ...options,
    });
};

/**
 * Downloads file content from a specific submodel element from the Submodel at a specified path
 */
export const getFileByPathAas = <ThrowOnError extends boolean = false>(
    options: Options<GetFileByPathAasData, ThrowOnError>
) => {
    return (options?.client ?? client).get<GetFileByPathAasResponse, GetFileByPathAasError, ThrowOnError>({
        url: '/aas/submodels/{submodelIdentifier}/submodel-elements/{idShortPath}/attachment',
        ...options,
    });
};

/**
 * Uploads file content to an existing submodel element at a specified path within submodel elements hierarchy
 */
export const putFileByPathAas = <ThrowOnError extends boolean = false>(
    options: Options<PutFileByPathAasData, ThrowOnError>
) => {
    return (options?.client ?? client).put<PutFileByPathAasResponse, PutFileByPathAasError, ThrowOnError>({
        ...formDataBodySerializer,
        url: '/aas/submodels/{submodelIdentifier}/submodel-elements/{idShortPath}/attachment',
        ...options,
        headers: {
            'Content-Type': null,
            ...options?.headers,
        },
    });
};

/**
 * Synchronously invokes an Operation at a specified path
 */
export const invokeOperationSyncAas = <ThrowOnError extends boolean = false>(
    options: Options<InvokeOperationSyncAasData, ThrowOnError>
) => {
    return (options?.client ?? client).post<InvokeOperationSyncAasResponse, InvokeOperationSyncAasError, ThrowOnError>({
        url: '/aas/submodels/{submodelIdentifier}/submodel-elements/{idShortPath}/invoke',
        ...options,
        headers: {
            'Content-Type': 'application/json',
            ...options?.headers,
        },
    });
};

/**
 * Synchronously invokes an Operation at a specified path
 */
export const invokeOperationSyncValueOnlyAas = <ThrowOnError extends boolean = false>(
    options: Options<InvokeOperationSyncValueOnlyAasData, ThrowOnError>
) => {
    return (options?.client ?? client).post<
        InvokeOperationSyncValueOnlyAasResponse,
        InvokeOperationSyncValueOnlyAasError,
        ThrowOnError
    >({
        url: '/aas/submodels/{submodelIdentifier}/submodel-elements/{idShortPath}/invoke/$value',
        ...options,
        headers: {
            'Content-Type': 'application/json',
            ...options?.headers,
        },
    });
};

/**
 * Synchronously invokes an Operation at a specified path
 */
export const invokeOperationAsyncAas = <ThrowOnError extends boolean = false>(
    options: Options<InvokeOperationAsyncAasData, ThrowOnError>
) => {
    return (options?.client ?? client).post<unknown, InvokeOperationAsyncAasError, ThrowOnError>({
        url: '/aas/submodels/{submodelIdentifier}/submodel-elements/{idShortPath}/invoke-async',
        ...options,
        headers: {
            'Content-Type': 'application/json',
            ...options?.headers,
        },
    });
};

/**
 * Asynchronously invokes an Operation at a specified path
 */
export const invokeOperationAsyncValueOnlyAas = <ThrowOnError extends boolean = false>(
    options: Options<InvokeOperationAsyncValueOnlyAasData, ThrowOnError>
) => {
    return (options?.client ?? client).post<unknown, InvokeOperationAsyncValueOnlyAasError, ThrowOnError>({
        url: '/aas/submodels/{submodelIdentifier}/submodel-elements/{idShortPath}/invoke-asnyc/$value',
        ...options,
        headers: {
            'Content-Type': 'application/json',
            ...options?.headers,
        },
    });
};

/**
 * Returns the Operation status of an asynchronous invoked Operation
 */
export const getOperationAsyncStatusAas = <ThrowOnError extends boolean = false>(
    options: Options<GetOperationAsyncStatusAasData, ThrowOnError>
) => {
    return (options?.client ?? client).get<
        GetOperationAsyncStatusAasResponse,
        GetOperationAsyncStatusAasError,
        ThrowOnError
    >({
        url: '/aas/submodels/{submodelIdentifier}/submodel-elements/{idShortPath}/operation-status/{handleId}',
        ...options,
    });
};

/**
 * Returns the Operation result of an asynchronous invoked Operation
 */
export const getOperationAsyncResultAas = <ThrowOnError extends boolean = false>(
    options: Options<GetOperationAsyncResultAasData, ThrowOnError>
) => {
    return (options?.client ?? client).get<
        GetOperationAsyncResultAasResponse,
        GetOperationAsyncResultAasError,
        ThrowOnError
    >({
        url: '/aas/submodels/{submodelIdentifier}/submodel-elements/{idShortPath}/operation-results/{handleId}',
        ...options,
    });
};

/**
 * Returns the value of the Operation result of an asynchronous invoked Operation
 */
export const getOperationAsyncResultValueOnlyAas = <ThrowOnError extends boolean = false>(
    options: Options<GetOperationAsyncResultValueOnlyAasData, ThrowOnError>
) => {
    return (options?.client ?? client).get<
        GetOperationAsyncResultValueOnlyAasResponse,
        GetOperationAsyncResultValueOnlyAasError,
        ThrowOnError
    >({
        url: '/aas/submodels/{submodelIdentifier}/submodel-elements/{idShortPath}/operation-results/{handleId}/$value',
        ...options,
    });
};

/**
 * Returns the Submodel
 */
export const getSubmodel = <ThrowOnError extends boolean = false>(options?: Options<GetSubmodelData, ThrowOnError>) => {
    return (options?.client ?? client).get<GetSubmodelResponse, GetSubmodelError, ThrowOnError>({
        url: '/submodel',
        ...options,
    });
};

/**
 * Updates the Submodel
 */
export const patchSubmodel = <ThrowOnError extends boolean = false>(
    options: Options<PatchSubmodelData, ThrowOnError>
) => {
    return (options?.client ?? client).patch<PatchSubmodelResponse, PatchSubmodelError, ThrowOnError>({
        url: '/submodel',
        ...options,
        headers: {
            'Content-Type': 'application/json',
            ...options?.headers,
        },
    });
};

/**
 * Updates the Submodel
 */
export const putSubmodel = <ThrowOnError extends boolean = false>(options: Options<PutSubmodelData, ThrowOnError>) => {
    return (options?.client ?? client).put<PutSubmodelResponse, PutSubmodelError, ThrowOnError>({
        url: '/submodel',
        ...options,
        headers: {
            'Content-Type': 'application/json',
            ...options?.headers,
        },
    });
};

/**
 * Returns the metadata attributes of a specific Submodel
 */
export const getSubmodelMetadata = <ThrowOnError extends boolean = false>(
    options?: Options<GetSubmodelMetadataData, ThrowOnError>
) => {
    return (options?.client ?? client).get<GetSubmodelMetadataResponse, GetSubmodelMetadataError, ThrowOnError>({
        url: '/submodel/$metadata',
        ...options,
    });
};

/**
 * Updates the metadata attributes of the Submodel
 */
export const patchSubmodelMetadata = <ThrowOnError extends boolean = false>(
    options: Options<PatchSubmodelMetadataData, ThrowOnError>
) => {
    return (options?.client ?? client).patch<PatchSubmodelMetadataResponse, PatchSubmodelMetadataError, ThrowOnError>({
        url: '/submodel/$metadata',
        ...options,
        headers: {
            'Content-Type': 'application/json',
            ...options?.headers,
        },
    });
};

/**
 * Returns the Submodel in the ValueOnly representation
 */
export const getSubmodelValueOnly = <ThrowOnError extends boolean = false>(
    options?: Options<GetSubmodelValueOnlyData, ThrowOnError>
) => {
    return (options?.client ?? client).get<GetSubmodelValueOnlyResponse, GetSubmodelValueOnlyError, ThrowOnError>({
        url: '/submodel/$value',
        ...options,
    });
};

/**
 * Updates the values of the Submodel
 */
export const patchSubmodelValueOnly = <ThrowOnError extends boolean = false>(
    options: Options<PatchSubmodelValueOnlyData, ThrowOnError>
) => {
    return (options?.client ?? client).patch<PatchSubmodelValueOnlyResponse, PatchSubmodelValueOnlyError, ThrowOnError>(
        {
            url: '/submodel/$value',
            ...options,
            headers: {
                'Content-Type': 'application/json',
                ...options?.headers,
            },
        }
    );
};

/**
 * Returns the Reference of the Submodel
 */
export const getSubmodelReference = <ThrowOnError extends boolean = false>(
    options?: Options<GetSubmodelReferenceData, ThrowOnError>
) => {
    return (options?.client ?? client).get<GetSubmodelReferenceResponse, GetSubmodelReferenceError, ThrowOnError>({
        url: '/submodel/$reference',
        ...options,
    });
};

/**
 * Returns the Submodel in the Path notation
 */
export const getSubmodelPath = <ThrowOnError extends boolean = false>(
    options?: Options<GetSubmodelPathData, ThrowOnError>
) => {
    return (options?.client ?? client).get<GetSubmodelPathResponse, GetSubmodelPathError, ThrowOnError>({
        url: '/submodel/$path',
        ...options,
    });
};

/**
 * Returns all submodel elements including their hierarchy
 */
export const getAllSubmodelElements = <ThrowOnError extends boolean = false>(
    options?: Options<GetAllSubmodelElementsData, ThrowOnError>
) => {
    return (options?.client ?? client).get<GetAllSubmodelElementsResponse, GetAllSubmodelElementsError, ThrowOnError>({
        url: '/submodel/submodel-elements',
        ...options,
    });
};

/**
 * Creates a new submodel element
 */
export const postSubmodelElement = <ThrowOnError extends boolean = false>(
    options: Options<PostSubmodelElementData, ThrowOnError>
) => {
    return (options?.client ?? client).post<PostSubmodelElementResponse, PostSubmodelElementError, ThrowOnError>({
        url: '/submodel/submodel-elements',
        ...options,
        headers: {
            'Content-Type': 'application/json',
            ...options?.headers,
        },
    });
};

/**
 * Returns the metadata attributes of all submodel elements including their hierarchy
 */
export const getAllSubmodelElementsMetadata = <ThrowOnError extends boolean = false>(
    options?: Options<GetAllSubmodelElementsMetadataData, ThrowOnError>
) => {
    return (options?.client ?? client).get<
        GetAllSubmodelElementsMetadataResponse,
        GetAllSubmodelElementsMetadataError,
        ThrowOnError
    >({
        url: '/submodel/submodel-elements/$metadata',
        ...options,
    });
};

/**
 * Returns all submodel elements including their hierarchy in the ValueOnly representation
 */
export const getAllSubmodelElementsValueOnly = <ThrowOnError extends boolean = false>(
    options?: Options<GetAllSubmodelElementsValueOnlyData, ThrowOnError>
) => {
    return (options?.client ?? client).get<
        GetAllSubmodelElementsValueOnlyResponse,
        GetAllSubmodelElementsValueOnlyError,
        ThrowOnError
    >({
        url: '/submodel/submodel-elements/$value',
        ...options,
    });
};

/**
 * Returns the References of all submodel elements
 */
export const getAllSubmodelElementsReference = <ThrowOnError extends boolean = false>(
    options?: Options<GetAllSubmodelElementsReferenceData, ThrowOnError>
) => {
    return (options?.client ?? client).get<
        GetAllSubmodelElementsReferenceResponse,
        GetAllSubmodelElementsReferenceError,
        ThrowOnError
    >({
        url: '/submodel/submodel-elements/$reference',
        ...options,
    });
};

/**
 * Returns all submodel elements including their hierarchy in the Path notation
 */
export const getAllSubmodelElementsPath = <ThrowOnError extends boolean = false>(
    options?: Options<GetAllSubmodelElementsPathData, ThrowOnError>
) => {
    return (options?.client ?? client).get<
        GetAllSubmodelElementsPathResponse,
        GetAllSubmodelElementsPathError,
        ThrowOnError
    >({
        url: '/submodel/submodel-elements/$path',
        ...options,
    });
};

/**
 * Deletes a submodel element at a specified path within the submodel elements hierarchy
 */
export const deleteSubmodelElementByPath = <ThrowOnError extends boolean = false>(
    options: Options<DeleteSubmodelElementByPathData, ThrowOnError>
) => {
    return (options?.client ?? client).delete<
        DeleteSubmodelElementByPathResponse,
        DeleteSubmodelElementByPathError,
        ThrowOnError
    >({
        url: '/submodel/submodel-elements/{idShortPath}',
        ...options,
    });
};

/**
 * Returns a specific submodel element from the Submodel at a specified path
 */
export const getSubmodelElementByPath = <ThrowOnError extends boolean = false>(
    options: Options<GetSubmodelElementByPathData, ThrowOnError>
) => {
    return (options?.client ?? client).get<
        GetSubmodelElementByPathResponse,
        GetSubmodelElementByPathError,
        ThrowOnError
    >({
        url: '/submodel/submodel-elements/{idShortPath}',
        ...options,
    });
};

/**
 * Updates an existing SubmodelElement
 */
export const patchSubmodelElementByPath = <ThrowOnError extends boolean = false>(
    options: Options<PatchSubmodelElementByPathData, ThrowOnError>
) => {
    return (options?.client ?? client).patch<
        PatchSubmodelElementByPathResponse,
        PatchSubmodelElementByPathError,
        ThrowOnError
    >({
        url: '/submodel/submodel-elements/{idShortPath}',
        ...options,
        headers: {
            'Content-Type': 'application/json',
            ...options?.headers,
        },
    });
};

/**
 * Creates a new submodel element at a specified path within submodel elements hierarchy
 */
export const postSubmodelElementByPath = <ThrowOnError extends boolean = false>(
    options: Options<PostSubmodelElementByPathData, ThrowOnError>
) => {
    return (options?.client ?? client).post<
        PostSubmodelElementByPathResponse,
        PostSubmodelElementByPathError,
        ThrowOnError
    >({
        url: '/submodel/submodel-elements/{idShortPath}',
        ...options,
        headers: {
            'Content-Type': 'application/json',
            ...options?.headers,
        },
    });
};

/**
 * Updates an existing submodel element at a specified path within submodel elements hierarchy
 */
export const putSubmodelElementByPath = <ThrowOnError extends boolean = false>(
    options: Options<PutSubmodelElementByPathData, ThrowOnError>
) => {
    return (options?.client ?? client).put<
        PutSubmodelElementByPathResponse,
        PutSubmodelElementByPathError,
        ThrowOnError
    >({
        url: '/submodel/submodel-elements/{idShortPath}',
        ...options,
        headers: {
            'Content-Type': 'application/json',
            ...options?.headers,
        },
    });
};

/**
 * Returns the matadata attributes of a specific submodel element from the Submodel at a specified path
 */
export const getSubmodelElementByPathMetadata = <ThrowOnError extends boolean = false>(
    options: Options<GetSubmodelElementByPathMetadataData, ThrowOnError>
) => {
    return (options?.client ?? client).get<
        GetSubmodelElementByPathMetadataResponse,
        GetSubmodelElementByPathMetadataError,
        ThrowOnError
    >({
        url: '/submodel/submodel-elements/{idShortPath}/$metadata',
        ...options,
    });
};

/**
 * Updates the metadata attributes an existing SubmodelElement
 */
export const patchSubmodelElementByPathMetadata = <ThrowOnError extends boolean = false>(
    options: Options<PatchSubmodelElementByPathMetadataData, ThrowOnError>
) => {
    return (options?.client ?? client).patch<
        PatchSubmodelElementByPathMetadataResponse,
        PatchSubmodelElementByPathMetadataError,
        ThrowOnError
    >({
        url: '/submodel/submodel-elements/{idShortPath}/$metadata',
        ...options,
        headers: {
            'Content-Type': 'application/json',
            ...options?.headers,
        },
    });
};

/**
 * Returns a specific submodel element from the Submodel at a specified path in the ValueOnly representation
 */
export const getSubmodelElementByPathValueOnly = <ThrowOnError extends boolean = false>(
    options: Options<GetSubmodelElementByPathValueOnlyData, ThrowOnError>
) => {
    return (options?.client ?? client).get<
        GetSubmodelElementByPathValueOnlyResponse,
        GetSubmodelElementByPathValueOnlyError,
        ThrowOnError
    >({
        url: '/submodel/submodel-elements/{idShortPath}/$value',
        ...options,
    });
};

/**
 * Updates the value of an existing SubmodelElement
 */
export const patchSubmodelElementByPathValueOnly = <ThrowOnError extends boolean = false>(
    options: Options<PatchSubmodelElementByPathValueOnlyData, ThrowOnError>
) => {
    return (options?.client ?? client).patch<
        PatchSubmodelElementByPathValueOnlyResponse,
        PatchSubmodelElementByPathValueOnlyError,
        ThrowOnError
    >({
        url: '/submodel/submodel-elements/{idShortPath}/$value',
        ...options,
        headers: {
            'Content-Type': 'application/json',
            ...options?.headers,
        },
    });
};

/**
 * Returns the Referene of a specific submodel element from the Submodel at a specified path
 */
export const getSubmodelElementByPathReference = <ThrowOnError extends boolean = false>(
    options: Options<GetSubmodelElementByPathReferenceData, ThrowOnError>
) => {
    return (options?.client ?? client).get<
        GetSubmodelElementByPathReferenceResponse,
        GetSubmodelElementByPathReferenceError,
        ThrowOnError
    >({
        url: '/submodel/submodel-elements/{idShortPath}/$reference',
        ...options,
    });
};

/**
 * Returns a specific submodel element from the Submodel at a specified path in the Path notation
 */
export const getSubmodelElementByPathPath = <ThrowOnError extends boolean = false>(
    options: Options<GetSubmodelElementByPathPathData, ThrowOnError>
) => {
    return (options?.client ?? client).get<
        GetSubmodelElementByPathPathResponse,
        GetSubmodelElementByPathPathError,
        ThrowOnError
    >({
        url: '/submodel/submodel-elements/{idShortPath}/$path',
        ...options,
    });
};

/**
 * Deletes file content of an existing submodel element at a specified path within submodel elements hierarchy
 */
export const deleteFileByPath = <ThrowOnError extends boolean = false>(
    options: Options<DeleteFileByPathData, ThrowOnError>
) => {
    return (options?.client ?? client).delete<unknown, DeleteFileByPathError, ThrowOnError>({
        url: '/submodel/submodel-elements/{idShortPath}/attachment',
        ...options,
    });
};

/**
 * Downloads file content from a specific submodel element from the Submodel at a specified path
 */
export const getFileByPath = <ThrowOnError extends boolean = false>(
    options: Options<GetFileByPathData, ThrowOnError>
) => {
    return (options?.client ?? client).get<GetFileByPathResponse, GetFileByPathError, ThrowOnError>({
        url: '/submodel/submodel-elements/{idShortPath}/attachment',
        ...options,
    });
};

/**
 * Uploads file content to an existing submodel element at a specified path within submodel elements hierarchy
 */
export const putFileByPath = <ThrowOnError extends boolean = false>(
    options: Options<PutFileByPathData, ThrowOnError>
) => {
    return (options?.client ?? client).put<PutFileByPathResponse, PutFileByPathError, ThrowOnError>({
        ...formDataBodySerializer,
        url: '/submodel/submodel-elements/{idShortPath}/attachment',
        ...options,
        headers: {
            'Content-Type': null,
            ...options?.headers,
        },
    });
};

/**
 * Synchronously invokes an Operation at a specified path
 */
export const invokeOperation = <ThrowOnError extends boolean = false>(
    options: Options<InvokeOperationData, ThrowOnError>
) => {
    return (options?.client ?? client).post<InvokeOperationResponse, InvokeOperationError, ThrowOnError>({
        url: '/submodel/submodel-elements/{idShortPath}/invoke',
        ...options,
        headers: {
            'Content-Type': 'application/json',
            ...options?.headers,
        },
    });
};

/**
 * Asynchronously invokes an Operation at a specified path
 */
export const invokeOperationAsync = <ThrowOnError extends boolean = false>(
    options: Options<InvokeOperationAsyncData, ThrowOnError>
) => {
    return (options?.client ?? client).post<unknown, InvokeOperationAsyncError, ThrowOnError>({
        url: '/submodel/submodel-elements/{idShortPath}/invoke-async',
        ...options,
        headers: {
            'Content-Type': 'application/json',
            ...options?.headers,
        },
    });
};

/**
 * Synchronously invokes an Operation at a specified path
 */
export const invokeOperationSyncValueOnly = <ThrowOnError extends boolean = false>(
    options: Options<InvokeOperationSyncValueOnlyData, ThrowOnError>
) => {
    return (options?.client ?? client).post<
        InvokeOperationSyncValueOnlyResponse,
        InvokeOperationSyncValueOnlyError,
        ThrowOnError
    >({
        url: '/submodel/submodel-elements/{idShortPath}/invoke/$value',
        ...options,
        headers: {
            'Content-Type': 'application/json',
            ...options?.headers,
        },
    });
};

/**
 * Asynchronously invokes an Operation at a specified path
 */
export const invokeOperationAsyncValueOnly = <ThrowOnError extends boolean = false>(
    options: Options<InvokeOperationAsyncValueOnlyData, ThrowOnError>
) => {
    return (options?.client ?? client).post<unknown, InvokeOperationAsyncValueOnlyError, ThrowOnError>({
        url: '/submodel/submodel-elements/{idShortPath}/invoke-async/$value',
        ...options,
        headers: {
            'Content-Type': 'application/json',
            ...options?.headers,
        },
    });
};

/**
 * Returns the Operation status of an asynchronous invoked Operation
 */
export const getOperationAsyncStatus = <ThrowOnError extends boolean = false>(
    options: Options<GetOperationAsyncStatusData, ThrowOnError>
) => {
    return (options?.client ?? client).get<GetOperationAsyncStatusResponse, GetOperationAsyncStatusError, ThrowOnError>(
        {
            url: '/submodel/submodel-elements/{idShortPath}/operation-status/{handleId}',
            ...options,
        }
    );
};

/**
 * Returns the Operation result of an asynchronous invoked Operation
 */
export const getOperationAsyncResult = <ThrowOnError extends boolean = false>(
    options: Options<GetOperationAsyncResultData, ThrowOnError>
) => {
    return (options?.client ?? client).get<GetOperationAsyncResultResponse, GetOperationAsyncResultError, ThrowOnError>(
        {
            url: '/submodel/submodel-elements/{idShortPath}/operation-results/{handleId}',
            ...options,
        }
    );
};

/**
 * Returns the value of the Operation result of an asynchronous invoked Operation
 */
export const getOperationAsyncResultValueOnly = <ThrowOnError extends boolean = false>(
    options: Options<GetOperationAsyncResultValueOnlyData, ThrowOnError>
) => {
    return (options?.client ?? client).get<
        GetOperationAsyncResultValueOnlyResponse,
        GetOperationAsyncResultValueOnlyError,
        ThrowOnError
    >({
        url: '/submodel/submodel-elements/{idShortPath}/operation-results/{handleId}/$value',
        ...options,
    });
};

/**
 * Returns all Asset Administration Shells
 */
export const getAllAssetAdministrationShells = <ThrowOnError extends boolean = false>(
    options?: Options<GetAllAssetAdministrationShellsData, ThrowOnError>
) => {
    return (options?.client ?? client).get<
        GetAllAssetAdministrationShellsResponse,
        GetAllAssetAdministrationShellsError,
        ThrowOnError
    >({
        url: '/shells',
        ...options,
    });
};

/**
 * Creates a new Asset Administration Shell
 */
export const postAssetAdministrationShell = <ThrowOnError extends boolean = false>(
    options: Options<PostAssetAdministrationShellData, ThrowOnError>
) => {
    return (options?.client ?? client).post<
        PostAssetAdministrationShellResponse,
        PostAssetAdministrationShellError,
        ThrowOnError
    >({
        url: '/shells',
        ...options,
        headers: {
            'Content-Type': 'application/json',
            ...options?.headers,
        },
    });
};

/**
 * Returns References to all Asset Administration Shells
 */
export const getAllAssetAdministrationShellsReference = <ThrowOnError extends boolean = false>(
    options?: Options<GetAllAssetAdministrationShellsReferenceData, ThrowOnError>
) => {
    return (options?.client ?? client).get<
        GetAllAssetAdministrationShellsReferenceResponse,
        GetAllAssetAdministrationShellsReferenceError,
        ThrowOnError
    >({
        url: '/shells/$reference',
        ...options,
    });
};

/**
 * Deletes an Asset Administration Shell
 */
export const deleteAssetAdministrationShellById = <ThrowOnError extends boolean = false>(
    options: Options<DeleteAssetAdministrationShellByIdData, ThrowOnError>
) => {
    return (options?.client ?? client).delete<
        DeleteAssetAdministrationShellByIdResponse,
        DeleteAssetAdministrationShellByIdError,
        ThrowOnError
    >({
        url: '/shells/{aasIdentifier}',
        ...options,
    });
};

/**
 * Returns a specific Asset Administration Shell
 */
export const getAssetAdministrationShellById = <ThrowOnError extends boolean = false>(
    options: Options<GetAssetAdministrationShellByIdData, ThrowOnError>
) => {
    return (options?.client ?? client).get<
        GetAssetAdministrationShellByIdResponse,
        GetAssetAdministrationShellByIdError,
        ThrowOnError
    >({
        url: '/shells/{aasIdentifier}',
        ...options,
    });
};

/**
 * Updates an existing Asset Administration Shell
 */
export const putAssetAdministrationShellById = <ThrowOnError extends boolean = false>(
    options: Options<PutAssetAdministrationShellByIdData, ThrowOnError>
) => {
    return (options?.client ?? client).put<
        PutAssetAdministrationShellByIdResponse,
        PutAssetAdministrationShellByIdError,
        ThrowOnError
    >({
        url: '/shells/{aasIdentifier}',
        ...options,
        headers: {
            'Content-Type': 'application/json',
            ...options?.headers,
        },
    });
};

/**
 * Returns a specific Asset Administration Shell as a Reference
 */
export const getAssetAdministrationShellByIdReferenceAasRepository = <ThrowOnError extends boolean = false>(
    options: Options<GetAssetAdministrationShellByIdReferenceAasRepositoryData, ThrowOnError>
) => {
    return (options?.client ?? client).get<
        GetAssetAdministrationShellByIdReferenceAasRepositoryResponse,
        GetAssetAdministrationShellByIdReferenceAasRepositoryError,
        ThrowOnError
    >({
        url: '/shells/{aasIdentifier}/$reference',
        ...options,
    });
};

/**
 * Returns the Asset Information
 */
export const getAssetInformationAasRepository = <ThrowOnError extends boolean = false>(
    options: Options<GetAssetInformationAasRepositoryData, ThrowOnError>
) => {
    return (options?.client ?? client).get<
        GetAssetInformationAasRepositoryResponse,
        GetAssetInformationAasRepositoryError,
        ThrowOnError
    >({
        url: '/shells/{aasIdentifier}/asset-information',
        ...options,
    });
};

/**
 * Updates the Asset Information
 */
export const putAssetInformationAasRepository = <ThrowOnError extends boolean = false>(
    options: Options<PutAssetInformationAasRepositoryData, ThrowOnError>
) => {
    return (options?.client ?? client).put<
        PutAssetInformationAasRepositoryResponse,
        PutAssetInformationAasRepositoryError,
        ThrowOnError
    >({
        url: '/shells/{aasIdentifier}/asset-information',
        ...options,
        headers: {
            'Content-Type': 'application/json',
            ...options?.headers,
        },
    });
};

export const deleteThumbnailAasRepository = <ThrowOnError extends boolean = false>(
    options: Options<DeleteThumbnailAasRepositoryData, ThrowOnError>
) => {
    return (options?.client ?? client).delete<unknown, DeleteThumbnailAasRepositoryError, ThrowOnError>({
        url: '/shells/{aasIdentifier}/asset-information/thumbnail',
        ...options,
    });
};

export const getThumbnailAasRepository = <ThrowOnError extends boolean = false>(
    options: Options<GetThumbnailAasRepositoryData, ThrowOnError>
) => {
    return (options?.client ?? client).get<
        GetThumbnailAasRepositoryResponse,
        GetThumbnailAasRepositoryError,
        ThrowOnError
    >({
        url: '/shells/{aasIdentifier}/asset-information/thumbnail',
        ...options,
    });
};

export const putThumbnailAasRepository = <ThrowOnError extends boolean = false>(
    options: Options<PutThumbnailAasRepositoryData, ThrowOnError>
) => {
    return (options?.client ?? client).put<
        PutThumbnailAasRepositoryResponse,
        PutThumbnailAasRepositoryError,
        ThrowOnError
    >({
        ...formDataBodySerializer,
        url: '/shells/{aasIdentifier}/asset-information/thumbnail',
        ...options,
        headers: {
            'Content-Type': null,
            ...options?.headers,
        },
    });
};

/**
 * Returns all submodel references
 */
export const getAllSubmodelReferencesAasRepository = <ThrowOnError extends boolean = false>(
    options: Options<GetAllSubmodelReferencesAasRepositoryData, ThrowOnError>
) => {
    return (options?.client ?? client).get<
        GetAllSubmodelReferencesAasRepositoryResponse,
        GetAllSubmodelReferencesAasRepositoryError,
        ThrowOnError
    >({
        url: '/shells/{aasIdentifier}/submodel-refs',
        ...options,
    });
};

/**
 * Creates a submodel reference at the Asset Administration Shell
 */
export const postSubmodelReferenceAasRepository = <ThrowOnError extends boolean = false>(
    options: Options<PostSubmodelReferenceAasRepositoryData, ThrowOnError>
) => {
    return (options?.client ?? client).post<
        PostSubmodelReferenceAasRepositoryResponse,
        PostSubmodelReferenceAasRepositoryError,
        ThrowOnError
    >({
        url: '/shells/{aasIdentifier}/submodel-refs',
        ...options,
        headers: {
            'Content-Type': 'application/json',
            ...options?.headers,
        },
    });
};

/**
 * Deletes the submodel reference from the Asset Administration Shell. Does not delete the submodel itself!
 */
export const deleteSubmodelReferenceByIdAasRepository = <ThrowOnError extends boolean = false>(
    options: Options<DeleteSubmodelReferenceByIdAasRepositoryData, ThrowOnError>
) => {
    return (options?.client ?? client).delete<
        DeleteSubmodelReferenceByIdAasRepositoryResponse,
        DeleteSubmodelReferenceByIdAasRepositoryError,
        ThrowOnError
    >({
        url: '/shells/{aasIdentifier}/submodel-refs/{submodelIdentifier}',
        ...options,
    });
};

/**
 * Deletes the submodel from the Asset Administration Shell and the Repository.
 */
export const deleteSubmodelByIdAasRepository = <ThrowOnError extends boolean = false>(
    options: Options<DeleteSubmodelByIdAasRepositoryData, ThrowOnError>
) => {
    return (options?.client ?? client).delete<
        DeleteSubmodelByIdAasRepositoryResponse,
        DeleteSubmodelByIdAasRepositoryError,
        ThrowOnError
    >({
        url: '/shells/{aasIdentifier}/submodels/{submodelIdentifier}',
        ...options,
    });
};

/**
 * Returns the Submodel
 */
export const getSubmodelByIdAasRepository = <ThrowOnError extends boolean = false>(
    options: Options<GetSubmodelByIdAasRepositoryData, ThrowOnError>
) => {
    return (options?.client ?? client).get<
        GetSubmodelByIdAasRepositoryResponse,
        GetSubmodelByIdAasRepositoryError,
        ThrowOnError
    >({
        url: '/shells/{aasIdentifier}/submodels/{submodelIdentifier}',
        ...options,
    });
};

/**
 * Updates the Submodel
 */
export const patchSubmodelAasRepository = <ThrowOnError extends boolean = false>(
    options: Options<PatchSubmodelAasRepositoryData, ThrowOnError>
) => {
    return (options?.client ?? client).patch<
        PatchSubmodelAasRepositoryResponse,
        PatchSubmodelAasRepositoryError,
        ThrowOnError
    >({
        url: '/shells/{aasIdentifier}/submodels/{submodelIdentifier}',
        ...options,
        headers: {
            'Content-Type': 'application/json',
            ...options?.headers,
        },
    });
};

/**
 * Updates the Submodel
 */
export const putSubmodelByIdAasRepository = <ThrowOnError extends boolean = false>(
    options: Options<PutSubmodelByIdAasRepositoryData, ThrowOnError>
) => {
    return (options?.client ?? client).put<
        PutSubmodelByIdAasRepositoryResponse,
        PutSubmodelByIdAasRepositoryError,
        ThrowOnError
    >({
        url: '/shells/{aasIdentifier}/submodels/{submodelIdentifier}',
        ...options,
        headers: {
            'Content-Type': 'application/json',
            ...options?.headers,
        },
    });
};

/**
 * Returns the Submodel's metadata elements
 */
export const getSubmodelByIdMetadataAasRepository = <ThrowOnError extends boolean = false>(
    options: Options<GetSubmodelByIdMetadataAasRepositoryData, ThrowOnError>
) => {
    return (options?.client ?? client).get<
        GetSubmodelByIdMetadataAasRepositoryResponse,
        GetSubmodelByIdMetadataAasRepositoryError,
        ThrowOnError
    >({
        url: '/shells/{aasIdentifier}/submodels/{submodelIdentifier}/$metadata',
        ...options,
    });
};

/**
 * Updates the metadata attributes of the Submodel
 */
export const patchSubmodelByIdMetadataAasRepository = <ThrowOnError extends boolean = false>(
    options: Options<PatchSubmodelByIdMetadataAasRepositoryData, ThrowOnError>
) => {
    return (options?.client ?? client).patch<
        PatchSubmodelByIdMetadataAasRepositoryResponse,
        PatchSubmodelByIdMetadataAasRepositoryError,
        ThrowOnError
    >({
        url: '/shells/{aasIdentifier}/submodels/{submodelIdentifier}/$metadata',
        ...options,
        headers: {
            'Content-Type': 'application/json',
            ...options?.headers,
        },
    });
};

/**
 * Returns the Submodel's ValueOnly representation
 */
export const getSubmodelByIdValueOnlyAasRepository = <ThrowOnError extends boolean = false>(
    options: Options<GetSubmodelByIdValueOnlyAasRepositoryData, ThrowOnError>
) => {
    return (options?.client ?? client).get<
        GetSubmodelByIdValueOnlyAasRepositoryResponse,
        GetSubmodelByIdValueOnlyAasRepositoryError,
        ThrowOnError
    >({
        url: '/shells/{aasIdentifier}/submodels/{submodelIdentifier}/$value',
        ...options,
    });
};

/**
 * Updates the values of the Submodel
 */
export const patchSubmodelByIdValueOnlyAasRepository = <ThrowOnError extends boolean = false>(
    options: Options<PatchSubmodelByIdValueOnlyAasRepositoryData, ThrowOnError>
) => {
    return (options?.client ?? client).patch<
        PatchSubmodelByIdValueOnlyAasRepositoryResponse,
        PatchSubmodelByIdValueOnlyAasRepositoryError,
        ThrowOnError
    >({
        url: '/shells/{aasIdentifier}/submodels/{submodelIdentifier}/$value',
        ...options,
        headers: {
            'Content-Type': 'application/json',
            ...options?.headers,
        },
    });
};

/**
 * Returns the Submodel as a Reference
 */
export const getSubmodelByIdReferenceAasRepository = <ThrowOnError extends boolean = false>(
    options: Options<GetSubmodelByIdReferenceAasRepositoryData, ThrowOnError>
) => {
    return (options?.client ?? client).get<
        GetSubmodelByIdReferenceAasRepositoryResponse,
        GetSubmodelByIdReferenceAasRepositoryError,
        ThrowOnError
    >({
        url: '/shells/{aasIdentifier}/submodels/{submodelIdentifier}/$reference',
        ...options,
    });
};

/**
 * Returns the Submodel's metadata elements
 */
export const getSubmodelByIdPathAasRepository = <ThrowOnError extends boolean = false>(
    options: Options<GetSubmodelByIdPathAasRepositoryData, ThrowOnError>
) => {
    return (options?.client ?? client).get<
        GetSubmodelByIdPathAasRepositoryResponse,
        GetSubmodelByIdPathAasRepositoryError,
        ThrowOnError
    >({
        url: '/shells/{aasIdentifier}/submodels/{submodelIdentifier}/$path',
        ...options,
    });
};

/**
 * Returns all submodel elements including their hierarchy
 */
export const getAllSubmodelElementsAasRepository = <ThrowOnError extends boolean = false>(
    options: Options<GetAllSubmodelElementsAasRepositoryData, ThrowOnError>
) => {
    return (options?.client ?? client).get<
        GetAllSubmodelElementsAasRepositoryResponse,
        GetAllSubmodelElementsAasRepositoryError,
        ThrowOnError
    >({
        url: '/shells/{aasIdentifier}/submodels/{submodelIdentifier}/submodel-elements',
        ...options,
    });
};

/**
 * Creates a new submodel element
 */
export const postSubmodelElementAasRepository = <ThrowOnError extends boolean = false>(
    options: Options<PostSubmodelElementAasRepositoryData, ThrowOnError>
) => {
    return (options?.client ?? client).post<
        PostSubmodelElementAasRepositoryResponse,
        PostSubmodelElementAasRepositoryError,
        ThrowOnError
    >({
        url: '/shells/{aasIdentifier}/submodels/{submodelIdentifier}/submodel-elements',
        ...options,
        headers: {
            'Content-Type': 'application/json',
            ...options?.headers,
        },
    });
};

/**
 * Returns all submodel elements including their hierarchy
 */
export const getAllSubmodelElementsMetadataAasRepository = <ThrowOnError extends boolean = false>(
    options: Options<GetAllSubmodelElementsMetadataAasRepositoryData, ThrowOnError>
) => {
    return (options?.client ?? client).get<
        GetAllSubmodelElementsMetadataAasRepositoryResponse,
        GetAllSubmodelElementsMetadataAasRepositoryError,
        ThrowOnError
    >({
        url: '/shells/{aasIdentifier}/submodels/{submodelIdentifier}/submodel-elements/$metadata',
        ...options,
    });
};

/**
 * Returns all submodel elements including their hierarchy in the ValueOnly representation
 */
export const getAllSubmodelElementsValueOnlyAasRepository = <ThrowOnError extends boolean = false>(
    options: Options<GetAllSubmodelElementsValueOnlyAasRepositoryData, ThrowOnError>
) => {
    return (options?.client ?? client).get<
        GetAllSubmodelElementsValueOnlyAasRepositoryResponse,
        GetAllSubmodelElementsValueOnlyAasRepositoryError,
        ThrowOnError
    >({
        url: '/shells/{aasIdentifier}/submodels/{submodelIdentifier}/submodel-elements/$value',
        ...options,
    });
};

/**
 * Returns all submodel elements as a list of References
 */
export const getAllSubmodelElementsReferenceAasRepository = <ThrowOnError extends boolean = false>(
    options: Options<GetAllSubmodelElementsReferenceAasRepositoryData, ThrowOnError>
) => {
    return (options?.client ?? client).get<
        GetAllSubmodelElementsReferenceAasRepositoryResponse,
        GetAllSubmodelElementsReferenceAasRepositoryError,
        ThrowOnError
    >({
        url: '/shells/{aasIdentifier}/submodels/{submodelIdentifier}/submodel-elements/$reference',
        ...options,
    });
};

/**
 * Returns all submodel elements including their hierarchy
 */
export const getAllSubmodelElementsPathAasRepository = <ThrowOnError extends boolean = false>(
    options: Options<GetAllSubmodelElementsPathAasRepositoryData, ThrowOnError>
) => {
    return (options?.client ?? client).get<
        GetAllSubmodelElementsPathAasRepositoryResponse,
        GetAllSubmodelElementsPathAasRepositoryError,
        ThrowOnError
    >({
        url: '/shells/{aasIdentifier}/submodels/{submodelIdentifier}/submodel-elements/$path',
        ...options,
    });
};

/**
 * Deletes a submodel element at a specified path within the submodel elements hierarchy
 */
export const deleteSubmodelElementByPathAasRepository = <ThrowOnError extends boolean = false>(
    options: Options<DeleteSubmodelElementByPathAasRepositoryData, ThrowOnError>
) => {
    return (options?.client ?? client).delete<
        DeleteSubmodelElementByPathAasRepositoryResponse,
        DeleteSubmodelElementByPathAasRepositoryError,
        ThrowOnError
    >({
        url: '/shells/{aasIdentifier}/submodels/{submodelIdentifier}/submodel-elements/{idShortPath}',
        ...options,
    });
};

/**
 * Returns a specific submodel element from the Submodel at a specified path
 */
export const getSubmodelElementByPathAasRepository = <ThrowOnError extends boolean = false>(
    options: Options<GetSubmodelElementByPathAasRepositoryData, ThrowOnError>
) => {
    return (options?.client ?? client).get<
        GetSubmodelElementByPathAasRepositoryResponse,
        GetSubmodelElementByPathAasRepositoryError,
        ThrowOnError
    >({
        url: '/shells/{aasIdentifier}/submodels/{submodelIdentifier}/submodel-elements/{idShortPath}',
        ...options,
    });
};

/**
 * Updates an existing submodel element value at a specified path within submodel elements hierarchy
 */
export const patchSubmodelElementValueByPathAasRepository = <ThrowOnError extends boolean = false>(
    options: Options<PatchSubmodelElementValueByPathAasRepositoryData, ThrowOnError>
) => {
    return (options?.client ?? client).patch<
        PatchSubmodelElementValueByPathAasRepositoryResponse,
        PatchSubmodelElementValueByPathAasRepositoryError,
        ThrowOnError
    >({
        url: '/shells/{aasIdentifier}/submodels/{submodelIdentifier}/submodel-elements/{idShortPath}',
        ...options,
        headers: {
            'Content-Type': 'application/json',
            ...options?.headers,
        },
    });
};

/**
 * Creates a new submodel element at a specified path within submodel elements hierarchy
 */
export const postSubmodelElementByPathAasRepository = <ThrowOnError extends boolean = false>(
    options: Options<PostSubmodelElementByPathAasRepositoryData, ThrowOnError>
) => {
    return (options?.client ?? client).post<
        PostSubmodelElementByPathAasRepositoryResponse,
        PostSubmodelElementByPathAasRepositoryError,
        ThrowOnError
    >({
        url: '/shells/{aasIdentifier}/submodels/{submodelIdentifier}/submodel-elements/{idShortPath}',
        ...options,
        headers: {
            'Content-Type': 'application/json',
            ...options?.headers,
        },
    });
};

/**
 * Updates an existing submodel element at a specified path within submodel elements hierarchy
 */
export const putSubmodelElementByPathAasRepository = <ThrowOnError extends boolean = false>(
    options: Options<PutSubmodelElementByPathAasRepositoryData, ThrowOnError>
) => {
    return (options?.client ?? client).put<
        PutSubmodelElementByPathAasRepositoryResponse,
        PutSubmodelElementByPathAasRepositoryError,
        ThrowOnError
    >({
        url: '/shells/{aasIdentifier}/submodels/{submodelIdentifier}/submodel-elements/{idShortPath}',
        ...options,
        headers: {
            'Content-Type': 'application/json',
            ...options?.headers,
        },
    });
};

/**
 * Returns the metadata attributes if a specific submodel element from the Submodel at a specified path
 */
export const getSubmodelElementByPathMetadataAasRepository = <ThrowOnError extends boolean = false>(
    options: Options<GetSubmodelElementByPathMetadataAasRepositoryData, ThrowOnError>
) => {
    return (options?.client ?? client).get<
        GetSubmodelElementByPathMetadataAasRepositoryResponse,
        GetSubmodelElementByPathMetadataAasRepositoryError,
        ThrowOnError
    >({
        url: '/shells/{aasIdentifier}/submodels/{submodelIdentifier}/submodel-elements/{idShortPath}/$metadata',
        ...options,
    });
};

/**
 * Updates the metadata attributes of an existing submodel element value at a specified path within submodel elements hierarchy
 */
export const patchSubmodelElementValueByPathMetadata = <ThrowOnError extends boolean = false>(
    options: Options<PatchSubmodelElementValueByPathMetadataData, ThrowOnError>
) => {
    return (options?.client ?? client).patch<
        PatchSubmodelElementValueByPathMetadataResponse,
        PatchSubmodelElementValueByPathMetadataError,
        ThrowOnError
    >({
        url: '/shells/{aasIdentifier}/submodels/{submodelIdentifier}/submodel-elements/{idShortPath}/$metadata',
        ...options,
        headers: {
            'Content-Type': 'application/json',
            ...options?.headers,
        },
    });
};

/**
 * Returns a specific submodel element from the Submodel at a specified path in the ValueOnly representation
 */
export const getSubmodelElementByPathValueOnlyAasRepository = <ThrowOnError extends boolean = false>(
    options: Options<GetSubmodelElementByPathValueOnlyAasRepositoryData, ThrowOnError>
) => {
    return (options?.client ?? client).get<
        GetSubmodelElementByPathValueOnlyAasRepositoryResponse,
        GetSubmodelElementByPathValueOnlyAasRepositoryError,
        ThrowOnError
    >({
        url: '/shells/{aasIdentifier}/submodels/{submodelIdentifier}/submodel-elements/{idShortPath}/$value',
        ...options,
    });
};

/**
 * Updates the value of an existing submodel element value at a specified path within submodel elements hierarchy
 */
// export const patchSubmodelElementValueByPathValueOnly = <ThrowOnError extends boolean = false>(
//     options: Options<PatchSubmodelElementValueByPathValueOnlyData, ThrowOnError>
// ) => {
//     return (options?.client ?? client).patch<
//         PatchSubmodelElementValueByPathValueOnlyResponse,
//         PatchSubmodelElementValueByPathValueOnlyError,
//         ThrowOnError
//     >({
//         url: '/shells/{aasIdentifier}/submodels/{submodelIdentifier}/submodel-elements/{idShortPath}/$value',
//         ...options,
//         headers: {
//             'Content-Type': 'application/json',
//             ...options?.headers,
//         },
//     });
// };

/**
 * Returns the Reference of a specific submodel element from the Submodel at a specified path
 */
export const getSubmodelElementByPathReferenceAasRepository = <ThrowOnError extends boolean = false>(
    options: Options<GetSubmodelElementByPathReferenceAasRepositoryData, ThrowOnError>
) => {
    return (options?.client ?? client).get<
        GetSubmodelElementByPathReferenceAasRepositoryResponse,
        GetSubmodelElementByPathReferenceAasRepositoryError,
        ThrowOnError
    >({
        url: '/shells/{aasIdentifier}/submodels/{submodelIdentifier}/submodel-elements/{idShortPath}/$reference',
        ...options,
    });
};

/**
 * Returns a specific submodel element from the Submodel at a specified path in the Path notation
 */
export const getSubmodelElementByPathPathAasRepository = <ThrowOnError extends boolean = false>(
    options: Options<GetSubmodelElementByPathPathAasRepositoryData, ThrowOnError>
) => {
    return (options?.client ?? client).get<
        GetSubmodelElementByPathPathAasRepositoryResponse,
        GetSubmodelElementByPathPathAasRepositoryError,
        ThrowOnError
    >({
        url: '/shells/{aasIdentifier}/submodels/{submodelIdentifier}/submodel-elements/{idShortPath}/$path',
        ...options,
    });
};

/**
 * Deletes file content of an existing submodel element at a specified path within submodel elements hierarchy
 */
export const deleteFileByPathAasRepository = <ThrowOnError extends boolean = false>(
    options: Options<DeleteFileByPathAasRepositoryData, ThrowOnError>
) => {
    return (options?.client ?? client).delete<unknown, DeleteFileByPathAasRepositoryError, ThrowOnError>({
        url: '/shells/{aasIdentifier}/submodels/{submodelIdentifier}/submodel-elements/{idShortPath}/attachment',
        ...options,
    });
};

/**
 * Downloads file content from a specific submodel element from the Submodel at a specified path
 */
export const getFileByPathAasRepository = <ThrowOnError extends boolean = false>(
    options: Options<GetFileByPathAasRepositoryData, ThrowOnError>
) => {
    return (options?.client ?? client).get<
        GetFileByPathAasRepositoryResponse,
        GetFileByPathAasRepositoryError,
        ThrowOnError
    >({
        url: '/shells/{aasIdentifier}/submodels/{submodelIdentifier}/submodel-elements/{idShortPath}/attachment',
        ...options,
    });
};

/**
 * Uploads file content to an existing submodel element at a specified path within submodel elements hierarchy
 */
export const putFileByPathAasRepository = <ThrowOnError extends boolean = false>(
    options: Options<PutFileByPathAasRepositoryData, ThrowOnError>
) => {
    return (options?.client ?? client).put<
        PutFileByPathAasRepositoryResponse,
        PutFileByPathAasRepositoryError,
        ThrowOnError
    >({
        ...formDataBodySerializer,
        url: '/shells/{aasIdentifier}/submodels/{submodelIdentifier}/submodel-elements/{idShortPath}/attachment',
        ...options,
        headers: {
            'Content-Type': null,
            ...options?.headers,
        },
    });
};

/**
 * Synchronously invokes an Operation at a specified path
 */
export const invokeOperationAasRepository = <ThrowOnError extends boolean = false>(
    options: Options<InvokeOperationAasRepositoryData, ThrowOnError>
) => {
    return (options?.client ?? client).post<
        InvokeOperationAasRepositoryResponse,
        InvokeOperationAasRepositoryError,
        ThrowOnError
    >({
        url: '/shells/{aasIdentifier}/submodels/{submodelIdentifier}/submodel-elements/{idShortPath}/invoke',
        ...options,
        headers: {
            'Content-Type': 'application/json',
            ...options?.headers,
        },
    });
};

/**
 * Synchronously invokes an Operation at a specified path
 */
export const invokeOperationValueOnlyAasRepository = <ThrowOnError extends boolean = false>(
    options: Options<InvokeOperationValueOnlyAasRepositoryData, ThrowOnError>
) => {
    return (options?.client ?? client).post<
        InvokeOperationValueOnlyAasRepositoryResponse,
        InvokeOperationValueOnlyAasRepositoryError,
        ThrowOnError
    >({
        url: '/shells/{aasIdentifier}/submodels/{submodelIdentifier}/submodel-elements/{idShortPath}/invoke/$value',
        ...options,
        headers: {
            'Content-Type': 'application/json',
            ...options?.headers,
        },
    });
};

/**
 * Asynchronously invokes an Operation at a specified path
 */
export const invokeOperationAsyncAasRepository = <ThrowOnError extends boolean = false>(
    options: Options<InvokeOperationAsyncAasRepositoryData, ThrowOnError>
) => {
    return (options?.client ?? client).post<unknown, InvokeOperationAsyncAasRepositoryError, ThrowOnError>({
        url: '/shells/{aasIdentifier}/submodels/{submodelIdentifier}/submodel-elements/{idShortPath}/invoke-async',
        ...options,
        headers: {
            'Content-Type': 'application/json',
            ...options?.headers,
        },
    });
};

/**
 * Asynchronously invokes an Operation at a specified path
 */
export const invokeOperationAsyncValueOnlyAasRepository = <ThrowOnError extends boolean = false>(
    options: Options<InvokeOperationAsyncValueOnlyAasRepositoryData, ThrowOnError>
) => {
    return (options?.client ?? client).post<unknown, InvokeOperationAsyncValueOnlyAasRepositoryError, ThrowOnError>({
        url: '/shells/{aasIdentifier}/submodels/{submodelIdentifier}/submodel-elements/{idShortPath}/invoke-async/$value',
        ...options,
        headers: {
            'Content-Type': 'application/json',
            ...options?.headers,
        },
    });
};

/**
 * Returns the Operation status of an asynchronous invoked Operation
 */
export const getOperationAsyncStatusAasRepository = <ThrowOnError extends boolean = false>(
    options: Options<GetOperationAsyncStatusAasRepositoryData, ThrowOnError>
) => {
    return (options?.client ?? client).get<
        GetOperationAsyncStatusAasRepositoryResponse,
        GetOperationAsyncStatusAasRepositoryError,
        ThrowOnError
    >({
        url: '/shells/{aasIdentifier}/submodels/{submodelIdentifier}/submodel-elements/{idShortPath}/operation-status/{handleId}',
        ...options,
    });
};

/**
 * Returns the Operation result of an asynchronous invoked Operation
 */
export const getOperationAsyncResultAasRepository = <ThrowOnError extends boolean = false>(
    options: Options<GetOperationAsyncResultAasRepositoryData, ThrowOnError>
) => {
    return (options?.client ?? client).get<
        GetOperationAsyncResultAasRepositoryResponse,
        GetOperationAsyncResultAasRepositoryError,
        ThrowOnError
    >({
        url: '/shells/{aasIdentifier}/submodels/{submodelIdentifier}/submodel-elements/{idShortPath}/operation-results/{handleId}',
        ...options,
    });
};

/**
 * Returns the ValueOnly notation of the Operation result of an asynchronous invoked Operation
 */
export const getOperationAsyncResultValueOnlyAasRepository = <ThrowOnError extends boolean = false>(
    options: Options<GetOperationAsyncResultValueOnlyAasRepositoryData, ThrowOnError>
) => {
    return (options?.client ?? client).get<
        GetOperationAsyncResultValueOnlyAasRepositoryResponse,
        GetOperationAsyncResultValueOnlyAasRepositoryError,
        ThrowOnError
    >({
        url: '/shells/{aasIdentifier}/submodels/{submodelIdentifier}/submodel-elements/{idShortPath}/operation-results/{handleId}/$value',
        ...options,
    });
};

/**
 * Returns all Submodels
 */
export const getAllSubmodels = <ThrowOnError extends boolean = false>(
    options?: Options<GetAllSubmodelsData, ThrowOnError>
) => {
    return (options?.client ?? client).get<GetAllSubmodelsResponse, GetAllSubmodelsError, ThrowOnError>({
        url: '/submodels',
        ...options,
    });
};

/**
 * Creates a new Submodel
 */
export const postSubmodel = <ThrowOnError extends boolean = false>(
    options: Options<PostSubmodelData, ThrowOnError>
) => {
    return (options?.client ?? client).post<PostSubmodelResponse, PostSubmodelError, ThrowOnError>({
        url: '/submodels',
        ...options,
        headers: {
            'Content-Type': 'application/json',
            ...options?.headers,
        },
    });
};

/**
 * Returns the metadata attributes of all Submodels
 */
export const getAllSubmodelsMetadata = <ThrowOnError extends boolean = false>(
    options?: Options<GetAllSubmodelsMetadataData, ThrowOnError>
) => {
    return (options?.client ?? client).get<GetAllSubmodelsMetadataResponse, GetAllSubmodelsMetadataError, ThrowOnError>(
        {
            url: '/submodels/$metadata',
            ...options,
        }
    );
};

/**
 * Returns all Submodels in their ValueOnly representation
 */
export const getAllSubmodelsValueOnly = <ThrowOnError extends boolean = false>(
    options?: Options<GetAllSubmodelsValueOnlyData, ThrowOnError>
) => {
    return (options?.client ?? client).get<
        GetAllSubmodelsValueOnlyResponse,
        GetAllSubmodelsValueOnlyError,
        ThrowOnError
    >({
        url: '/submodels/$value',
        ...options,
    });
};

/**
 * Returns the References for all Submodels
 */
export const getAllSubmodelsReference = <ThrowOnError extends boolean = false>(
    options?: Options<GetAllSubmodelsReferenceData, ThrowOnError>
) => {
    return (options?.client ?? client).get<
        GetAllSubmodelsReferenceResponse,
        GetAllSubmodelsReferenceError,
        ThrowOnError
    >({
        url: '/submodels/$reference',
        ...options,
    });
};

/**
 * Returns all Submodels in the Path notation
 */
export const getAllSubmodelsPath = <ThrowOnError extends boolean = false>(
    options?: Options<GetAllSubmodelsPathData, ThrowOnError>
) => {
    return (options?.client ?? client).get<GetAllSubmodelsPathResponse, GetAllSubmodelsPathError, ThrowOnError>({
        url: '/submodels/$path',
        ...options,
    });
};

/**
 * Deletes a Submodel
 */
export const deleteSubmodelById = <ThrowOnError extends boolean = false>(
    options: Options<DeleteSubmodelByIdData, ThrowOnError>
) => {
    return (options?.client ?? client).delete<DeleteSubmodelByIdResponse, DeleteSubmodelByIdError, ThrowOnError>({
        url: '/submodels/{submodelIdentifier}',
        ...options,
    });
};

/**
 * Returns a specific Submodel
 */
export const getSubmodelById = <ThrowOnError extends boolean = false>(
    options: Options<GetSubmodelByIdData, ThrowOnError>
) => {
    return (options?.client ?? client).get<GetSubmodelByIdResponse, GetSubmodelByIdError, ThrowOnError>({
        url: '/submodels/{submodelIdentifier}',
        ...options,
    });
};

/**
 * Updates an existing Submodel
 */
export const patchSubmodelById = <ThrowOnError extends boolean = false>(
    options: Options<PatchSubmodelByIdData, ThrowOnError>
) => {
    return (options?.client ?? client).patch<PatchSubmodelByIdResponse, PatchSubmodelByIdError, ThrowOnError>({
        url: '/submodels/{submodelIdentifier}',
        ...options,
        headers: {
            'Content-Type': 'application/json',
            ...options?.headers,
        },
    });
};

/**
 * Updates an existing Submodel
 */
export const putSubmodelById = <ThrowOnError extends boolean = false>(
    options: Options<PutSubmodelByIdData, ThrowOnError>
) => {
    return (options?.client ?? client).put<PutSubmodelByIdResponse, PutSubmodelByIdError, ThrowOnError>({
        url: '/submodels/{submodelIdentifier}',
        ...options,
        headers: {
            'Content-Type': 'application/json',
            ...options?.headers,
        },
    });
};

/**
 * Returns the metadata attributes of a specific Submodel
 */
export const getSubmodelByIdMetadata = <ThrowOnError extends boolean = false>(
    options: Options<GetSubmodelByIdMetadataData, ThrowOnError>
) => {
    return (options?.client ?? client).get<GetSubmodelByIdMetadataResponse, GetSubmodelByIdMetadataError, ThrowOnError>(
        {
            url: '/submodels/{submodelIdentifier}/$metadata',
            ...options,
        }
    );
};

/**
 * Updates the metadata attributes of an existing Submodel
 */
export const patchSubmodelByIdMetadata = <ThrowOnError extends boolean = false>(
    options: Options<PatchSubmodelByIdMetadataData, ThrowOnError>
) => {
    return (options?.client ?? client).patch<
        PatchSubmodelByIdMetadataResponse,
        PatchSubmodelByIdMetadataError,
        ThrowOnError
    >({
        url: '/submodels/{submodelIdentifier}/$metadata',
        ...options,
        headers: {
            'Content-Type': 'application/json',
            ...options?.headers,
        },
    });
};

/**
 * Returns a specific Submodel in the ValueOnly representation
 */
export const getSubmodelByIdValueOnly = <ThrowOnError extends boolean = false>(
    options: Options<GetSubmodelByIdValueOnlyData, ThrowOnError>
) => {
    return (options?.client ?? client).get<
        GetSubmodelByIdValueOnlyResponse,
        GetSubmodelByIdValueOnlyError,
        ThrowOnError
    >({
        url: '/submodels/{submodelIdentifier}/$value',
        ...options,
    });
};

/**
 * Updates the values of an existing Submodel
 */
export const patchSubmodelByIdValueOnly = <ThrowOnError extends boolean = false>(
    options: Options<PatchSubmodelByIdValueOnlyData, ThrowOnError>
) => {
    return (options?.client ?? client).patch<
        PatchSubmodelByIdValueOnlyResponse,
        PatchSubmodelByIdValueOnlyError,
        ThrowOnError
    >({
        url: '/submodels/{submodelIdentifier}/$value',
        ...options,
        headers: {
            'Content-Type': 'application/json',
            ...options?.headers,
        },
    });
};

/**
 * Returns the Reference of a specific Submodel
 */
export const getSubmodelByIdReference = <ThrowOnError extends boolean = false>(
    options: Options<GetSubmodelByIdReferenceData, ThrowOnError>
) => {
    return (options?.client ?? client).get<
        GetSubmodelByIdReferenceResponse,
        GetSubmodelByIdReferenceError,
        ThrowOnError
    >({
        url: '/submodels/{submodelIdentifier}/$reference',
        ...options,
    });
};

/**
 * Returns a specific Submodel in the Path notation
 */
export const getSubmodelByIdPath = <ThrowOnError extends boolean = false>(
    options: Options<GetSubmodelByIdPathData, ThrowOnError>
) => {
    return (options?.client ?? client).get<GetSubmodelByIdPathResponse, GetSubmodelByIdPathError, ThrowOnError>({
        url: '/submodels/{submodelIdentifier}/$path',
        ...options,
    });
};

/**
 * Returns all submodel elements including their hierarchy
 */
export const getAllSubmodelElementsSubmodelRepository = <ThrowOnError extends boolean = false>(
    options: Options<GetAllSubmodelElementsSubmodelRepositoryData, ThrowOnError>
) => {
    return (options?.client ?? client).get<
        GetAllSubmodelElementsSubmodelRepositoryResponse,
        GetAllSubmodelElementsSubmodelRepositoryError,
        ThrowOnError
    >({
        url: '/submodels/{submodelIdentifier}/submodel-elements',
        ...options,
    });
};

/**
 * Creates a new submodel element
 */
export const postSubmodelElementSubmodelRepository = <ThrowOnError extends boolean = false>(
    options: Options<PostSubmodelElementSubmodelRepositoryData, ThrowOnError>
) => {
    return (options?.client ?? client).post<
        PostSubmodelElementSubmodelRepositoryResponse,
        PostSubmodelElementSubmodelRepositoryError,
        ThrowOnError
    >({
        url: '/submodels/{submodelIdentifier}/submodel-elements',
        ...options,
        headers: {
            'Content-Type': 'application/json',
            ...options?.headers,
        },
    });
};

/**
 * Returns the metadata attributes of all submodel elements including their hierarchy
 */
export const getAllSubmodelElementsMetadataSubmodelRepository = <ThrowOnError extends boolean = false>(
    options: Options<GetAllSubmodelElementsMetadataSubmodelRepositoryData, ThrowOnError>
) => {
    return (options?.client ?? client).get<
        GetAllSubmodelElementsMetadataSubmodelRepositoryResponse,
        GetAllSubmodelElementsMetadataSubmodelRepositoryError,
        ThrowOnError
    >({
        url: '/submodels/{submodelIdentifier}/submodel-elements/$metadata',
        ...options,
    });
};

/**
 * Returns all submodel elements including their hierarchy in the ValueOnly representation
 */
export const getAllSubmodelElementsValueOnlySubmodelRepo = <ThrowOnError extends boolean = false>(
    options: Options<GetAllSubmodelElementsValueOnlySubmodelRepoData, ThrowOnError>
) => {
    return (options?.client ?? client).get<
        GetAllSubmodelElementsValueOnlySubmodelRepoResponse,
        GetAllSubmodelElementsValueOnlySubmodelRepoError,
        ThrowOnError
    >({
        url: '/submodels/{submodelIdentifier}/submodel-elements/$value',
        ...options,
    });
};

/**
 * Returns the References of all submodel elements
 */
export const getAllSubmodelElementsReferenceSubmodelRepo = <ThrowOnError extends boolean = false>(
    options: Options<GetAllSubmodelElementsReferenceSubmodelRepoData, ThrowOnError>
) => {
    return (options?.client ?? client).get<
        GetAllSubmodelElementsReferenceSubmodelRepoResponse,
        GetAllSubmodelElementsReferenceSubmodelRepoError,
        ThrowOnError
    >({
        url: '/submodels/{submodelIdentifier}/submodel-elements/$reference',
        ...options,
    });
};

/**
 * Returns all submodel elements including their hierarchy in the Path notation
 */
export const getAllSubmodelElementsPathSubmodelRepo = <ThrowOnError extends boolean = false>(
    options: Options<GetAllSubmodelElementsPathSubmodelRepoData, ThrowOnError>
) => {
    return (options?.client ?? client).get<
        GetAllSubmodelElementsPathSubmodelRepoResponse,
        GetAllSubmodelElementsPathSubmodelRepoError,
        ThrowOnError
    >({
        url: '/submodels/{submodelIdentifier}/submodel-elements/$path',
        ...options,
    });
};

/**
 * Deletes a submodel element at a specified path within the submodel elements hierarchy
 */
export const deleteSubmodelElementByPathSubmodelRepo = <ThrowOnError extends boolean = false>(
    options: Options<DeleteSubmodelElementByPathSubmodelRepoData, ThrowOnError>
) => {
    return (options?.client ?? client).delete<
        DeleteSubmodelElementByPathSubmodelRepoResponse,
        DeleteSubmodelElementByPathSubmodelRepoError,
        ThrowOnError
    >({
        url: '/submodels/{submodelIdentifier}/submodel-elements/{idShortPath}',
        ...options,
    });
};

/**
 * Returns a specific submodel element from the Submodel at a specified path
 */
export const getSubmodelElementByPathSubmodelRepo = <ThrowOnError extends boolean = false>(
    options: Options<GetSubmodelElementByPathSubmodelRepoData, ThrowOnError>
) => {
    return (options?.client ?? client).get<
        GetSubmodelElementByPathSubmodelRepoResponse,
        GetSubmodelElementByPathSubmodelRepoError,
        ThrowOnError
    >({
        url: '/submodels/{submodelIdentifier}/submodel-elements/{idShortPath}',
        ...options,
    });
};

/**
 * Updates an existing SubmodelElement
 */
export const patchSubmodelElementByPathSubmodelRepo = <ThrowOnError extends boolean = false>(
    options: Options<PatchSubmodelElementByPathSubmodelRepoData, ThrowOnError>
) => {
    return (options?.client ?? client).patch<
        PatchSubmodelElementByPathSubmodelRepoResponse,
        PatchSubmodelElementByPathSubmodelRepoError,
        ThrowOnError
    >({
        url: '/submodels/{submodelIdentifier}/submodel-elements/{idShortPath}',
        ...options,
        headers: {
            'Content-Type': 'application/json',
            ...options?.headers,
        },
    });
};

/**
 * Creates a new submodel element at a specified path within submodel elements hierarchy
 */
export const postSubmodelElementByPathSubmodelRepo = <ThrowOnError extends boolean = false>(
    options: Options<PostSubmodelElementByPathSubmodelRepoData, ThrowOnError>
) => {
    return (options?.client ?? client).post<
        PostSubmodelElementByPathSubmodelRepoResponse,
        PostSubmodelElementByPathSubmodelRepoError,
        ThrowOnError
    >({
        url: '/submodels/{submodelIdentifier}/submodel-elements/{idShortPath}',
        ...options,
        headers: {
            'Content-Type': 'application/json',
            ...options?.headers,
        },
    });
};

/**
 * Updates an existing submodel element at a specified path within submodel elements hierarchy
 */
export const putSubmodelElementByPathSubmodelRepo = <ThrowOnError extends boolean = false>(
    options: Options<PutSubmodelElementByPathSubmodelRepoData, ThrowOnError>
) => {
    return (options?.client ?? client).put<
        PutSubmodelElementByPathSubmodelRepoResponse,
        PutSubmodelElementByPathSubmodelRepoError,
        ThrowOnError
    >({
        url: '/submodels/{submodelIdentifier}/submodel-elements/{idShortPath}',
        ...options,
        headers: {
            'Content-Type': 'application/json',
            ...options?.headers,
        },
    });
};

/**
 * Returns the matadata attributes of a specific submodel element from the Submodel at a specified path
 */
export const getSubmodelElementByPathMetadataSubmodelRepo = <ThrowOnError extends boolean = false>(
    options: Options<GetSubmodelElementByPathMetadataSubmodelRepoData, ThrowOnError>
) => {
    return (options?.client ?? client).get<
        GetSubmodelElementByPathMetadataSubmodelRepoResponse,
        GetSubmodelElementByPathMetadataSubmodelRepoError,
        ThrowOnError
    >({
        url: '/submodels/{submodelIdentifier}/submodel-elements/{idShortPath}/$metadata',
        ...options,
    });
};

/**
 * Updates the metadata attributes an existing SubmodelElement
 */
export const patchSubmodelElementByPathMetadataSubmodelRepo = <ThrowOnError extends boolean = false>(
    options: Options<PatchSubmodelElementByPathMetadataSubmodelRepoData, ThrowOnError>
) => {
    return (options?.client ?? client).patch<
        PatchSubmodelElementByPathMetadataSubmodelRepoResponse,
        PatchSubmodelElementByPathMetadataSubmodelRepoError,
        ThrowOnError
    >({
        url: '/submodels/{submodelIdentifier}/submodel-elements/{idShortPath}/$metadata',
        ...options,
        headers: {
            'Content-Type': 'application/json',
            ...options?.headers,
        },
    });
};

/**
 * Returns a specific submodel element from the Submodel at a specified path in the ValueOnly representation
 */
export const getSubmodelElementByPathValueOnlySubmodelRepo = <ThrowOnError extends boolean = false>(
    options: Options<GetSubmodelElementByPathValueOnlySubmodelRepoData, ThrowOnError>
) => {
    return (options?.client ?? client).get<
        GetSubmodelElementByPathValueOnlySubmodelRepoResponse,
        GetSubmodelElementByPathValueOnlySubmodelRepoError,
        ThrowOnError
    >({
        url: '/submodels/{submodelIdentifier}/submodel-elements/{idShortPath}/$value',
        ...options,
    });
};

/**
 * Updates the value of an existing SubmodelElement
 */
// export const patchSubmodelElementByPathValueOnlySubmodelRepo = <ThrowOnError extends boolean = false>(
//     options: Options<PatchSubmodelElementByPathValueOnlySubmodelRepoData, ThrowOnError>
// ) => {
//     return (options?.client ?? client).patch<
//         PatchSubmodelElementByPathValueOnlySubmodelRepoResponse,
//         PatchSubmodelElementByPathValueOnlySubmodelRepoError,
//         ThrowOnError
//     >({
//         url: '/submodels/{submodelIdentifier}/submodel-elements/{idShortPath}/$value',
//         ...options,
//         headers: {
//             'Content-Type': 'application/json',
//             ...options?.headers,
//         },
//     });
// };

/**
 * Returns the Referene of a specific submodel element from the Submodel at a specified path
 */
export const getSubmodelElementByPathReferenceSubmodelRepo = <ThrowOnError extends boolean = false>(
    options: Options<GetSubmodelElementByPathReferenceSubmodelRepoData, ThrowOnError>
) => {
    return (options?.client ?? client).get<
        GetSubmodelElementByPathReferenceSubmodelRepoResponse,
        GetSubmodelElementByPathReferenceSubmodelRepoError,
        ThrowOnError
    >({
        url: '/submodels/{submodelIdentifier}/submodel-elements/{idShortPath}/$reference',
        ...options,
    });
};

/**
 * Returns a specific submodel element from the Submodel at a specified path in the Path notation
 */
export const getSubmodelElementByPathPathSubmodelRepo = <ThrowOnError extends boolean = false>(
    options: Options<GetSubmodelElementByPathPathSubmodelRepoData, ThrowOnError>
) => {
    return (options?.client ?? client).get<
        GetSubmodelElementByPathPathSubmodelRepoResponse,
        GetSubmodelElementByPathPathSubmodelRepoError,
        ThrowOnError
    >({
        url: '/submodels/{submodelIdentifier}/submodel-elements/{idShortPath}/$path',
        ...options,
    });
};

/**
 * Deletes file content of an existing submodel element at a specified path within submodel elements hierarchy
 */
export const deleteFileByPathSubmodelRepo = <ThrowOnError extends boolean = false>(
    options: Options<DeleteFileByPathSubmodelRepoData, ThrowOnError>
) => {
    return (options?.client ?? client).delete<unknown, DeleteFileByPathSubmodelRepoError, ThrowOnError>({
        url: '/submodels/{submodelIdentifier}/submodel-elements/{idShortPath}/attachment',
        ...options,
    });
};

/**
 * Downloads file content from a specific submodel element from the Submodel at a specified path
 */
export const getFileByPathSubmodelRepo = <ThrowOnError extends boolean = false>(
    options: Options<GetFileByPathSubmodelRepoData, ThrowOnError>
) => {
    return (options?.client ?? client).get<
        GetFileByPathSubmodelRepoResponse,
        GetFileByPathSubmodelRepoError,
        ThrowOnError
    >({
        url: '/submodels/{submodelIdentifier}/submodel-elements/{idShortPath}/attachment',
        ...options,
    });
};

/**
 * Uploads file content to an existing submodel element at a specified path within submodel elements hierarchy
 */
export const putFileByPathSubmodelRepo = <ThrowOnError extends boolean = false>(
    options: Options<PutFileByPathSubmodelRepoData, ThrowOnError>
) => {
    return (options?.client ?? client).put<
        PutFileByPathSubmodelRepoResponse,
        PutFileByPathSubmodelRepoError,
        ThrowOnError
    >({
        ...formDataBodySerializer,
        url: '/submodels/{submodelIdentifier}/submodel-elements/{idShortPath}/attachment',
        ...options,
        headers: {
            'Content-Type': null,
            ...options?.headers,
        },
    });
};

/**
 * Synchronously invokes an Operation at a specified path
 */
export const invokeOperationSubmodelRepo = <ThrowOnError extends boolean = false>(
    options: Options<InvokeOperationSubmodelRepoData, ThrowOnError>
) => {
    return (options?.client ?? client).post<
        InvokeOperationSubmodelRepoResponse,
        InvokeOperationSubmodelRepoError,
        ThrowOnError
    >({
        url: '/submodels/{submodelIdentifier}/submodel-elements/{idShortPath}/invoke',
        ...options,
        headers: {
            'Content-Type': 'application/json',
            ...options?.headers,
        },
    });
};

/**
 * Synchronously invokes an Operation at a specified path
 */
export const invokeOperationValueOnlySubmodelRepo = <ThrowOnError extends boolean = false>(
    options: Options<InvokeOperationValueOnlySubmodelRepoData, ThrowOnError>
) => {
    return (options?.client ?? client).post<
        InvokeOperationValueOnlySubmodelRepoResponse,
        InvokeOperationValueOnlySubmodelRepoError,
        ThrowOnError
    >({
        url: '/submodels/{submodelIdentifier}/submodel-elements/{idShortPath}/invoke/$value',
        ...options,
        headers: {
            'Content-Type': 'application/json',
            ...options?.headers,
        },
    });
};

/**
 * Asynchronously invokes an Operation at a specified path
 */
export const invokeOperationAsyncSubmodelRepo = <ThrowOnError extends boolean = false>(
    options: Options<InvokeOperationAsyncSubmodelRepoData, ThrowOnError>
) => {
    return (options?.client ?? client).post<unknown, InvokeOperationAsyncSubmodelRepoError, ThrowOnError>({
        url: '/submodels/{submodelIdentifier}/submodel-elements/{idShortPath}/invoke-async',
        ...options,
        headers: {
            'Content-Type': 'application/json',
            ...options?.headers,
        },
    });
};

/**
 * Asynchronously invokes an Operation at a specified path
 */
export const invokeOperationAsyncValueOnlySubmodelRepo = <ThrowOnError extends boolean = false>(
    options: Options<InvokeOperationAsyncValueOnlySubmodelRepoData, ThrowOnError>
) => {
    return (options?.client ?? client).post<unknown, InvokeOperationAsyncValueOnlySubmodelRepoError, ThrowOnError>({
        url: '/submodels/{submodelIdentifier}/submodel-elements/{idShortPath}/invoke-async/$value',
        ...options,
        headers: {
            'Content-Type': 'application/json',
            ...options?.headers,
        },
    });
};

/**
 * Returns the Operation status of an asynchronous invoked Operation
 */
export const getOperationAsyncStatusSubmodelRepo = <ThrowOnError extends boolean = false>(
    options: Options<GetOperationAsyncStatusSubmodelRepoData, ThrowOnError>
) => {
    return (options?.client ?? client).get<
        GetOperationAsyncStatusSubmodelRepoResponse,
        GetOperationAsyncStatusSubmodelRepoError,
        ThrowOnError
    >({
        url: '/submodels/{submodelIdentifier}/submodel-elements/{idShortPath}/operation-status/{handleId}',
        ...options,
    });
};

/**
 * Returns the Operation result of an asynchronous invoked Operation
 */
export const getOperationAsyncResultSubmodelRepo = <ThrowOnError extends boolean = false>(
    options: Options<GetOperationAsyncResultSubmodelRepoData, ThrowOnError>
) => {
    return (options?.client ?? client).get<
        GetOperationAsyncResultSubmodelRepoResponse,
        GetOperationAsyncResultSubmodelRepoError,
        ThrowOnError
    >({
        url: '/submodels/{submodelIdentifier}/submodel-elements/{idShortPath}/operation-results/{handleId}',
        ...options,
    });
};

/**
 * Returns the Operation result of an asynchronous invoked Operation
 */
export const getOperationAsyncResultValueOnlySubmodelRepo = <ThrowOnError extends boolean = false>(
    options: Options<GetOperationAsyncResultValueOnlySubmodelRepoData, ThrowOnError>
) => {
    return (options?.client ?? client).get<
        GetOperationAsyncResultValueOnlySubmodelRepoResponse,
        GetOperationAsyncResultValueOnlySubmodelRepoError,
        ThrowOnError
    >({
        url: '/submodels/{submodelIdentifier}/submodel-elements/{idShortPath}/operation-results/{handleId}/$value',
        ...options,
    });
};

/**
 * Returns all Concept Descriptions
 */
export const getAllConceptDescriptions = <ThrowOnError extends boolean = false>(
    options?: Options<GetAllConceptDescriptionsData, ThrowOnError>
) => {
    return (options?.client ?? client).get<
        GetAllConceptDescriptionsResponse,
        GetAllConceptDescriptionsError,
        ThrowOnError
    >({
        url: '/concept-descriptions',
        ...options,
    });
};

/**
 * Creates a new Concept Description
 */
export const postConceptDescription = <ThrowOnError extends boolean = false>(
    options: Options<PostConceptDescriptionData, ThrowOnError>
) => {
    return (options?.client ?? client).post<PostConceptDescriptionResponse, PostConceptDescriptionError, ThrowOnError>({
        url: '/concept-descriptions',
        ...options,
        headers: {
            'Content-Type': 'application/json',
            ...options?.headers,
        },
    });
};

/**
 * Deletes a Concept Description
 */
export const deleteConceptDescriptionById = <ThrowOnError extends boolean = false>(
    options: Options<DeleteConceptDescriptionByIdData, ThrowOnError>
) => {
    return (options?.client ?? client).delete<
        DeleteConceptDescriptionByIdResponse,
        DeleteConceptDescriptionByIdError,
        ThrowOnError
    >({
        url: '/concept-descriptions/{cdIdentifier}',
        ...options,
    });
};

/**
 * Returns a specific Concept Description
 */
export const getConceptDescriptionById = <ThrowOnError extends boolean = false>(
    options: Options<GetConceptDescriptionByIdData, ThrowOnError>
) => {
    return (options?.client ?? client).get<
        GetConceptDescriptionByIdResponse,
        GetConceptDescriptionByIdError,
        ThrowOnError
    >({
        url: '/concept-descriptions/{cdIdentifier}',
        ...options,
    });
};

/**
 * Updates an existing Concept Description
 */
export const putConceptDescriptionById = <ThrowOnError extends boolean = false>(
    options: Options<PutConceptDescriptionByIdData, ThrowOnError>
) => {
    return (options?.client ?? client).put<
        PutConceptDescriptionByIdResponse,
        PutConceptDescriptionByIdError,
        ThrowOnError
    >({
        url: '/concept-descriptions/{cdIdentifier}',
        ...options,
        headers: {
            'Content-Type': 'application/json',
            ...options?.headers,
        },
    });
};

/**
 * Returns all Asset Administration Shell Descriptors
 */
export const getAllAssetAdministrationShellDescriptors = <ThrowOnError extends boolean = false>(
    options?: Options<GetAllAssetAdministrationShellDescriptorsData, ThrowOnError>
) => {
    return (options?.client ?? client).get<
        GetAllAssetAdministrationShellDescriptorsResponse,
        GetAllAssetAdministrationShellDescriptorsError,
        ThrowOnError
    >({
        url: '/shell-descriptors',
        ...options,
    });
};

/**
 * Creates a new Asset Administration Shell Descriptor, i.e. registers an AAS
 */
export const postAssetAdministrationShellDescriptor = <ThrowOnError extends boolean = false>(
    options: Options<PostAssetAdministrationShellDescriptorData, ThrowOnError>
) => {
    return (options?.client ?? client).post<
        PostAssetAdministrationShellDescriptorResponse,
        PostAssetAdministrationShellDescriptorError,
        ThrowOnError
    >({
        url: '/shell-descriptors',
        ...options,
        headers: {
            'Content-Type': 'application/json',
            ...options?.headers,
        },
    });
};

/**
 * Deletes an Asset Administration Shell Descriptor, i.e. de-registers an AAS
 */
export const deleteAssetAdministrationShellDescriptorById = <ThrowOnError extends boolean = false>(
    options: Options<DeleteAssetAdministrationShellDescriptorByIdData, ThrowOnError>
) => {
    return (options?.client ?? client).delete<
        DeleteAssetAdministrationShellDescriptorByIdResponse,
        DeleteAssetAdministrationShellDescriptorByIdError,
        ThrowOnError
    >({
        url: '/shell-descriptors/{aasIdentifier}',
        ...options,
    });
};

/**
 * Returns a specific Asset Administration Shell Descriptor
 */
export const getAssetAdministrationShellDescriptorById = <ThrowOnError extends boolean = false>(
    options: Options<GetAssetAdministrationShellDescriptorByIdData, ThrowOnError>
) => {
    return (options?.client ?? client).get<
        GetAssetAdministrationShellDescriptorByIdResponse,
        GetAssetAdministrationShellDescriptorByIdError,
        ThrowOnError
    >({
        url: '/shell-descriptors/{aasIdentifier}',
        ...options,
    });
};

/**
 * Updates an existing Asset Administration Shell Descriptor
 */
export const putAssetAdministrationShellDescriptorById = <ThrowOnError extends boolean = false>(
    options: Options<PutAssetAdministrationShellDescriptorByIdData, ThrowOnError>
) => {
    return (options?.client ?? client).put<
        PutAssetAdministrationShellDescriptorByIdResponse,
        PutAssetAdministrationShellDescriptorByIdError,
        ThrowOnError
    >({
        url: '/shell-descriptors/{aasIdentifier}',
        ...options,
        headers: {
            'Content-Type': 'application/json',
            ...options?.headers,
        },
    });
};

/**
 * Returns all Submodel Descriptors
 */
export const getAllSubmodelDescriptorsThroughSuperpath = <ThrowOnError extends boolean = false>(
    options: Options<GetAllSubmodelDescriptorsThroughSuperpathData, ThrowOnError>
) => {
    return (options?.client ?? client).get<
        GetAllSubmodelDescriptorsThroughSuperpathResponse,
        GetAllSubmodelDescriptorsThroughSuperpathError,
        ThrowOnError
    >({
        url: '/shell-descriptors/{aasIdentifier}/submodel-descriptors',
        ...options,
    });
};

/**
 * Creates a new Submodel Descriptor, i.e. registers a submodel
 */
export const postSubmodelDescriptorThroughSuperpath = <ThrowOnError extends boolean = false>(
    options: Options<PostSubmodelDescriptorThroughSuperpathData, ThrowOnError>
) => {
    return (options?.client ?? client).post<
        PostSubmodelDescriptorThroughSuperpathResponse,
        PostSubmodelDescriptorThroughSuperpathError,
        ThrowOnError
    >({
        url: '/shell-descriptors/{aasIdentifier}/submodel-descriptors',
        ...options,
        headers: {
            'Content-Type': 'application/json',
            ...options?.headers,
        },
    });
};

/**
 * Deletes a Submodel Descriptor, i.e. de-registers a submodel
 */
export const deleteSubmodelDescriptorByIdThroughSuperpath = <ThrowOnError extends boolean = false>(
    options: Options<DeleteSubmodelDescriptorByIdThroughSuperpathData, ThrowOnError>
) => {
    return (options?.client ?? client).delete<
        DeleteSubmodelDescriptorByIdThroughSuperpathResponse,
        DeleteSubmodelDescriptorByIdThroughSuperpathError,
        ThrowOnError
    >({
        url: '/shell-descriptors/{aasIdentifier}/submodel-descriptors/{submodelIdentifier}',
        ...options,
    });
};

/**
 * Returns a specific Submodel Descriptor
 */
export const getSubmodelDescriptorByIdThroughSuperpath = <ThrowOnError extends boolean = false>(
    options: Options<GetSubmodelDescriptorByIdThroughSuperpathData, ThrowOnError>
) => {
    return (options?.client ?? client).get<
        GetSubmodelDescriptorByIdThroughSuperpathResponse,
        GetSubmodelDescriptorByIdThroughSuperpathError,
        ThrowOnError
    >({
        url: '/shell-descriptors/{aasIdentifier}/submodel-descriptors/{submodelIdentifier}',
        ...options,
    });
};

/**
 * Updates an existing Submodel Descriptor
 */
export const putSubmodelDescriptorByIdThroughSuperpath = <ThrowOnError extends boolean = false>(
    options: Options<PutSubmodelDescriptorByIdThroughSuperpathData, ThrowOnError>
) => {
    return (options?.client ?? client).put<
        PutSubmodelDescriptorByIdThroughSuperpathResponse,
        PutSubmodelDescriptorByIdThroughSuperpathError,
        ThrowOnError
    >({
        url: '/shell-descriptors/{aasIdentifier}/submodel-descriptors/{submodelIdentifier}',
        ...options,
        headers: {
            'Content-Type': 'application/json',
            ...options?.headers,
        },
    });
};

/**
 * Returns all Submodel Descriptors
 */
export const getAllSubmodelDescriptors = <ThrowOnError extends boolean = false>(
    options?: Options<GetAllSubmodelDescriptorsData, ThrowOnError>
) => {
    return (options?.client ?? client).get<
        GetAllSubmodelDescriptorsResponse,
        GetAllSubmodelDescriptorsError,
        ThrowOnError
    >({
        url: '/submodel-descriptors',
        ...options,
    });
};

/**
 * Creates a new Submodel Descriptor, i.e. registers a submodel
 */
export const postSubmodelDescriptor = <ThrowOnError extends boolean = false>(
    options: Options<PostSubmodelDescriptorData, ThrowOnError>
) => {
    return (options?.client ?? client).post<PostSubmodelDescriptorResponse, PostSubmodelDescriptorError, ThrowOnError>({
        url: '/submodel-descriptors',
        ...options,
        headers: {
            'Content-Type': 'application/json',
            ...options?.headers,
        },
    });
};

/**
 * Deletes a Submodel Descriptor, i.e. de-registers a submodel
 */
export const deleteSubmodelDescriptorById = <ThrowOnError extends boolean = false>(
    options: Options<DeleteSubmodelDescriptorByIdData, ThrowOnError>
) => {
    return (options?.client ?? client).delete<
        DeleteSubmodelDescriptorByIdResponse,
        DeleteSubmodelDescriptorByIdError,
        ThrowOnError
    >({
        url: '/submodel-descriptors/{submodelIdentifier}',
        ...options,
    });
};

/**
 * Returns a specific Submodel Descriptor
 */
export const getSubmodelDescriptorById = <ThrowOnError extends boolean = false>(
    options: Options<GetSubmodelDescriptorByIdData, ThrowOnError>
) => {
    return (options?.client ?? client).get<
        GetSubmodelDescriptorByIdResponse,
        GetSubmodelDescriptorByIdError,
        ThrowOnError
    >({
        url: '/submodel-descriptors/{submodelIdentifier}',
        ...options,
    });
};

/**
 * Updates an existing Submodel Descriptor
 */
export const putSubmodelDescriptorById = <ThrowOnError extends boolean = false>(
    options: Options<PutSubmodelDescriptorByIdData, ThrowOnError>
) => {
    return (options?.client ?? client).put<
        PutSubmodelDescriptorByIdResponse,
        PutSubmodelDescriptorByIdError,
        ThrowOnError
    >({
        url: '/submodel-descriptors/{submodelIdentifier}',
        ...options,
        headers: {
            'Content-Type': 'application/json',
            ...options?.headers,
        },
    });
};

/**
 * Returns a list of Asset Administration Shell ids linked to specific Asset identifiers
 */
export const getAllAssetAdministrationShellIdsByAssetLink = <ThrowOnError extends boolean = false>(
    options?: Options<GetAllAssetAdministrationShellIdsByAssetLinkData, ThrowOnError>
) => {
    return (options?.client ?? client).get<
        GetAllAssetAdministrationShellIdsByAssetLinkResponse,
        GetAllAssetAdministrationShellIdsByAssetLinkError,
        ThrowOnError
    >({
        url: '/lookup/shells',
        ...options,
    });
};

/**
 * Deletes all specific Asset identifiers linked to an Asset Administration Shell to edit discoverable content
 */
export const deleteAllAssetLinksById = <ThrowOnError extends boolean = false>(
    options: Options<DeleteAllAssetLinksByIdData, ThrowOnError>
) => {
    return (options?.client ?? client).delete<
        DeleteAllAssetLinksByIdResponse,
        DeleteAllAssetLinksByIdError,
        ThrowOnError
    >({
        url: '/lookup/shells/{aasIdentifier}',
        ...options,
    });
};

/**
 * Returns a list of specific Asset identifiers based on an Asset Administration Shell id to edit discoverable content
 */
export const getAllAssetLinksById = <ThrowOnError extends boolean = false>(
    options: Options<GetAllAssetLinksByIdData, ThrowOnError>
) => {
    return (options?.client ?? client).get<GetAllAssetLinksByIdResponse, GetAllAssetLinksByIdError, ThrowOnError>({
        url: '/lookup/shells/{aasIdentifier}',
        ...options,
    });
};

/**
 * Creates specific Asset identifiers linked to an Asset Administration Shell to edit discoverable content
 */
export const postAllAssetLinksById = <ThrowOnError extends boolean = false>(
    options: Options<PostAllAssetLinksByIdData, ThrowOnError>
) => {
    return (options?.client ?? client).post<PostAllAssetLinksByIdResponse, PostAllAssetLinksByIdError, ThrowOnError>({
        url: '/lookup/shells/{aasIdentifier}',
        ...options,
        headers: {
            'Content-Type': 'application/json',
            ...options?.headers,
        },
    });
};

/**
 * Returns a list of available AASX packages at the server
 */
export const getAllAasxPackageIds = <ThrowOnError extends boolean = false>(
    options?: Options<GetAllAasxPackageIdsData, ThrowOnError>
) => {
    return (options?.client ?? client).get<GetAllAasxPackageIdsResponse, GetAllAasxPackageIdsError, ThrowOnError>({
        url: '/packages',
        ...options,
    });
};

/**
 * Stores the AASX package at the server
 */
export const postAasxPackage = <ThrowOnError extends boolean = false>(
    options: Options<PostAasxPackageData, ThrowOnError>
) => {
    return (options?.client ?? client).post<PostAasxPackageResponse, PostAasxPackageError, ThrowOnError>({
        ...formDataBodySerializer,
        url: '/packages',
        ...options,
        headers: {
            'Content-Type': null,
            ...options?.headers,
        },
    });
};

/**
 * Deletes a specific AASX package from the server
 */
export const deleteAasxByPackageId = <ThrowOnError extends boolean = false>(
    options: Options<DeleteAasxByPackageIdData, ThrowOnError>
) => {
    return (options?.client ?? client).delete<DeleteAasxByPackageIdResponse, DeleteAasxByPackageIdError, ThrowOnError>({
        url: '/packages/{packageId}',
        ...options,
    });
};

/**
 * Returns a specific AASX package from the server
 */
export const getAasxByPackageId = <ThrowOnError extends boolean = false>(
    options: Options<GetAasxByPackageIdData, ThrowOnError>
) => {
    return (options?.client ?? client).get<GetAasxByPackageIdResponse, GetAasxByPackageIdError, ThrowOnError>({
        url: '/packages/{packageId}',
        ...options,
    });
};

/**
 * Updates the AASX package at the server
 */
export const putAasxByPackageId = <ThrowOnError extends boolean = false>(
    options: Options<PutAasxByPackageIdData, ThrowOnError>
) => {
    return (options?.client ?? client).put<PutAasxByPackageIdResponse, PutAasxByPackageIdError, ThrowOnError>({
        ...formDataBodySerializer,
        url: '/packages/{packageId}',
        ...options,
        headers: {
            'Content-Type': null,
            ...options?.headers,
        },
    });
};

/**
 * Returns an appropriate serialization based on the specified format (see SerializationFormat)
 */
export const generateSerializationByIds = <ThrowOnError extends boolean = false>(
    options?: Options<GenerateSerializationByIdsData, ThrowOnError>
) => {
    return (options?.client ?? client).get<
        GenerateSerializationByIdsResponse,
        GenerateSerializationByIdsError,
        ThrowOnError
    >({
        url: '/serialization',
        ...options,
    });
};

/**
 * Returns the self-describing information of a network resource (ServiceDescription)
 */
export const getDescription = <ThrowOnError extends boolean = false>(
    options?: Options<GetDescriptionData, ThrowOnError>
) => {
    return (options?.client ?? client).get<GetDescriptionResponse, GetDescriptionError, ThrowOnError>({
        url: '/description',
        ...options,
    });
};
