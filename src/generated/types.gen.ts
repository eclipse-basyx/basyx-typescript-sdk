// This file is auto-generated by @hey-api/openapi-ts

export type AssetAdministrationShell = Identifiable &
    HasDataSpecification & {
        derivedFrom?: Reference;
        assetInformation: AssetInformation;
        submodels?: Array<Reference>;
        modelType?: string;
    };

export type Identifiable = Referable & {
    administration?: AdministrativeInformation;
    id: string;
};

export type Referable = HasExtensions & {
    category?: string;
    idShort?: unknown;
    displayName?: Array<LangStringNameType>;
    description?: Array<LangStringTextType>;
    modelType: ModelType;
};

export type HasExtensions = {
    extensions?: Array<Extension>;
};

export type Extension = HasSemantics & {
    name: string;
    valueType?: DataTypeDefXsd;
    value?: string;
    refersTo?: Array<Reference>;
};

export type HasSemantics = {
    semanticId?: Reference;
    supplementalSemanticIds?: Array<Reference>;
};

export type Reference = ReferenceParent & {
    referredSemanticId?: ReferenceParent;
};

export type ReferenceParent = {
    type: ReferenceTypes;
    keys: Array<Key>;
};

export type ReferenceTypes = 'ExternalReference' | 'ModelReference';

export type Key = {
    type: KeyTypes;
    value: string;
};

export type KeyTypes =
    | 'AnnotatedRelationshipElement'
    | 'AssetAdministrationShell'
    | 'BasicEventElement'
    | 'Blob'
    | 'Capability'
    | 'ConceptDescription'
    | 'DataElement'
    | 'Entity'
    | 'EventElement'
    | 'File'
    | 'FragmentReference'
    | 'GlobalReference'
    | 'Identifiable'
    | 'MultiLanguageProperty'
    | 'Operation'
    | 'Property'
    | 'Range'
    | 'Referable'
    | 'ReferenceElement'
    | 'RelationshipElement'
    | 'Submodel'
    | 'SubmodelElement'
    | 'SubmodelElementCollection'
    | 'SubmodelElementList';

export type DataTypeDefXsd =
    | 'xs:anyURI'
    | 'xs:base64Binary'
    | 'xs:boolean'
    | 'xs:byte'
    | 'xs:date'
    | 'xs:dateTime'
    | 'xs:decimal'
    | 'xs:double'
    | 'xs:duration'
    | 'xs:float'
    | 'xs:gDay'
    | 'xs:gMonth'
    | 'xs:gMonthDay'
    | 'xs:gYear'
    | 'xs:gYearMonth'
    | 'xs:hexBinary'
    | 'xs:int'
    | 'xs:integer'
    | 'xs:long'
    | 'xs:negativeInteger'
    | 'xs:nonNegativeInteger'
    | 'xs:nonPositiveInteger'
    | 'xs:positiveInteger'
    | 'xs:short'
    | 'xs:string'
    | 'xs:time'
    | 'xs:unsignedByte'
    | 'xs:unsignedInt'
    | 'xs:unsignedLong'
    | 'xs:unsignedShort';

export type LangStringNameType = AbstractLangString & {
    text?: unknown;
};

export type AbstractLangString = {
    language: string;
    text: string;
};

export type LangStringTextType = AbstractLangString & {
    text?: unknown;
};

export type ModelType =
    | 'AnnotatedRelationshipElement'
    | 'AssetAdministrationShell'
    | 'BasicEventElement'
    | 'Blob'
    | 'Capability'
    | 'ConceptDescription'
    | 'DataSpecificationIec61360'
    | 'Entity'
    | 'File'
    | 'MultiLanguageProperty'
    | 'Operation'
    | 'Property'
    | 'Range'
    | 'ReferenceElement'
    | 'RelationshipElement'
    | 'Submodel'
    | 'SubmodelElementCollection'
    | 'SubmodelElementList';

export type AdministrativeInformation = HasDataSpecification & {
    version?: unknown;
    revision?: unknown;
    creator?: Reference;
    templateId?: string;
};

export type HasDataSpecification = {
    embeddedDataSpecifications?: Array<EmbeddedDataSpecification>;
};

export type EmbeddedDataSpecification = {
    dataSpecificationContent: DataSpecificationContentChoice;
    dataSpecification: Reference;
};

export type DataSpecificationContentChoice = DataSpecificationIec61360;

export type DataSpecificationIec61360 = DataSpecificationContent & {
    preferredName: Array<LangStringPreferredNameTypeIec61360>;
    shortName?: Array<LangStringShortNameTypeIec61360>;
    unit?: string;
    unitId?: Reference;
    sourceOfDefinition?: string;
    symbol?: string;
    dataType?: DataTypeIec61360;
    definition?: Array<LangStringDefinitionTypeIec61360>;
    valueFormat?: string;
    valueList?: ValueList;
    value?: string;
    levelType?: LevelType;
    modelType?: string;
};

export type DataSpecificationContent = {
    modelType: ModelType;
};

export type LangStringPreferredNameTypeIec61360 = AbstractLangString & {
    text?: unknown;
};

export type LangStringShortNameTypeIec61360 = AbstractLangString & {
    text?: unknown;
};

export type DataTypeIec61360 =
    | 'BLOB'
    | 'BOOLEAN'
    | 'DATE'
    | 'FILE'
    | 'HTML'
    | 'INTEGER_COUNT'
    | 'INTEGER_CURRENCY'
    | 'INTEGER_MEASURE'
    | 'IRDI'
    | 'IRI'
    | 'RATIONAL'
    | 'RATIONAL_MEASURE'
    | 'REAL_COUNT'
    | 'REAL_CURRENCY'
    | 'REAL_MEASURE'
    | 'STRING'
    | 'STRING_TRANSLATABLE'
    | 'TIME'
    | 'TIMESTAMP';

export type LangStringDefinitionTypeIec61360 = AbstractLangString & {
    text?: unknown;
};

export type ValueList = {
    valueReferencePairs: Array<ValueReferencePair>;
};

export type ValueReferencePair = {
    value: string;
    valueId: Reference;
};

export type LevelType = {
    min: boolean;
    nom: boolean;
    typ: boolean;
    max: boolean;
};

export type AssetInformation = {
    assetKind: AssetKind;
    globalAssetId?: string;
    specificAssetIds?: Array<SpecificAssetId>;
    assetType?: string;
    defaultThumbnail?: Resource;
};

export type AssetKind = 'Instance' | 'NotApplicable' | 'Type';

export type SpecificAssetId = HasSemantics & {
    name: string;
    value: string;
    externalSubjectId?: Reference;
};

export type Resource = {
    path: string;
    contentType?: unknown;
};

export type Result = {
    messages?: Array<Message>;
};

export type Message = {
    code?: string;
    correlationId?: string;
    messageType?: 'Undefined' | 'Info' | 'Warning' | 'Error' | 'Exception';
    text?: string;
    timestamp?: string;
};

export type GetReferencesResult = PagedResult & {
    result?: Array<Reference>;
};

export type PagedResult = {
    paging_metadata?: PagedResultPagingMetadata;
};

export type Submodel = Identifiable &
    HasKind &
    HasSemantics &
    Qualifiable &
    HasDataSpecification & {
        submodelElements?: Array<SubmodelElementChoice>;
        modelType?: string;
    };

export type HasKind = {
    kind?: ModellingKind;
};

export type ModellingKind = 'Instance' | 'Template';

export type Qualifiable = {
    qualifiers?: Array<Qualifier>;
    modelType: ModelType;
};

export type Qualifier = HasSemantics & {
    kind?: QualifierKind;
    type: string;
    valueType: DataTypeDefXsd;
    value?: string;
    valueId?: Reference;
};

export type QualifierKind = 'ConceptQualifier' | 'TemplateQualifier' | 'ValueQualifier';

export type SubmodelElementChoice =
    | RelationshipElement
    | AnnotatedRelationshipElement
    | BasicEventElement
    | Blob
    | Capability
    | Entity
    | File
    | MultiLanguageProperty
    | Operation
    | Property
    | Range
    | ReferenceElement
    | SubmodelElementCollection
    | SubmodelElementList;

export type RelationshipElement = RelationshipElementAbstract & {
    modelType?: string;
};

export type RelationshipElementAbstract = SubmodelElement & {
    first: Reference;
    second: Reference;
};

export type SubmodelElement = Referable & HasSemantics & Qualifiable & HasDataSpecification;

export type AnnotatedRelationshipElement = RelationshipElementAbstract & {
    annotations?: Array<DataElementChoice>;
    modelType?: string;
};

export type DataElementChoice = Blob | File | MultiLanguageProperty | Property | Range | ReferenceElement;

export type Blob = DataElement & {
    value?: string;
    contentType: unknown;
    modelType?: string;
};

export type DataElement = Referable & HasSemantics & Qualifiable & HasDataSpecification;

export type File = DataElement & {
    value?: string;
    contentType: unknown;
    modelType?: string;
};

export type MultiLanguageProperty = DataElement & {
    value?: Array<LangStringTextType>;
    valueId?: Reference;
    modelType?: string;
};

export type Property = DataElement & {
    valueType: DataTypeDefXsd;
    value?: string;
    valueId?: Reference;
    modelType?: string;
};

export type Range = DataElement & {
    valueType: DataTypeDefXsd;
    min?: string;
    max?: string;
    modelType?: string;
};

export type ReferenceElement = DataElement & {
    value?: Reference;
    modelType?: string;
};

export type BasicEventElement = EventElement & {
    observed: Reference;
    direction: Direction;
    state: StateOfEvent;
    messageTopic?: string;
    messageBroker?: Reference;
    lastUpdate?: string;
    minInterval?: string;
    maxInterval?: string;
    modelType?: string;
};

export type EventElement = Referable & HasSemantics & Qualifiable & HasDataSpecification;

export type Direction = 'input' | 'output';

export type StateOfEvent = 'off' | 'on';

export type Capability = SubmodelElement & {
    modelType?: string;
};

export type Entity = SubmodelElement & {
    statements?: Array<SubmodelElementChoice>;
    entityType: EntityType;
    globalAssetId?: string;
    specificAssetIds?: Array<SpecificAssetId>;
    modelType?: string;
};

export type EntityType = 'CoManagedEntity' | 'SelfManagedEntity';

export type Operation = SubmodelElement & {
    inputVariables?: Array<OperationVariable>;
    outputVariables?: Array<OperationVariable>;
    inoutputVariables?: Array<OperationVariable>;
    modelType?: string;
};

export type OperationVariable = {
    value: SubmodelElementChoice;
};

export type SubmodelElementCollection = SubmodelElement & {
    value?: Array<SubmodelElementChoice>;
    modelType?: string;
};

export type SubmodelElementList = SubmodelElement & {
    orderRelevant?: boolean;
    semanticIdListElement?: Reference;
    typeValueListElement: AasSubmodelElements;
    valueTypeListElement?: DataTypeDefXsd;
    value?: Array<SubmodelElementChoice>;
    modelType?: string;
};

export type AasSubmodelElements =
    | 'AnnotatedRelationshipElement'
    | 'BasicEventElement'
    | 'Blob'
    | 'Capability'
    | 'DataElement'
    | 'Entity'
    | 'EventElement'
    | 'File'
    | 'MultiLanguageProperty'
    | 'Operation'
    | 'Property'
    | 'Range'
    | 'ReferenceElement'
    | 'RelationshipElement'
    | 'SubmodelElement'
    | 'SubmodelElementCollection'
    | 'SubmodelElementList';

export type SubmodelMetadata = Identifiable & HasDataSpecification & Qualifiable & HasSemantics & HasKind;

/**
 * The ValueOnly serialization (patternProperties and propertyNames will be supported probably with OpenApi 3.1). For the full description of the generic JSON validation schema see the ValueOnly-Serialization as defined in the 'Specification of the Asset Administration Shell - Part 2'.
 */
export type SubmodelValue = {
    [key: string]: unknown;
};

export type PathItem = string;

export type GetSubmodelElementsResult = PagedResult & {
    result?: Array<SubmodelElement>;
};

export type GetSubmodelElementsMetadataResult = PagedResult & {
    result?: Array<SubmodelElementMetadata>;
};

export type SubmodelElementMetadata =
    | BlobMetadata
    | FileMetadata
    | CapabilityMetadata
    | EntityMetadata
    | BasicEventElementMetadata
    | MultiLanguagePropertyMetadata
    | OperationMetadata
    | PropertyMetadata
    | RangeMetadata
    | ReferenceElementMetadata
    | AnnotatedRelationshipElementMetadata
    | RelationshipElementMetadata
    | SubmodelElementListMetadata
    | SubmodelElementCollectionMetadata;

export type BlobMetadata = Referable1 & HasDataSpecification & HasSemantics1 & Qualifiable1 & HasKind1;

export type FileMetadata = SubmodelElementAttributes;

export type SubmodelElementAttributes = Referable1 & HasDataSpecification & HasSemantics1 & Qualifiable1 & HasKind1;

export type Referable1 = HasExtensions & {
    category?: string;
    idShort?: unknown;
    displayName?: Array<LangStringNameType>;
    description?: Array<LangStringTextType>;
    modelType: ModelType;
};

export type HasSemantics1 = {
    semanticId?: Reference;
    supplementalSemanticIds?: Array<Reference>;
};

export type Qualifiable1 = {
    qualifiers?: Array<Qualifier1>;
    modelType: ModelType;
};

export type Qualifier1 = HasSemantics1 & {
    kind?: QualifierKind;
    type: string;
    valueType: DataTypeDefXsd;
    value?: string;
    valueId?: Reference;
};

export type HasKind1 = {
    kind?: ModellingKind;
};

export type CapabilityMetadata = SubmodelElementAttributes;

export type EntityMetadata = SubmodelElementAttributes;

export type BasicEventElementMetadata = SubmodelElementAttributes & {
    direction?: Direction;
    state?: StateOfEvent;
    messageTopic?: string;
    messageBroker?: Reference;
    lastUpdate?: string;
    minInterval?: string;
    maxInterval?: string;
};

export type MultiLanguagePropertyMetadata = SubmodelElementAttributes;

export type OperationMetadata = SubmodelElementAttributes;

export type PropertyMetadata = SubmodelElementAttributes & {
    valueType?: DataTypeDefXsd;
};

export type RangeMetadata = SubmodelElementAttributes & {
    valueType?: DataTypeDefXsd;
};

export type ReferenceElementMetadata = SubmodelElementAttributes;

export type AnnotatedRelationshipElementMetadata = Referable1 &
    HasDataSpecification &
    HasSemantics1 &
    Qualifiable1 &
    HasKind1;

export type RelationshipElementMetadata = SubmodelElementAttributes;

export type SubmodelElementListMetadata = SubmodelElementAttributes & {
    orderRelevant?: boolean;
    semanticIdListElement?: Reference;
    typeValueListElement?: ModelType;
    valueTypeListElement?: DataTypeDefXsd;
};

export type SubmodelElementCollectionMetadata = SubmodelElementAttributes;

export type GetSubmodelElementsValueResult = PagedResult & {
    result?: Array<SubmodelElementValue>;
};

export type SubmodelElementValue =
    | BasicEventElementValue
    | PropertyValue
    | MultiLanguagePropertyValue
    | BlobValue
    | FileValue
    | RangeValue
    | ReferenceElementValue
    | RelationshipElementValue
    | AnnotatedRelationshipElementValue
    | EntityValue
    | SubmodelElementCollectionValue
    | SubmodelElementListValue;

export type BasicEventElementValue = {
    observed: ReferenceValue;
};

export type ReferenceValue = {
    type?: ReferenceTypes;
    keys?: Array<Key>;
};

export type PropertyValue = StringValue | NumberValue | BooleanValue;

export type StringValue = string;

export type NumberValue = number;

export type BooleanValue = boolean;

/**
 * Since patternProperties and propertyNames are not supported by OpenApi yet, the ValueOnly serialization for this elements works with the key-attribute as the JSON-property name and the value-attribute as the corresponding value.
 */
export type MultiLanguagePropertyValue = {
    [key: string]: unknown;
};

export type BlobValue = {
    contentType: string;
    value?: string;
};

export type FileValue = {
    contentType: string;
    value: string;
};

export type RangeValue = {
    max?: RangeValueType;
    min?: RangeValueType;
};

export type RangeValueType = StringValue | NumberValue | BooleanValue;

export type ReferenceElementValue = {
    type?: ReferenceTypes;
    keys?: Array<Key>;
};

export type RelationshipElementValue = {
    first: ReferenceValue;
    second: ReferenceValue;
};

export type AnnotatedRelationshipElementValue = {
    first: ReferenceValue;
    second: ReferenceValue;
    annotations?: Array<ValueOnly>;
};

/**
 * The ValueOnly serialization (patternProperties and propertyNames will be supported probably with OpenApi 3.1). For the full description of the generic JSON validation schema see the ValueOnly-Serialization as defined in the 'Specification of the Asset Administration Shell - Part 2'.
 */
export type ValueOnly = {
    [key: string]: unknown;
};

export type EntityValue = {
    entityType: EntityType;
    globalAssetId?: string;
    specificAssetIds?: Array<SpecificAssetIdValue>;
    statements?: Array<ValueOnly>;
};

/**
 * Since patternProperties and propertyNames are not supported by OpenApi yet, the ValueOnly serialization for this elements works with the key-attribute as the JSON-property name and the value-attribute as the corresponding value.
 */
export type SpecificAssetIdValue = {
    [key: string]: unknown;
};

/**
 * Since patternProperties and propertyNames are not supported by OpenApi yet, the ValueOnly serialization for this elements works with the key-attribute as the JSON-property name and the value-attribute as the corresponding value.
 */
export type SubmodelElementCollectionValue = {
    [key: string]: unknown;
};

export type SubmodelElementListValue = Array<SubmodelElementValue>;

export type GetPathItemsResult = PagedResult & {
    result?: Array<PathItem>;
};

export type OperationRequest = {
    inoutputArguments?: Array<OperationVariable>;
    inputArguments?: Array<OperationVariable>;
    clientTimeoutDuration?: string;
};

export type OperationResult = BaseOperationResult & {
    inoutputArguments?: Array<OperationVariable>;
    outputArguments?: Array<OperationVariable>;
};

export type BaseOperationResult = Result & {
    executionState?: ExecutionState;
    success?: boolean;
};

export type ExecutionState = 'Initiated' | 'Running' | 'Completed' | 'Canceled' | 'Failed' | 'Timeout';

export type OperationRequestValueOnly = {
    inoutputArguments?: ValueOnly;
    inputArguments?: ValueOnly;
    clientTimeoutDuration: string;
};

export type OperationResultValueOnly = BaseOperationResult & {
    inoutputArguments?: ValueOnly;
    outputArguments?: ValueOnly;
};

export type GetAssetAdministrationShellsResult = PagedResult & {
    result?: Array<AssetAdministrationShell>;
};

export type GetSubmodelsResult = PagedResult & {
    result?: Array<Submodel>;
};

export type GetSubmodelsMetadataResult = PagedResult & {
    result?: Array<SubmodelMetadata>;
};

export type GetSubmodelsValueResult = PagedResult & {
    result?: Array<SubmodelValue>;
};

export type GetConceptDescriptionsResult = PagedResult & {
    result?: Array<ConceptDescription>;
};

export type ConceptDescription = Identifiable &
    HasDataSpecification & {
        isCaseOf?: Array<Reference>;
        modelType?: string;
    };

export type GetAssetAdministrationShellDescriptorsResult = PagedResult & {
    result?: Array<AssetAdministrationShellDescriptor>;
};

export type AssetAdministrationShellDescriptor = Descriptor & {
    administration?: AdministrativeInformation;
    assetKind?: AssetKind;
    assetType?: string;
    endpoints?: Array<Endpoint>;
    globalAssetId?: string;
    idShort?: string;
    id: string;
    specificAssetIds?: Array<SpecificAssetId>;
    submodelDescriptors?: Array<SubmodelDescriptor>;
};

export type Descriptor = {
    description?: Array<LangStringTextType>;
    displayName?: Array<LangStringNameType>;
    extensions?: Array<Extension>;
};

export type Endpoint = {
    interface: string;
    protocolInformation: ProtocolInformation;
};

export type ProtocolInformation = {
    href: string;
    endpointProtocol?: string;
    endpointProtocolVersion?: Array<string>;
    subprotocol?: string;
    subprotocolBody?: string;
    subprotocolBodyEncoding?: string;
    securityAttributes?: Array<ProtocolInformationSecurityAttributes>;
};

export type SubmodelDescriptor = Descriptor & {
    administration?: AdministrativeInformation;
    endpoints: Array<Endpoint>;
    idShort?: string;
    id: string;
    semanticId?: Reference;
    supplementalSemanticId?: Array<Reference>;
};

export type GetSubmodelDescriptorsResult = PagedResult & {
    result?: Array<SubmodelDescriptor>;
};

export type GetPackageDescriptionsResult = PagedResult & {
    result?: Array<PackageDescription>;
};

export type PackageDescription = {
    aasIds?: Array<string>;
    packageId?: string;
};

export type Environment = {
    assetAdministrationShells?: Array<AssetAdministrationShell>;
    submodels?: Array<Submodel>;
    conceptDescriptions?: Array<ConceptDescription>;
};

/**
 * The Description object enables servers to present their capabilities to the clients, in particular which profiles they implement. At least one defined profile is required. Additional, proprietary attributes might be included. Nevertheless, the server must not expect that a regular client understands them.
 */
export type ServiceDescription = {
    profiles?: Array<string>;
};

export type AssetinformationThumbnailBody = {
    fileName?: string;
    file?: globalThis.Blob | globalThis.File;
};

export type IdShortPathAttachmentBody = {
    fileName?: string;
    file?: Blob | File;
};

export type IdShortPathAttachmentBody1 = {
    fileName?: string;
    file?: Blob | File;
};

export type AssetinformationThumbnailBody1 = {
    fileName?: string;
    file?: globalThis.Blob | globalThis.File;
};

export type IdShortPathAttachmentBody2 = {
    fileName?: string;
    file?: Blob | File;
};

export type IdShortPathAttachmentBody3 = {
    fileName?: string;
    file?: Blob | File;
};

export type InlineResponse200 = PagedResult & {
    result?: Array<string>;
};

export type PackagesBody = {
    aasIds?: Array<string>;
    file?: Blob | File;
    fileName?: string;
};

export type PackagesPackageIdBody = {
    aasIds?: Array<string>;
    file?: Blob | File;
    fileName?: string;
};

export type PagedResultPagingMetadata = {
    cursor?: string;
};

export type ProtocolInformationSecurityAttributes = {
    type: 'NONE' | 'RFC_TLSA' | 'W3C_DID';
    key: string;
    value: string;
};

/**
 * The maximum number of elements in the response array
 */
export type Limit = number;

/**
 * A server-generated identifier retrieved from pagingMetadata that specifies from which position the result listing should continue
 */
export type Cursor = string;

/**
 * The Submodel’s unique id (UTF8-BASE64-URL-encoded)
 */
export type SubmodelIdentifier = string;

/**
 * Determines the structural depth of the respective resource content
 */
export type Level = 'deep' | 'core';

/**
 * Determines to which extent the resource is being serialized
 */
export type Extent = 'withBlobValue' | 'withoutBlobValue';

/**
 * IdShort path to the submodel element (dot-separated)
 */
export type IdShortPath = string;

/**
 * The Asset Administration Shell’s unique id (UTF8-BASE64-URL-encoded)
 */
export type AssetAdministrationShellIdentifier = string;

/**
 * The returned handle id of an operation’s asynchronous invocation used to request the current state of the operation’s execution (UTF8-BASE64-URL-encoded)
 */
export type HandleId = string;

/**
 * A list of specific Asset identifiers. Every single value asset identifier is a base64-url-encoded [SpecificAssetId](https://api.swaggerhub.com/domains/Plattform_i40/Part1-MetaModel-Schemas/V3.0.3#/components/schemas/SpecificAssetId).
 */
export type AssetIds = Array<string>;

/**
 * The Asset Administration Shell’s IdShort
 */
export type IdShort = string;

/**
 * The value of the semantic id reference (BASE64-URL-encoded)
 */
export type SemanticId = string;

/**
 * The Asset's kind (Instance or Type)
 */
export type AssetKind2 = AssetKind;

/**
 * The Asset's type (UTF8-BASE64-URL-encoded)
 */
export type AssetType = string;

export type GetAssetAdministrationShellData = {
    body?: never;
    path?: never;
    query?: never;
    url: '/aas';
};

export type GetAssetAdministrationShellErrors = {
    /**
     * Bad Request, e.g. the request parameters of the format of the request body is wrong.
     */
    400: Result;
    /**
     * Forbidden
     */
    403: Result;
    /**
     * Internal Server Error
     */
    500: Result;
    /**
     * Default error handling for unmentioned status codes
     */
    default: Result;
};

export type GetAssetAdministrationShellError =
    GetAssetAdministrationShellErrors[keyof GetAssetAdministrationShellErrors];

export type GetAssetAdministrationShellResponses = {
    /**
     * Requested Asset Administration Shell
     */
    200: AssetAdministrationShell;
};

export type GetAssetAdministrationShellResponse =
    GetAssetAdministrationShellResponses[keyof GetAssetAdministrationShellResponses];

export type PutAssetAdministrationShellData = {
    /**
     * Asset Administration Shell object
     */
    body: AssetAdministrationShell;
    path?: never;
    query?: never;
    url: '/aas';
};

export type PutAssetAdministrationShellErrors = {
    /**
     * Bad Request, e.g. the request parameters of the format of the request body is wrong.
     */
    400: Result;
    /**
     * Forbidden
     */
    403: Result;
    /**
     * Internal Server Error
     */
    500: Result;
    /**
     * Default error handling for unmentioned status codes
     */
    default: Result;
};

export type PutAssetAdministrationShellError =
    PutAssetAdministrationShellErrors[keyof PutAssetAdministrationShellErrors];

export type PutAssetAdministrationShellResponses = {
    /**
     * Asset Administration Shell updated successfully
     */
    204: void;
};

export type PutAssetAdministrationShellResponse =
    PutAssetAdministrationShellResponses[keyof PutAssetAdministrationShellResponses];

export type GetAssetAdministrationShellReferenceData = {
    body?: never;
    path?: never;
    query?: never;
    url: '/aas/$reference';
};

export type GetAssetAdministrationShellReferenceErrors = {
    /**
     * Bad Request, e.g. the request parameters of the format of the request body is wrong.
     */
    400: Result;
    /**
     * Forbidden
     */
    403: Result;
    /**
     * Internal Server Error
     */
    500: Result;
    /**
     * Default error handling for unmentioned status codes
     */
    default: Result;
};

export type GetAssetAdministrationShellReferenceError =
    GetAssetAdministrationShellReferenceErrors[keyof GetAssetAdministrationShellReferenceErrors];

export type GetAssetAdministrationShellReferenceResponses = {
    /**
     * Requested Asset Administration Shell
     */
    200: Reference;
};

export type GetAssetAdministrationShellReferenceResponse =
    GetAssetAdministrationShellReferenceResponses[keyof GetAssetAdministrationShellReferenceResponses];

export type GetAssetInformationData = {
    body?: never;
    path?: never;
    query?: never;
    url: '/aas/asset-information';
};

export type GetAssetInformationErrors = {
    /**
     * Bad Request, e.g. the request parameters of the format of the request body is wrong.
     */
    400: Result;
    /**
     * Forbidden
     */
    403: Result;
    /**
     * Internal Server Error
     */
    500: Result;
    /**
     * Default error handling for unmentioned status codes
     */
    default: Result;
};

export type GetAssetInformationError = GetAssetInformationErrors[keyof GetAssetInformationErrors];

export type GetAssetInformationResponses = {
    /**
     * Requested Asset Information
     */
    200: AssetInformation;
};

export type GetAssetInformationResponse = GetAssetInformationResponses[keyof GetAssetInformationResponses];

export type PutAssetInformationData = {
    /**
     * Asset Information object
     */
    body: AssetInformation;
    path?: never;
    query?: never;
    url: '/aas/asset-information';
};

export type PutAssetInformationErrors = {
    /**
     * Bad Request, e.g. the request parameters of the format of the request body is wrong.
     */
    400: Result;
    /**
     * Forbidden
     */
    403: Result;
    /**
     * Internal Server Error
     */
    500: Result;
    /**
     * Default error handling for unmentioned status codes
     */
    default: Result;
};

export type PutAssetInformationError = PutAssetInformationErrors[keyof PutAssetInformationErrors];

export type PutAssetInformationResponses = {
    /**
     * Asset Information updated successfully
     */
    204: void;
};

export type PutAssetInformationResponse = PutAssetInformationResponses[keyof PutAssetInformationResponses];

export type DeleteThumbnailData = {
    body?: never;
    path?: never;
    query?: never;
    url: '/aas/asset-information/thumbnail';
};

export type DeleteThumbnailErrors = {
    /**
     * Bad Request, e.g. the request parameters of the format of the request body is wrong.
     */
    400: Result;
    /**
     * Forbidden
     */
    403: Result;
    /**
     * Not Found
     */
    404: Result;
    /**
     * Internal Server Error
     */
    500: Result;
    /**
     * Default error handling for unmentioned status codes
     */
    default: Result;
};

export type DeleteThumbnailError = DeleteThumbnailErrors[keyof DeleteThumbnailErrors];

export type DeleteThumbnailResponses = {
    /**
     * Thumbnail deletion successful
     */
    200: unknown;
};

export type GetThumbnailData = {
    body?: never;
    path?: never;
    query?: never;
    url: '/aas/asset-information/thumbnail';
};

export type GetThumbnailErrors = {
    /**
     * Bad Request, e.g. the request parameters of the format of the request body is wrong.
     */
    400: Result;
    /**
     * Forbidden
     */
    403: Result;
    /**
     * Not Found
     */
    404: Result;
    /**
     * Internal Server Error
     */
    500: Result;
    /**
     * Default error handling for unmentioned status codes
     */
    default: Result;
};

export type GetThumbnailError = GetThumbnailErrors[keyof GetThumbnailErrors];

export type GetThumbnailResponses = {
    /**
     * The thumbnail of the Asset Information.
     */
    200: Blob | File;
};

export type GetThumbnailResponse = GetThumbnailResponses[keyof GetThumbnailResponses];

export type PutThumbnailData = {
    /**
     * Thumbnail to upload
     */
    body: AssetinformationThumbnailBody;
    path?: never;
    query?: never;
    url: '/aas/asset-information/thumbnail';
};

export type PutThumbnailErrors = {
    /**
     * Bad Request, e.g. the request parameters of the format of the request body is wrong.
     */
    400: Result;
    /**
     * Forbidden
     */
    403: Result;
    /**
     * Not Found
     */
    404: Result;
    /**
     * Internal Server Error
     */
    500: Result;
    /**
     * Default error handling for unmentioned status codes
     */
    default: Result;
};

export type PutThumbnailError = PutThumbnailErrors[keyof PutThumbnailErrors];

export type PutThumbnailResponses = {
    /**
     * Thumbnail updated successfully
     */
    204: void;
};

export type PutThumbnailResponse = PutThumbnailResponses[keyof PutThumbnailResponses];

export type GetAllSubmodelReferencesData = {
    body?: never;
    path?: never;
    query?: {
        /**
         * The maximum number of elements in the response array
         */
        limit?: number;
        /**
         * A server-generated identifier retrieved from pagingMetadata that specifies from which position the result listing should continue
         */
        cursor?: string;
    };
    url: '/aas/submodel-refs';
};

export type GetAllSubmodelReferencesErrors = {
    /**
     * Bad Request, e.g. the request parameters of the format of the request body is wrong.
     */
    400: Result;
    /**
     * Forbidden
     */
    403: Result;
    /**
     * Internal Server Error
     */
    500: Result;
    /**
     * Default error handling for unmentioned status codes
     */
    default: Result;
};

export type GetAllSubmodelReferencesError = GetAllSubmodelReferencesErrors[keyof GetAllSubmodelReferencesErrors];

export type GetAllSubmodelReferencesResponses = {
    /**
     * Requested submodel references
     */
    200: GetReferencesResult;
};

export type GetAllSubmodelReferencesResponse =
    GetAllSubmodelReferencesResponses[keyof GetAllSubmodelReferencesResponses];

export type PostSubmodelReferenceData = {
    /**
     * Reference to the Submodel
     */
    body: Reference;
    path?: never;
    query?: never;
    url: '/aas/submodel-refs';
};

export type PostSubmodelReferenceErrors = {
    /**
     * Bad Request, e.g. the request parameters of the format of the request body is wrong.
     */
    400: Result;
    /**
     * Forbidden
     */
    403: Result;
    /**
     * Conflict, a resource which shall be created exists already. Might be thrown if a Submodel or SubmodelElement with the same ShortId is contained in a POST request.
     */
    409: Result;
    /**
     * Internal Server Error
     */
    500: Result;
    /**
     * Default error handling for unmentioned status codes
     */
    default: Result;
};

export type PostSubmodelReferenceError = PostSubmodelReferenceErrors[keyof PostSubmodelReferenceErrors];

export type PostSubmodelReferenceResponses = {
    /**
     * Submodel reference created successfully
     */
    201: Reference;
};

export type PostSubmodelReferenceResponse = PostSubmodelReferenceResponses[keyof PostSubmodelReferenceResponses];

export type DeleteSubmodelReferenceByIdData = {
    body?: never;
    path: {
        /**
         * The Submodel’s unique id (UTF8-BASE64-URL-encoded)
         */
        submodelIdentifier: string;
    };
    query?: never;
    url: '/aas/submodel-refs/{submodelIdentifier}';
};

export type DeleteSubmodelReferenceByIdErrors = {
    /**
     * Bad Request, e.g. the request parameters of the format of the request body is wrong.
     */
    400: Result;
    /**
     * Forbidden
     */
    403: Result;
    /**
     * Not Found
     */
    404: Result;
    /**
     * Internal Server Error
     */
    500: Result;
    /**
     * Default error handling for unmentioned status codes
     */
    default: Result;
};

export type DeleteSubmodelReferenceByIdError =
    DeleteSubmodelReferenceByIdErrors[keyof DeleteSubmodelReferenceByIdErrors];

export type DeleteSubmodelReferenceByIdResponses = {
    /**
     * Submodel reference deleted successfully
     */
    204: void;
};

export type DeleteSubmodelReferenceByIdResponse =
    DeleteSubmodelReferenceByIdResponses[keyof DeleteSubmodelReferenceByIdResponses];

export type DeleteSubmodelByIdAasData = {
    body?: never;
    path: {
        /**
         * The Submodel’s unique id (UTF8-BASE64-URL-encoded)
         */
        submodelIdentifier: string;
    };
    query?: never;
    url: '/aas/submodels/{submodelIdentifier}';
};

export type DeleteSubmodelByIdAasErrors = {
    /**
     * Bad Request, e.g. the request parameters of the format of the request body is wrong.
     */
    400: Result;
    /**
     * Forbidden
     */
    403: Result;
    /**
     * Not Found
     */
    404: Result;
    /**
     * Internal Server Error
     */
    500: Result;
    /**
     * Default error handling for unmentioned status codes
     */
    default: Result;
};

export type DeleteSubmodelByIdAasError = DeleteSubmodelByIdAasErrors[keyof DeleteSubmodelByIdAasErrors];

export type DeleteSubmodelByIdAasResponses = {
    /**
     * Submodel deleted successfully
     */
    204: void;
};

export type DeleteSubmodelByIdAasResponse = DeleteSubmodelByIdAasResponses[keyof DeleteSubmodelByIdAasResponses];

export type GetSubmodelAasData = {
    body?: never;
    path: {
        /**
         * The Submodel’s unique id (UTF8-BASE64-URL-encoded)
         */
        submodelIdentifier: string;
    };
    query?: {
        /**
         * Determines the structural depth of the respective resource content
         */
        level?: 'deep' | 'core';
        /**
         * Determines to which extent the resource is being serialized
         */
        extent?: 'withBlobValue' | 'withoutBlobValue';
    };
    url: '/aas/submodels/{submodelIdentifier}';
};

export type GetSubmodelAasErrors = {
    /**
     * Bad Request, e.g. the request parameters of the format of the request body is wrong.
     */
    400: Result;
    /**
     * Forbidden
     */
    403: Result;
    /**
     * Not Found
     */
    404: Result;
    /**
     * Internal Server Error
     */
    500: Result;
    /**
     * Default error handling for unmentioned status codes
     */
    default: Result;
};

export type GetSubmodelAasError = GetSubmodelAasErrors[keyof GetSubmodelAasErrors];

export type GetSubmodelAasResponses = {
    /**
     * Requested Submodel
     */
    200: Submodel;
};

export type GetSubmodelAasResponse = GetSubmodelAasResponses[keyof GetSubmodelAasResponses];

export type PatchSubmodelAasData = {
    /**
     * Submodel object
     */
    body: Submodel;
    path: {
        /**
         * The Submodel’s unique id (UTF8-BASE64-URL-encoded)
         */
        submodelIdentifier: string;
    };
    query?: {
        /**
         * Determines the structural depth of the respective resource content
         */
        level?: 'core';
    };
    url: '/aas/submodels/{submodelIdentifier}';
};

export type PatchSubmodelAasErrors = {
    /**
     * Bad Request, e.g. the request parameters of the format of the request body is wrong.
     */
    400: Result;
    /**
     * Forbidden
     */
    403: Result;
    /**
     * Not Found
     */
    404: Result;
    /**
     * Internal Server Error
     */
    500: Result;
    /**
     * Default error handling for unmentioned status codes
     */
    default: Result;
};

export type PatchSubmodelAasError = PatchSubmodelAasErrors[keyof PatchSubmodelAasErrors];

export type PatchSubmodelAasResponses = {
    /**
     * Submodel updated successfully
     */
    204: void;
};

export type PatchSubmodelAasResponse = PatchSubmodelAasResponses[keyof PatchSubmodelAasResponses];

export type PutSubmodelAasData = {
    /**
     * Submodel object
     */
    body: Submodel;
    path: {
        /**
         * The Submodel’s unique id (UTF8-BASE64-URL-encoded)
         */
        submodelIdentifier: string;
    };
    query?: {
        /**
         * Determines the structural depth of the respective resource content
         */
        level?: 'deep';
    };
    url: '/aas/submodels/{submodelIdentifier}';
};

export type PutSubmodelAasErrors = {
    /**
     * Bad Request, e.g. the request parameters of the format of the request body is wrong.
     */
    400: Result;
    /**
     * Forbidden
     */
    403: Result;
    /**
     * Not Found
     */
    404: Result;
    /**
     * Internal Server Error
     */
    500: Result;
    /**
     * Default error handling for unmentioned status codes
     */
    default: Result;
};

export type PutSubmodelAasError = PutSubmodelAasErrors[keyof PutSubmodelAasErrors];

export type PutSubmodelAasResponses = {
    /**
     * Submodel updated successfully
     */
    204: void;
};

export type PutSubmodelAasResponse = PutSubmodelAasResponses[keyof PutSubmodelAasResponses];

export type GetSubmodelMetadataAasData = {
    body?: never;
    path: {
        /**
         * The Submodel’s unique id (UTF8-BASE64-URL-encoded)
         */
        submodelIdentifier: string;
    };
    query?: never;
    url: '/aas/submodels/{submodelIdentifier}/$metadata';
};

export type GetSubmodelMetadataAasErrors = {
    /**
     * Bad Request, e.g. the request parameters of the format of the request body is wrong.
     */
    400: Result;
    /**
     * Forbidden
     */
    403: Result;
    /**
     * Not Found
     */
    404: Result;
    /**
     * Internal Server Error
     */
    500: Result;
    /**
     * Default error handling for unmentioned status codes
     */
    default: Result;
};

export type GetSubmodelMetadataAasError = GetSubmodelMetadataAasErrors[keyof GetSubmodelMetadataAasErrors];

export type GetSubmodelMetadataAasResponses = {
    /**
     * Requested Submodel
     */
    200: SubmodelMetadata;
};

export type GetSubmodelMetadataAasResponse = GetSubmodelMetadataAasResponses[keyof GetSubmodelMetadataAasResponses];

export type PatchSubmodelMetadataAasData = {
    /**
     * Submodel object
     */
    body: SubmodelMetadata;
    path: {
        /**
         * The Submodel’s unique id (UTF8-BASE64-URL-encoded)
         */
        submodelIdentifier: string;
    };
    query?: never;
    url: '/aas/submodels/{submodelIdentifier}/$metadata';
};

export type PatchSubmodelMetadataAasErrors = {
    /**
     * Bad Request, e.g. the request parameters of the format of the request body is wrong.
     */
    400: Result;
    /**
     * Forbidden
     */
    403: Result;
    /**
     * Not Found
     */
    404: Result;
    /**
     * Internal Server Error
     */
    500: Result;
    /**
     * Default error handling for unmentioned status codes
     */
    default: Result;
};

export type PatchSubmodelMetadataAasError = PatchSubmodelMetadataAasErrors[keyof PatchSubmodelMetadataAasErrors];

export type PatchSubmodelMetadataAasResponses = {
    /**
     * Submodel updated successfully
     */
    204: void;
};

export type PatchSubmodelMetadataAasResponse =
    PatchSubmodelMetadataAasResponses[keyof PatchSubmodelMetadataAasResponses];

export type GetSubmodelValueOnlyAasData = {
    body?: never;
    path: {
        /**
         * The Submodel’s unique id (UTF8-BASE64-URL-encoded)
         */
        submodelIdentifier: string;
    };
    query?: {
        /**
         * Determines the structural depth of the respective resource content
         */
        level?: 'deep' | 'core';
        /**
         * Determines to which extent the resource is being serialized
         */
        extent?: 'withBlobValue' | 'withoutBlobValue';
    };
    url: '/aas/submodels/{submodelIdentifier}/$value';
};

export type GetSubmodelValueOnlyAasErrors = {
    /**
     * Bad Request, e.g. the request parameters of the format of the request body is wrong.
     */
    400: Result;
    /**
     * Forbidden
     */
    403: Result;
    /**
     * Not Found
     */
    404: Result;
    /**
     * Internal Server Error
     */
    500: Result;
    /**
     * Default error handling for unmentioned status codes
     */
    default: Result;
};

export type GetSubmodelValueOnlyAasError = GetSubmodelValueOnlyAasErrors[keyof GetSubmodelValueOnlyAasErrors];

export type GetSubmodelValueOnlyAasResponses = {
    /**
     * Requested Submodel
     */
    200: SubmodelValue;
};

export type GetSubmodelValueOnlyAasResponse = GetSubmodelValueOnlyAasResponses[keyof GetSubmodelValueOnlyAasResponses];

export type PatchSubmodelValueOnlyAasData = {
    /**
     * Submodel object in the ValueOnly representation
     */
    body: SubmodelValue;
    path: {
        /**
         * The Submodel’s unique id (UTF8-BASE64-URL-encoded)
         */
        submodelIdentifier: string;
    };
    query?: {
        /**
         * Determines the structural depth of the respective resource content
         */
        level?: 'core';
    };
    url: '/aas/submodels/{submodelIdentifier}/$value';
};

export type PatchSubmodelValueOnlyAasErrors = {
    /**
     * Bad Request, e.g. the request parameters of the format of the request body is wrong.
     */
    400: Result;
    /**
     * Forbidden
     */
    403: Result;
    /**
     * Not Found
     */
    404: Result;
    /**
     * Internal Server Error
     */
    500: Result;
    /**
     * Default error handling for unmentioned status codes
     */
    default: Result;
};

export type PatchSubmodelValueOnlyAasError = PatchSubmodelValueOnlyAasErrors[keyof PatchSubmodelValueOnlyAasErrors];

export type PatchSubmodelValueOnlyAasResponses = {
    /**
     * Submodel updated successfully
     */
    204: void;
};

export type PatchSubmodelValueOnlyAasResponse =
    PatchSubmodelValueOnlyAasResponses[keyof PatchSubmodelValueOnlyAasResponses];

export type GetSubmodelMetadataReferenceAasData = {
    body?: never;
    path: {
        /**
         * The Submodel’s unique id (UTF8-BASE64-URL-encoded)
         */
        submodelIdentifier: string;
    };
    query?: {
        /**
         * Determines the structural depth of the respective resource content
         */
        level?: 'core';
    };
    url: '/aas/submodels/{submodelIdentifier}/$reference';
};

export type GetSubmodelMetadataReferenceAasErrors = {
    /**
     * Bad Request, e.g. the request parameters of the format of the request body is wrong.
     */
    400: Result;
    /**
     * Forbidden
     */
    403: Result;
    /**
     * Not Found
     */
    404: Result;
    /**
     * Internal Server Error
     */
    500: Result;
    /**
     * Default error handling for unmentioned status codes
     */
    default: Result;
};

export type GetSubmodelMetadataReferenceAasError =
    GetSubmodelMetadataReferenceAasErrors[keyof GetSubmodelMetadataReferenceAasErrors];

export type GetSubmodelMetadataReferenceAasResponses = {
    /**
     * Requested Submodel as a Reference
     */
    200: Reference;
};

export type GetSubmodelMetadataReferenceAasResponse =
    GetSubmodelMetadataReferenceAasResponses[keyof GetSubmodelMetadataReferenceAasResponses];

export type GetSubmodelPathAasData = {
    body?: never;
    path: {
        /**
         * The Submodel’s unique id (UTF8-BASE64-URL-encoded)
         */
        submodelIdentifier: string;
    };
    query?: {
        /**
         * Determines the structural depth of the respective resource content
         */
        level?: 'deep' | 'core';
    };
    url: '/aas/submodels/{submodelIdentifier}/$path';
};

export type GetSubmodelPathAasErrors = {
    /**
     * Bad Request, e.g. the request parameters of the format of the request body is wrong.
     */
    400: Result;
    /**
     * Forbidden
     */
    403: Result;
    /**
     * Not Found
     */
    404: Result;
    /**
     * Internal Server Error
     */
    500: Result;
    /**
     * Default error handling for unmentioned status codes
     */
    default: Result;
};

export type GetSubmodelPathAasError = GetSubmodelPathAasErrors[keyof GetSubmodelPathAasErrors];

export type GetSubmodelPathAasResponses = {
    /**
     * Requested Submodel in Path notation
     */
    200: Array<PathItem>;
};

export type GetSubmodelPathAasResponse = GetSubmodelPathAasResponses[keyof GetSubmodelPathAasResponses];

export type GetAllSubmodelElementsAasData = {
    body?: never;
    path: {
        /**
         * The Submodel’s unique id (UTF8-BASE64-URL-encoded)
         */
        submodelIdentifier: string;
    };
    query?: {
        /**
         * The maximum number of elements in the response array
         */
        limit?: number;
        /**
         * A server-generated identifier retrieved from pagingMetadata that specifies from which position the result listing should continue
         */
        cursor?: string;
        /**
         * Determines the structural depth of the respective resource content
         */
        level?: 'deep' | 'core';
        /**
         * Determines to which extent the resource is being serialized
         */
        extent?: 'withBlobValue' | 'withoutBlobValue';
    };
    url: '/aas/submodels/{submodelIdentifier}/submodel-elements';
};

export type GetAllSubmodelElementsAasErrors = {
    /**
     * Bad Request, e.g. the request parameters of the format of the request body is wrong.
     */
    400: Result;
    /**
     * Forbidden
     */
    403: Result;
    /**
     * Not Found
     */
    404: Result;
    /**
     * Internal Server Error
     */
    500: Result;
    /**
     * Default error handling for unmentioned status codes
     */
    default: Result;
};

export type GetAllSubmodelElementsAasError = GetAllSubmodelElementsAasErrors[keyof GetAllSubmodelElementsAasErrors];

export type GetAllSubmodelElementsAasResponses = {
    /**
     * List of found submodel elements
     */
    200: GetSubmodelElementsResult;
};

export type GetAllSubmodelElementsAasResponse =
    GetAllSubmodelElementsAasResponses[keyof GetAllSubmodelElementsAasResponses];

export type PostSubmodelElementAasData = {
    /**
     * Requested submodel element
     */
    body: SubmodelElement;
    path: {
        /**
         * The Submodel’s unique id (UTF8-BASE64-URL-encoded)
         */
        submodelIdentifier: string;
    };
    query?: never;
    url: '/aas/submodels/{submodelIdentifier}/submodel-elements';
};

export type PostSubmodelElementAasErrors = {
    /**
     * Bad Request, e.g. the request parameters of the format of the request body is wrong.
     */
    400: Result;
    /**
     * Forbidden
     */
    403: Result;
    /**
     * Not Found
     */
    404: Result;
    /**
     * Conflict, a resource which shall be created exists already. Might be thrown if a Submodel or SubmodelElement with the same ShortId is contained in a POST request.
     */
    409: Result;
    /**
     * Internal Server Error
     */
    500: Result;
    /**
     * Default error handling for unmentioned status codes
     */
    default: Result;
};

export type PostSubmodelElementAasError = PostSubmodelElementAasErrors[keyof PostSubmodelElementAasErrors];

export type PostSubmodelElementAasResponses = {
    /**
     * Submodel element created successfully
     */
    201: SubmodelElement;
};

export type PostSubmodelElementAasResponse = PostSubmodelElementAasResponses[keyof PostSubmodelElementAasResponses];

export type GetAllSubmodelElementsMetadataAasData = {
    body?: never;
    path: {
        /**
         * The Submodel’s unique id (UTF8-BASE64-URL-encoded)
         */
        submodelIdentifier: string;
    };
    query?: {
        /**
         * The maximum number of elements in the response array
         */
        limit?: number;
        /**
         * A server-generated identifier retrieved from pagingMetadata that specifies from which position the result listing should continue
         */
        cursor?: string;
    };
    url: '/aas/submodels/{submodelIdentifier}/submodel-elements/$metadata';
};

export type GetAllSubmodelElementsMetadataAasErrors = {
    /**
     * Bad Request, e.g. the request parameters of the format of the request body is wrong.
     */
    400: Result;
    /**
     * Forbidden
     */
    403: Result;
    /**
     * Not Found
     */
    404: Result;
    /**
     * Internal Server Error
     */
    500: Result;
    /**
     * Default error handling for unmentioned status codes
     */
    default: Result;
};

export type GetAllSubmodelElementsMetadataAasError =
    GetAllSubmodelElementsMetadataAasErrors[keyof GetAllSubmodelElementsMetadataAasErrors];

export type GetAllSubmodelElementsMetadataAasResponses = {
    /**
     * List of found submodel elements
     */
    200: GetSubmodelElementsMetadataResult;
};

export type GetAllSubmodelElementsMetadataAasResponse =
    GetAllSubmodelElementsMetadataAasResponses[keyof GetAllSubmodelElementsMetadataAasResponses];

export type GetAllSubmodelElementsValueOnlyAasData = {
    body?: never;
    path: {
        /**
         * The Submodel’s unique id (UTF8-BASE64-URL-encoded)
         */
        submodelIdentifier: string;
    };
    query?: {
        /**
         * The maximum number of elements in the response array
         */
        limit?: number;
        /**
         * A server-generated identifier retrieved from pagingMetadata that specifies from which position the result listing should continue
         */
        cursor?: string;
        /**
         * Determines the structural depth of the respective resource content
         */
        level?: 'deep' | 'core';
        /**
         * Determines to which extent the resource is being serialized
         */
        extent?: 'withBlobValue' | 'withoutBlobValue';
    };
    url: '/aas/submodels/{submodelIdentifier}/submodel-elements/$value';
};

export type GetAllSubmodelElementsValueOnlyAasErrors = {
    /**
     * Bad Request, e.g. the request parameters of the format of the request body is wrong.
     */
    400: Result;
    /**
     * Forbidden
     */
    403: Result;
    /**
     * Not Found
     */
    404: Result;
    /**
     * Internal Server Error
     */
    500: Result;
    /**
     * Default error handling for unmentioned status codes
     */
    default: Result;
};

export type GetAllSubmodelElementsValueOnlyAasError =
    GetAllSubmodelElementsValueOnlyAasErrors[keyof GetAllSubmodelElementsValueOnlyAasErrors];

export type GetAllSubmodelElementsValueOnlyAasResponses = {
    /**
     * List of found submodel elements in their ValueOnly representation
     */
    200: GetSubmodelElementsValueResult;
};

export type GetAllSubmodelElementsValueOnlyAasResponse =
    GetAllSubmodelElementsValueOnlyAasResponses[keyof GetAllSubmodelElementsValueOnlyAasResponses];

export type GetAllSubmodelElementsReferenceAasData = {
    body?: never;
    path: {
        /**
         * The Submodel’s unique id (UTF8-BASE64-URL-encoded)
         */
        submodelIdentifier: string;
    };
    query?: {
        /**
         * The maximum number of elements in the response array
         */
        limit?: number;
        /**
         * A server-generated identifier retrieved from pagingMetadata that specifies from which position the result listing should continue
         */
        cursor?: string;
        /**
         * Determines the structural depth of the respective resource content
         */
        level?: 'core';
    };
    url: '/aas/submodels/{submodelIdentifier}/submodel-elements/$reference';
};

export type GetAllSubmodelElementsReferenceAasErrors = {
    /**
     * Bad Request, e.g. the request parameters of the format of the request body is wrong.
     */
    400: Result;
    /**
     * Forbidden
     */
    403: Result;
    /**
     * Not Found
     */
    404: Result;
    /**
     * Internal Server Error
     */
    500: Result;
    /**
     * Default error handling for unmentioned status codes
     */
    default: Result;
};

export type GetAllSubmodelElementsReferenceAasError =
    GetAllSubmodelElementsReferenceAasErrors[keyof GetAllSubmodelElementsReferenceAasErrors];

export type GetAllSubmodelElementsReferenceAasResponses = {
    /**
     * List of References of the found submodel elements
     */
    200: GetReferencesResult;
};

export type GetAllSubmodelElementsReferenceAasResponse =
    GetAllSubmodelElementsReferenceAasResponses[keyof GetAllSubmodelElementsReferenceAasResponses];

export type GetAllSubmodelElementsPathAasData = {
    body?: never;
    path: {
        /**
         * The Submodel’s unique id (UTF8-BASE64-URL-encoded)
         */
        submodelIdentifier: string;
    };
    query?: {
        /**
         * The maximum number of elements in the response array
         */
        limit?: number;
        /**
         * A server-generated identifier retrieved from pagingMetadata that specifies from which position the result listing should continue
         */
        cursor?: string;
        /**
         * Determines the structural depth of the respective resource content
         */
        level?: 'deep' | 'core';
    };
    url: '/aas/submodels/{submodelIdentifier}/submodel-elements/$path';
};

export type GetAllSubmodelElementsPathAasErrors = {
    /**
     * Bad Request, e.g. the request parameters of the format of the request body is wrong.
     */
    400: Result;
    /**
     * Forbidden
     */
    403: Result;
    /**
     * Not Found
     */
    404: Result;
    /**
     * Internal Server Error
     */
    500: Result;
    /**
     * Default error handling for unmentioned status codes
     */
    default: Result;
};

export type GetAllSubmodelElementsPathAasError =
    GetAllSubmodelElementsPathAasErrors[keyof GetAllSubmodelElementsPathAasErrors];

export type GetAllSubmodelElementsPathAasResponses = {
    /**
     * List of found submodel elements in the Path notation
     */
    200: GetPathItemsResult;
};

export type GetAllSubmodelElementsPathAasResponse =
    GetAllSubmodelElementsPathAasResponses[keyof GetAllSubmodelElementsPathAasResponses];

export type DeleteSubmodelElementByPathAasData = {
    body?: never;
    path: {
        /**
         * The Submodel’s unique id (UTF8-BASE64-URL-encoded)
         */
        submodelIdentifier: string;
        /**
         * IdShort path to the submodel element (dot-separated)
         */
        idShortPath: string;
    };
    query?: never;
    url: '/aas/submodels/{submodelIdentifier}/submodel-elements/{idShortPath}';
};

export type DeleteSubmodelElementByPathAasErrors = {
    /**
     * Bad Request, e.g. the request parameters of the format of the request body is wrong.
     */
    400: Result;
    /**
     * Forbidden
     */
    403: Result;
    /**
     * Not Found
     */
    404: Result;
    /**
     * Internal Server Error
     */
    500: Result;
    /**
     * Default error handling for unmentioned status codes
     */
    default: Result;
};

export type DeleteSubmodelElementByPathAasError =
    DeleteSubmodelElementByPathAasErrors[keyof DeleteSubmodelElementByPathAasErrors];

export type DeleteSubmodelElementByPathAasResponses = {
    /**
     * Submodel element deleted successfully
     */
    204: void;
};

export type DeleteSubmodelElementByPathAasResponse =
    DeleteSubmodelElementByPathAasResponses[keyof DeleteSubmodelElementByPathAasResponses];

export type GetSubmodelElementByPathAasData = {
    body?: never;
    path: {
        /**
         * The Submodel’s unique id (UTF8-BASE64-URL-encoded)
         */
        submodelIdentifier: string;
        /**
         * IdShort path to the submodel element (dot-separated)
         */
        idShortPath: string;
    };
    query?: {
        /**
         * Determines the structural depth of the respective resource content
         */
        level?: 'deep' | 'core';
        /**
         * Determines to which extent the resource is being serialized
         */
        extent?: 'withBlobValue' | 'withoutBlobValue';
    };
    url: '/aas/submodels/{submodelIdentifier}/submodel-elements/{idShortPath}';
};

export type GetSubmodelElementByPathAasErrors = {
    /**
     * Bad Request, e.g. the request parameters of the format of the request body is wrong.
     */
    400: Result;
    /**
     * Forbidden
     */
    403: Result;
    /**
     * Not Found
     */
    404: Result;
    /**
     * Internal Server Error
     */
    500: Result;
    /**
     * Default error handling for unmentioned status codes
     */
    default: Result;
};

export type GetSubmodelElementByPathAasError =
    GetSubmodelElementByPathAasErrors[keyof GetSubmodelElementByPathAasErrors];

export type GetSubmodelElementByPathAasResponses = {
    /**
     * Requested submodel element
     */
    200: SubmodelElement;
};

export type GetSubmodelElementByPathAasResponse =
    GetSubmodelElementByPathAasResponses[keyof GetSubmodelElementByPathAasResponses];

export type PatchSubmodelElementValueByPathAasData = {
    /**
     * The updated value of the submodel element
     */
    body: SubmodelElement;
    path: {
        /**
         * The Submodel’s unique id (UTF8-BASE64-URL-encoded)
         */
        submodelIdentifier: string;
        /**
         * IdShort path to the submodel element (dot-separated)
         */
        idShortPath: string;
    };
    query?: {
        /**
         * Determines the structural depth of the respective resource content
         */
        level?: 'deep' | 'core';
    };
    url: '/aas/submodels/{submodelIdentifier}/submodel-elements/{idShortPath}';
};

export type PatchSubmodelElementValueByPathAasErrors = {
    /**
     * Bad Request, e.g. the request parameters of the format of the request body is wrong.
     */
    400: Result;
    /**
     * Forbidden
     */
    403: Result;
    /**
     * Not Found
     */
    404: Result;
    /**
     * Internal Server Error
     */
    500: Result;
    /**
     * Default error handling for unmentioned status codes
     */
    default: Result;
};

export type PatchSubmodelElementValueByPathAasError =
    PatchSubmodelElementValueByPathAasErrors[keyof PatchSubmodelElementValueByPathAasErrors];

export type PatchSubmodelElementValueByPathAasResponses = {
    /**
     * Submodel element updated successfully
     */
    204: void;
};

export type PatchSubmodelElementValueByPathAasResponse =
    PatchSubmodelElementValueByPathAasResponses[keyof PatchSubmodelElementValueByPathAasResponses];

export type PostSubmodelElementByPathAasData = {
    /**
     * Requested submodel element
     */
    body: SubmodelElement;
    path: {
        /**
         * The Submodel’s unique id (UTF8-BASE64-URL-encoded)
         */
        submodelIdentifier: string;
        /**
         * IdShort path to the submodel element (dot-separated)
         */
        idShortPath: string;
    };
    query?: never;
    url: '/aas/submodels/{submodelIdentifier}/submodel-elements/{idShortPath}';
};

export type PostSubmodelElementByPathAasErrors = {
    /**
     * Bad Request, e.g. the request parameters of the format of the request body is wrong.
     */
    400: Result;
    /**
     * Forbidden
     */
    403: Result;
    /**
     * Not Found
     */
    404: Result;
    /**
     * Conflict, a resource which shall be created exists already. Might be thrown if a Submodel or SubmodelElement with the same ShortId is contained in a POST request.
     */
    409: Result;
    /**
     * Internal Server Error
     */
    500: Result;
    /**
     * Default error handling for unmentioned status codes
     */
    default: Result;
};

export type PostSubmodelElementByPathAasError =
    PostSubmodelElementByPathAasErrors[keyof PostSubmodelElementByPathAasErrors];

export type PostSubmodelElementByPathAasResponses = {
    /**
     * Submodel element created successfully
     */
    201: SubmodelElement;
};

export type PostSubmodelElementByPathAasResponse =
    PostSubmodelElementByPathAasResponses[keyof PostSubmodelElementByPathAasResponses];

export type PutSubmodelElementByPathAasData = {
    /**
     * Requested submodel element
     */
    body: SubmodelElement;
    path: {
        /**
         * The Submodel’s unique id (UTF8-BASE64-URL-encoded)
         */
        submodelIdentifier: string;
        /**
         * IdShort path to the submodel element (dot-separated)
         */
        idShortPath: string;
    };
    query?: never;
    url: '/aas/submodels/{submodelIdentifier}/submodel-elements/{idShortPath}';
};

export type PutSubmodelElementByPathAasErrors = {
    /**
     * Bad Request, e.g. the request parameters of the format of the request body is wrong.
     */
    400: Result;
    /**
     * Forbidden
     */
    403: Result;
    /**
     * Not Found
     */
    404: Result;
    /**
     * Internal Server Error
     */
    500: Result;
    /**
     * Default error handling for unmentioned status codes
     */
    default: Result;
};

export type PutSubmodelElementByPathAasError =
    PutSubmodelElementByPathAasErrors[keyof PutSubmodelElementByPathAasErrors];

export type PutSubmodelElementByPathAasResponses = {
    /**
     * Submodel element updated successfully
     */
    204: void;
};

export type PutSubmodelElementByPathAasResponse =
    PutSubmodelElementByPathAasResponses[keyof PutSubmodelElementByPathAasResponses];

export type GetSubmodelElementByPathMetadataAasData = {
    body?: never;
    path: {
        /**
         * The Submodel’s unique id (UTF8-BASE64-URL-encoded)
         */
        submodelIdentifier: string;
        /**
         * IdShort path to the submodel element (dot-separated)
         */
        idShortPath: string;
    };
    query?: never;
    url: '/aas/submodels/{submodelIdentifier}/submodel-elements/{idShortPath}/$metadata';
};

export type GetSubmodelElementByPathMetadataAasErrors = {
    /**
     * Bad Request, e.g. the request parameters of the format of the request body is wrong.
     */
    400: Result;
    /**
     * Forbidden
     */
    403: Result;
    /**
     * Not Found
     */
    404: Result;
    /**
     * Internal Server Error
     */
    500: Result;
    /**
     * Default error handling for unmentioned status codes
     */
    default: Result;
};

export type GetSubmodelElementByPathMetadataAasError =
    GetSubmodelElementByPathMetadataAasErrors[keyof GetSubmodelElementByPathMetadataAasErrors];

export type GetSubmodelElementByPathMetadataAasResponses = {
    /**
     * Requested submodel element
     */
    200: SubmodelElementMetadata;
};

export type GetSubmodelElementByPathMetadataAasResponse =
    GetSubmodelElementByPathMetadataAasResponses[keyof GetSubmodelElementByPathMetadataAasResponses];

export type PatchSubmodelElementValueByPathMetadataAasData = {
    /**
     * The updated metadata attributes of the submodel element
     */
    body: SubmodelElementMetadata;
    path: {
        /**
         * The Submodel’s unique id (UTF8-BASE64-URL-encoded)
         */
        submodelIdentifier: string;
        /**
         * IdShort path to the submodel element (dot-separated)
         */
        idShortPath: string;
    };
    query?: never;
    url: '/aas/submodels/{submodelIdentifier}/submodel-elements/{idShortPath}/$metadata';
};

export type PatchSubmodelElementValueByPathMetadataAasErrors = {
    /**
     * Bad Request, e.g. the request parameters of the format of the request body is wrong.
     */
    400: Result;
    /**
     * Forbidden
     */
    403: Result;
    /**
     * Not Found
     */
    404: Result;
    /**
     * Internal Server Error
     */
    500: Result;
    /**
     * Default error handling for unmentioned status codes
     */
    default: Result;
};

export type PatchSubmodelElementValueByPathMetadataAasError =
    PatchSubmodelElementValueByPathMetadataAasErrors[keyof PatchSubmodelElementValueByPathMetadataAasErrors];

export type PatchSubmodelElementValueByPathMetadataAasResponses = {
    /**
     * Submodel element updated successfully
     */
    204: void;
};

export type PatchSubmodelElementValueByPathMetadataAasResponse =
    PatchSubmodelElementValueByPathMetadataAasResponses[keyof PatchSubmodelElementValueByPathMetadataAasResponses];

export type GetSubmodelElementByPathValueOnlyAasData = {
    body?: never;
    path: {
        /**
         * The Submodel’s unique id (UTF8-BASE64-URL-encoded)
         */
        submodelIdentifier: string;
        /**
         * IdShort path to the submodel element (dot-separated)
         */
        idShortPath: string;
    };
    query?: {
        /**
         * Determines the structural depth of the respective resource content
         */
        level?: 'deep' | 'core';
    };
    url: '/aas/submodels/{submodelIdentifier}/submodel-elements/{idShortPath}/$value';
};

export type GetSubmodelElementByPathValueOnlyAasErrors = {
    /**
     * Bad Request, e.g. the request parameters of the format of the request body is wrong.
     */
    400: Result;
    /**
     * Forbidden
     */
    403: Result;
    /**
     * Not Found
     */
    404: Result;
    /**
     * Internal Server Error
     */
    500: Result;
    /**
     * Default error handling for unmentioned status codes
     */
    default: Result;
};

export type GetSubmodelElementByPathValueOnlyAasError =
    GetSubmodelElementByPathValueOnlyAasErrors[keyof GetSubmodelElementByPathValueOnlyAasErrors];

export type GetSubmodelElementByPathValueOnlyAasResponses = {
    /**
     * Requested submodel element in its ValueOnly representation
     */
    200: SubmodelElementValue;
};

export type GetSubmodelElementByPathValueOnlyAasResponse =
    GetSubmodelElementByPathValueOnlyAasResponses[keyof GetSubmodelElementByPathValueOnlyAasResponses];

export type PatchSubmodelElementValueByPathValueOnlyAasData = {
    /**
     * The updated value of the submodel element
     */
    body: SubmodelElementValue;
    path: {
        /**
         * The Submodel’s unique id (UTF8-BASE64-URL-encoded)
         */
        submodelIdentifier: string;
        /**
         * IdShort path to the submodel element (dot-separated)
         */
        idShortPath: string;
    };
    query?: {
        /**
         * Determines the structural depth of the respective resource content
         */
        level?: 'deep' | 'core';
    };
    url: '/aas/submodels/{submodelIdentifier}/submodel-elements/{idShortPath}/$value';
};

export type PatchSubmodelElementValueByPathValueOnlyAasErrors = {
    /**
     * Bad Request, e.g. the request parameters of the format of the request body is wrong.
     */
    400: Result;
    /**
     * Forbidden
     */
    403: Result;
    /**
     * Not Found
     */
    404: Result;
    /**
     * Internal Server Error
     */
    500: Result;
    /**
     * Default error handling for unmentioned status codes
     */
    default: Result;
};

export type PatchSubmodelElementValueByPathValueOnlyAasError =
    PatchSubmodelElementValueByPathValueOnlyAasErrors[keyof PatchSubmodelElementValueByPathValueOnlyAasErrors];

export type PatchSubmodelElementValueByPathValueOnlyAasResponses = {
    /**
     * Submodel element updated successfully
     */
    204: void;
};

export type PatchSubmodelElementValueByPathValueOnlyAasResponse =
    PatchSubmodelElementValueByPathValueOnlyAasResponses[keyof PatchSubmodelElementValueByPathValueOnlyAasResponses];

export type GetSubmodelElementByPathReferenceAasData = {
    body?: never;
    path: {
        /**
         * The Submodel’s unique id (UTF8-BASE64-URL-encoded)
         */
        submodelIdentifier: string;
        /**
         * IdShort path to the submodel element (dot-separated)
         */
        idShortPath: string;
    };
    query?: never;
    url: '/aas/submodels/{submodelIdentifier}/submodel-elements/{idShortPath}/$reference';
};

export type GetSubmodelElementByPathReferenceAasErrors = {
    /**
     * Bad Request, e.g. the request parameters of the format of the request body is wrong.
     */
    400: Result;
    /**
     * Forbidden
     */
    403: Result;
    /**
     * Not Found
     */
    404: Result;
    /**
     * Internal Server Error
     */
    500: Result;
    /**
     * Default error handling for unmentioned status codes
     */
    default: Result;
};

export type GetSubmodelElementByPathReferenceAasError =
    GetSubmodelElementByPathReferenceAasErrors[keyof GetSubmodelElementByPathReferenceAasErrors];

export type GetSubmodelElementByPathReferenceAasResponses = {
    /**
     * Requested submodel element in its ValueOnly representation
     */
    200: Reference;
};

export type GetSubmodelElementByPathReferenceAasResponse =
    GetSubmodelElementByPathReferenceAasResponses[keyof GetSubmodelElementByPathReferenceAasResponses];

export type GetSubmodelElementByPathPathAasData = {
    body?: never;
    path: {
        /**
         * The Submodel’s unique id (UTF8-BASE64-URL-encoded)
         */
        submodelIdentifier: string;
        /**
         * IdShort path to the submodel element (dot-separated)
         */
        idShortPath: string;
    };
    query?: {
        /**
         * Determines the structural depth of the respective resource content
         */
        level?: 'deep' | 'core';
    };
    url: '/aas/submodels/{submodelIdentifier}/submodel-elements/{idShortPath}/$path';
};

export type GetSubmodelElementByPathPathAasErrors = {
    /**
     * Bad Request, e.g. the request parameters of the format of the request body is wrong.
     */
    400: Result;
    /**
     * Forbidden
     */
    403: Result;
    /**
     * Not Found
     */
    404: Result;
    /**
     * Internal Server Error
     */
    500: Result;
    /**
     * Default error handling for unmentioned status codes
     */
    default: Result;
};

export type GetSubmodelElementByPathPathAasError =
    GetSubmodelElementByPathPathAasErrors[keyof GetSubmodelElementByPathPathAasErrors];

export type GetSubmodelElementByPathPathAasResponses = {
    /**
     * Requested submodel element in the Path notation
     */
    200: Array<PathItem>;
};

export type GetSubmodelElementByPathPathAasResponse =
    GetSubmodelElementByPathPathAasResponses[keyof GetSubmodelElementByPathPathAasResponses];

export type DeleteFileByPathAasData = {
    body?: never;
    path: {
        /**
         * The Submodel’s unique id (UTF8-BASE64-URL-encoded)
         */
        submodelIdentifier: string;
        /**
         * IdShort path to the submodel element (dot-separated)
         */
        idShortPath: string;
    };
    query?: never;
    url: '/aas/submodels/{submodelIdentifier}/submodel-elements/{idShortPath}/attachment';
};

export type DeleteFileByPathAasErrors = {
    /**
     * Bad Request, e.g. the request parameters of the format of the request body is wrong.
     */
    400: Result;
    /**
     * Forbidden
     */
    403: Result;
    /**
     * Not Found
     */
    404: Result;
    /**
     * Internal Server Error
     */
    500: Result;
    /**
     * Default error handling for unmentioned status codes
     */
    default: Result;
};

export type DeleteFileByPathAasError = DeleteFileByPathAasErrors[keyof DeleteFileByPathAasErrors];

export type DeleteFileByPathAasResponses = {
    /**
     * Submodel element updated successfully
     */
    200: unknown;
};

export type GetFileByPathAasData = {
    body?: never;
    path: {
        /**
         * The Submodel’s unique id (UTF8-BASE64-URL-encoded)
         */
        submodelIdentifier: string;
        /**
         * IdShort path to the submodel element (dot-separated)
         */
        idShortPath: string;
    };
    query?: never;
    url: '/aas/submodels/{submodelIdentifier}/submodel-elements/{idShortPath}/attachment';
};

export type GetFileByPathAasErrors = {
    /**
     * Bad Request, e.g. the request parameters of the format of the request body is wrong.
     */
    400: Result;
    /**
     * Forbidden
     */
    403: Result;
    /**
     * Not Found
     */
    404: Result;
    /**
     * Internal Server Error
     */
    500: Result;
    /**
     * Default error handling for unmentioned status codes
     */
    default: Result;
};

export type GetFileByPathAasError = GetFileByPathAasErrors[keyof GetFileByPathAasErrors];

export type GetFileByPathAasResponses = {
    /**
     * Requested file
     */
    200: Blob | File;
};

export type GetFileByPathAasResponse = GetFileByPathAasResponses[keyof GetFileByPathAasResponses];

export type PutFileByPathAasData = {
    /**
     * File to upload
     */
    body: IdShortPathAttachmentBody;
    path: {
        /**
         * The Submodel’s unique id (UTF8-BASE64-URL-encoded)
         */
        submodelIdentifier: string;
        /**
         * IdShort path to the submodel element (dot-separated)
         */
        idShortPath: string;
    };
    query?: never;
    url: '/aas/submodels/{submodelIdentifier}/submodel-elements/{idShortPath}/attachment';
};

export type PutFileByPathAasErrors = {
    /**
     * Bad Request, e.g. the request parameters of the format of the request body is wrong.
     */
    400: Result;
    /**
     * Forbidden
     */
    403: Result;
    /**
     * Not Found
     */
    404: Result;
    /**
     * Internal Server Error
     */
    500: Result;
    /**
     * Default error handling for unmentioned status codes
     */
    default: Result;
};

export type PutFileByPathAasError = PutFileByPathAasErrors[keyof PutFileByPathAasErrors];

export type PutFileByPathAasResponses = {
    /**
     * Submodel element updated successfully
     */
    204: void;
};

export type PutFileByPathAasResponse = PutFileByPathAasResponses[keyof PutFileByPathAasResponses];

export type InvokeOperationSyncAasData = {
    /**
     * Operation request object
     */
    body: OperationRequest;
    path: {
        /**
         * The Submodel’s unique id (UTF8-BASE64-URL-encoded)
         */
        submodelIdentifier: string;
        /**
         * IdShort path to the submodel element (dot-separated)
         */
        idShortPath: string;
    };
    query?: never;
    url: '/aas/submodels/{submodelIdentifier}/submodel-elements/{idShortPath}/invoke';
};

export type InvokeOperationSyncAasErrors = {
    /**
     * Bad Request, e.g. the request parameters of the format of the request body is wrong.
     */
    400: Result;
    /**
     * Forbidden
     */
    403: Result;
    /**
     * Not Found
     */
    404: Result;
    /**
     * Internal Server Error
     */
    500: Result;
    /**
     * Default error handling for unmentioned status codes
     */
    default: Result;
};

export type InvokeOperationSyncAasError = InvokeOperationSyncAasErrors[keyof InvokeOperationSyncAasErrors];

export type InvokeOperationSyncAasResponses = {
    /**
     * Operation result object
     */
    200: OperationResult;
};

export type InvokeOperationSyncAasResponse = InvokeOperationSyncAasResponses[keyof InvokeOperationSyncAasResponses];

export type InvokeOperationSyncValueOnlyAasData = {
    /**
     * Operation request object
     */
    body: OperationRequestValueOnly;
    path: {
        /**
         * The Submodel’s unique id (UTF8-BASE64-URL-encoded)
         */
        submodelIdentifier: string;
        /**
         * IdShort path to the submodel element (dot-separated)
         */
        idShortPath: string;
    };
    query?: never;
    url: '/aas/submodels/{submodelIdentifier}/submodel-elements/{idShortPath}/invoke/$value';
};

export type InvokeOperationSyncValueOnlyAasErrors = {
    /**
     * Bad Request, e.g. the request parameters of the format of the request body is wrong.
     */
    400: Result;
    /**
     * Forbidden
     */
    403: Result;
    /**
     * Not Found
     */
    404: Result;
    /**
     * Internal Server Error
     */
    500: Result;
    /**
     * Default error handling for unmentioned status codes
     */
    default: Result;
};

export type InvokeOperationSyncValueOnlyAasError =
    InvokeOperationSyncValueOnlyAasErrors[keyof InvokeOperationSyncValueOnlyAasErrors];

export type InvokeOperationSyncValueOnlyAasResponses = {
    /**
     * Operation result object
     */
    200: OperationResultValueOnly;
};

export type InvokeOperationSyncValueOnlyAasResponse =
    InvokeOperationSyncValueOnlyAasResponses[keyof InvokeOperationSyncValueOnlyAasResponses];

export type InvokeOperationAsyncAasData = {
    /**
     * Operation request object
     */
    body: OperationRequest;
    path: {
        /**
         * The Submodel’s unique id (UTF8-BASE64-URL-encoded)
         */
        submodelIdentifier: string;
        /**
         * IdShort path to the submodel element (dot-separated)
         */
        idShortPath: string;
    };
    query?: never;
    url: '/aas/submodels/{submodelIdentifier}/submodel-elements/{idShortPath}/invoke-async';
};

export type InvokeOperationAsyncAasErrors = {
    /**
     * Bad Request, e.g. the request parameters of the format of the request body is wrong.
     */
    400: Result;
    /**
     * Forbidden
     */
    403: Result;
    /**
     * Not Found
     */
    404: Result;
    /**
     * Internal Server Error
     */
    500: Result;
    /**
     * Default error handling for unmentioned status codes
     */
    default: Result;
};

export type InvokeOperationAsyncAasError = InvokeOperationAsyncAasErrors[keyof InvokeOperationAsyncAasErrors];

export type InvokeOperationAsyncAasResponses = {
    /**
     * The server has accepted the request.
     */
    202: unknown;
};

export type InvokeOperationAsyncValueOnlyAasData = {
    /**
     * Operation request object
     */
    body: OperationRequestValueOnly;
    path: {
        /**
         * The Submodel’s unique id (UTF8-BASE64-URL-encoded)
         */
        submodelIdentifier: string;
        /**
         * IdShort path to the submodel element (dot-separated)
         */
        idShortPath: string;
    };
    query?: never;
    url: '/aas/submodels/{submodelIdentifier}/submodel-elements/{idShortPath}/invoke-asnyc/$value';
};

export type InvokeOperationAsyncValueOnlyAasErrors = {
    /**
     * Bad Request, e.g. the request parameters of the format of the request body is wrong.
     */
    400: Result;
    /**
     * Forbidden
     */
    403: Result;
    /**
     * Not Found
     */
    404: Result;
    /**
     * Internal Server Error
     */
    500: Result;
    /**
     * Default error handling for unmentioned status codes
     */
    default: Result;
};

export type InvokeOperationAsyncValueOnlyAasError =
    InvokeOperationAsyncValueOnlyAasErrors[keyof InvokeOperationAsyncValueOnlyAasErrors];

export type InvokeOperationAsyncValueOnlyAasResponses = {
    /**
     * The server has accepted the request.
     */
    202: unknown;
};

export type GetOperationAsyncStatusAasData = {
    body?: never;
    path: {
        /**
         * The Submodel’s unique id (UTF8-BASE64-URL-encoded)
         */
        submodelIdentifier: string;
        /**
         * The Asset Administration Shell’s unique id (UTF8-BASE64-URL-encoded)
         */
        aasIdentifier: string;
        /**
         * IdShort path to the submodel element (dot-separated)
         */
        idShortPath: string;
        /**
         * The returned handle id of an operation’s asynchronous invocation used to request the current state of the operation’s execution (UTF8-BASE64-URL-encoded)
         */
        handleId: string;
    };
    query?: never;
    url: '/aas/submodels/{submodelIdentifier}/submodel-elements/{idShortPath}/operation-status/{handleId}';
};

export type GetOperationAsyncStatusAasErrors = {
    /**
     * Bad Request, e.g. the request parameters of the format of the request body is wrong.
     */
    400: Result;
    /**
     * Forbidden
     */
    403: Result;
    /**
     * Not Found
     */
    404: Result;
    /**
     * Internal Server Error
     */
    500: Result;
    /**
     * Default error handling for unmentioned status codes
     */
    default: Result;
};

export type GetOperationAsyncStatusAasError = GetOperationAsyncStatusAasErrors[keyof GetOperationAsyncStatusAasErrors];

export type GetOperationAsyncStatusAasResponses = {
    /**
     * Operation result object containing information that the 'executionState' is still 'Running'
     */
    200: BaseOperationResult;
};

export type GetOperationAsyncStatusAasResponse =
    GetOperationAsyncStatusAasResponses[keyof GetOperationAsyncStatusAasResponses];

export type GetOperationAsyncResultAasData = {
    body?: never;
    path: {
        /**
         * The Submodel’s unique id (UTF8-BASE64-URL-encoded)
         */
        submodelIdentifier: string;
        /**
         * The Asset Administration Shell’s unique id (UTF8-BASE64-URL-encoded)
         */
        aasIdentifier: string;
        /**
         * IdShort path to the submodel element (dot-separated)
         */
        idShortPath: string;
        /**
         * The returned handle id of an operation’s asynchronous invocation used to request the current state of the operation’s execution (UTF8-BASE64-URL-encoded)
         */
        handleId: string;
    };
    query?: never;
    url: '/aas/submodels/{submodelIdentifier}/submodel-elements/{idShortPath}/operation-results/{handleId}';
};

export type GetOperationAsyncResultAasErrors = {
    /**
     * Bad Request, e.g. the request parameters of the format of the request body is wrong.
     */
    400: Result;
    /**
     * Forbidden
     */
    403: Result;
    /**
     * Not Found
     */
    404: Result;
    /**
     * Internal Server Error
     */
    500: Result;
    /**
     * Default error handling for unmentioned status codes
     */
    default: Result;
};

export type GetOperationAsyncResultAasError = GetOperationAsyncResultAasErrors[keyof GetOperationAsyncResultAasErrors];

export type GetOperationAsyncResultAasResponses = {
    /**
     * Operation result object
     */
    200: OperationResult;
};

export type GetOperationAsyncResultAasResponse =
    GetOperationAsyncResultAasResponses[keyof GetOperationAsyncResultAasResponses];

export type GetOperationAsyncResultValueOnlyAasData = {
    body?: never;
    path: {
        /**
         * The Submodel’s unique id (UTF8-BASE64-URL-encoded)
         */
        submodelIdentifier: string;
        /**
         * The Asset Administration Shell’s unique id (UTF8-BASE64-URL-encoded)
         */
        aasIdentifier: string;
        /**
         * IdShort path to the submodel element (dot-separated)
         */
        idShortPath: string;
        /**
         * The returned handle id of an operation’s asynchronous invocation used to request the current state of the operation’s execution (UTF8-BASE64-URL-encoded)
         */
        handleId: string;
    };
    query?: never;
    url: '/aas/submodels/{submodelIdentifier}/submodel-elements/{idShortPath}/operation-results/{handleId}/$value';
};

export type GetOperationAsyncResultValueOnlyAasErrors = {
    /**
     * Bad Request, e.g. the request parameters of the format of the request body is wrong.
     */
    400: Result;
    /**
     * Forbidden
     */
    403: Result;
    /**
     * Not Found
     */
    404: Result;
    /**
     * Internal Server Error
     */
    500: Result;
    /**
     * Default error handling for unmentioned status codes
     */
    default: Result;
};

export type GetOperationAsyncResultValueOnlyAasError =
    GetOperationAsyncResultValueOnlyAasErrors[keyof GetOperationAsyncResultValueOnlyAasErrors];

export type GetOperationAsyncResultValueOnlyAasResponses = {
    /**
     * Operation result object
     */
    200: OperationResultValueOnly;
};

export type GetOperationAsyncResultValueOnlyAasResponse =
    GetOperationAsyncResultValueOnlyAasResponses[keyof GetOperationAsyncResultValueOnlyAasResponses];

export type GetSubmodelData = {
    body?: never;
    path?: never;
    query?: {
        /**
         * Determines the structural depth of the respective resource content
         */
        level?: 'deep' | 'core';
        /**
         * Determines to which extent the resource is being serialized
         */
        extent?: 'withBlobValue' | 'withoutBlobValue';
    };
    url: '/submodel';
};

export type GetSubmodelErrors = {
    /**
     * Bad Request, e.g. the request parameters of the format of the request body is wrong.
     */
    400: Result;
    /**
     * Forbidden
     */
    403: Result;
    /**
     * Internal Server Error
     */
    500: Result;
    /**
     * Default error handling for unmentioned status codes
     */
    default: Result;
};

export type GetSubmodelError = GetSubmodelErrors[keyof GetSubmodelErrors];

export type GetSubmodelResponses = {
    /**
     * Requested Submodel
     */
    200: Submodel;
};

export type GetSubmodelResponse = GetSubmodelResponses[keyof GetSubmodelResponses];

export type PatchSubmodelData = {
    /**
     * Submodel object
     */
    body: Submodel;
    path?: never;
    query?: {
        /**
         * Determines the structural depth of the respective resource content
         */
        level?: 'core';
    };
    url: '/submodel';
};

export type PatchSubmodelErrors = {
    /**
     * Bad Request, e.g. the request parameters of the format of the request body is wrong.
     */
    400: Result;
    /**
     * Forbidden
     */
    403: Result;
    /**
     * Internal Server Error
     */
    500: Result;
    /**
     * Default error handling for unmentioned status codes
     */
    default: Result;
};

export type PatchSubmodelError = PatchSubmodelErrors[keyof PatchSubmodelErrors];

export type PatchSubmodelResponses = {
    /**
     * Submodel updated successfully
     */
    204: void;
};

export type PatchSubmodelResponse = PatchSubmodelResponses[keyof PatchSubmodelResponses];

export type PutSubmodelData = {
    /**
     * Submodel object
     */
    body: Submodel;
    path?: never;
    query?: {
        /**
         * Determines the structural depth of the respective resource content
         */
        level?: 'deep';
    };
    url: '/submodel';
};

export type PutSubmodelErrors = {
    /**
     * Bad Request, e.g. the request parameters of the format of the request body is wrong.
     */
    400: Result;
    /**
     * Forbidden
     */
    403: Result;
    /**
     * Internal Server Error
     */
    500: Result;
    /**
     * Default error handling for unmentioned status codes
     */
    default: Result;
};

export type PutSubmodelError = PutSubmodelErrors[keyof PutSubmodelErrors];

export type PutSubmodelResponses = {
    /**
     * Submodel updated successfully
     */
    204: void;
};

export type PutSubmodelResponse = PutSubmodelResponses[keyof PutSubmodelResponses];

export type GetSubmodelMetadataData = {
    body?: never;
    path?: never;
    query?: never;
    url: '/submodel/$metadata';
};

export type GetSubmodelMetadataErrors = {
    /**
     * Bad Request, e.g. the request parameters of the format of the request body is wrong.
     */
    400: Result;
    /**
     * Forbidden
     */
    403: Result;
    /**
     * Internal Server Error
     */
    500: Result;
    /**
     * Default error handling for unmentioned status codes
     */
    default: Result;
};

export type GetSubmodelMetadataError = GetSubmodelMetadataErrors[keyof GetSubmodelMetadataErrors];

export type GetSubmodelMetadataResponses = {
    /**
     * Requested Submodel in the metadata representation
     */
    200: SubmodelMetadata;
};

export type GetSubmodelMetadataResponse = GetSubmodelMetadataResponses[keyof GetSubmodelMetadataResponses];

export type PatchSubmodelMetadataData = {
    /**
     * The metadata attributes of the Submodel object
     */
    body: SubmodelMetadata;
    path?: never;
    query?: never;
    url: '/submodel/$metadata';
};

export type PatchSubmodelMetadataErrors = {
    /**
     * Bad Request, e.g. the request parameters of the format of the request body is wrong.
     */
    400: Result;
    /**
     * Forbidden
     */
    403: Result;
    /**
     * Internal Server Error
     */
    500: Result;
    /**
     * Default error handling for unmentioned status codes
     */
    default: Result;
};

export type PatchSubmodelMetadataError = PatchSubmodelMetadataErrors[keyof PatchSubmodelMetadataErrors];

export type PatchSubmodelMetadataResponses = {
    /**
     * Submodel updated successfully
     */
    204: void;
};

export type PatchSubmodelMetadataResponse = PatchSubmodelMetadataResponses[keyof PatchSubmodelMetadataResponses];

export type GetSubmodelValueOnlyData = {
    body?: never;
    path?: never;
    query?: {
        /**
         * Determines the structural depth of the respective resource content
         */
        level?: 'deep' | 'core';
        /**
         * Determines to which extent the resource is being serialized
         */
        extent?: 'withBlobValue' | 'withoutBlobValue';
    };
    url: '/submodel/$value';
};

export type GetSubmodelValueOnlyErrors = {
    /**
     * Bad Request, e.g. the request parameters of the format of the request body is wrong.
     */
    400: Result;
    /**
     * Forbidden
     */
    403: Result;
    /**
     * Internal Server Error
     */
    500: Result;
    /**
     * Default error handling for unmentioned status codes
     */
    default: Result;
};

export type GetSubmodelValueOnlyError = GetSubmodelValueOnlyErrors[keyof GetSubmodelValueOnlyErrors];

export type GetSubmodelValueOnlyResponses = {
    /**
     * ValueOnly representation of the Submodel
     */
    200: SubmodelValue;
};

export type GetSubmodelValueOnlyResponse = GetSubmodelValueOnlyResponses[keyof GetSubmodelValueOnlyResponses];

export type PatchSubmodelValueOnlyData = {
    /**
     * Submodel object in its ValueOnly representation
     */
    body: SubmodelValue;
    path?: never;
    query?: {
        /**
         * Determines the structural depth of the respective resource content
         */
        level?: 'core';
    };
    url: '/submodel/$value';
};

export type PatchSubmodelValueOnlyErrors = {
    /**
     * Bad Request, e.g. the request parameters of the format of the request body is wrong.
     */
    400: Result;
    /**
     * Forbidden
     */
    403: Result;
    /**
     * Internal Server Error
     */
    500: Result;
    /**
     * Default error handling for unmentioned status codes
     */
    default: Result;
};

export type PatchSubmodelValueOnlyError = PatchSubmodelValueOnlyErrors[keyof PatchSubmodelValueOnlyErrors];

export type PatchSubmodelValueOnlyResponses = {
    /**
     * Submodel updated successfully
     */
    204: void;
};

export type PatchSubmodelValueOnlyResponse = PatchSubmodelValueOnlyResponses[keyof PatchSubmodelValueOnlyResponses];

export type GetSubmodelReferenceData = {
    body?: never;
    path?: never;
    query?: {
        /**
         * Determines the structural depth of the respective resource content
         */
        level?: 'core';
    };
    url: '/submodel/$reference';
};

export type GetSubmodelReferenceErrors = {
    /**
     * Bad Request, e.g. the request parameters of the format of the request body is wrong.
     */
    400: Result;
    /**
     * Forbidden
     */
    403: Result;
    /**
     * Internal Server Error
     */
    500: Result;
    /**
     * Default error handling for unmentioned status codes
     */
    default: Result;
};

export type GetSubmodelReferenceError = GetSubmodelReferenceErrors[keyof GetSubmodelReferenceErrors];

export type GetSubmodelReferenceResponses = {
    /**
     * Requested Reference
     */
    200: Reference;
};

export type GetSubmodelReferenceResponse = GetSubmodelReferenceResponses[keyof GetSubmodelReferenceResponses];

export type GetSubmodelPathData = {
    body?: never;
    path?: never;
    query?: {
        /**
         * Determines the structural depth of the respective resource content
         */
        level?: 'deep' | 'core';
    };
    url: '/submodel/$path';
};

export type GetSubmodelPathErrors = {
    /**
     * Bad Request, e.g. the request parameters of the format of the request body is wrong.
     */
    400: Result;
    /**
     * Forbidden
     */
    403: Result;
    /**
     * Internal Server Error
     */
    500: Result;
    /**
     * Default error handling for unmentioned status codes
     */
    default: Result;
};

export type GetSubmodelPathError = GetSubmodelPathErrors[keyof GetSubmodelPathErrors];

export type GetSubmodelPathResponses = {
    /**
     * Submodel in Path notation
     */
    200: Array<PathItem>;
};

export type GetSubmodelPathResponse = GetSubmodelPathResponses[keyof GetSubmodelPathResponses];

export type GetAllSubmodelElementsData = {
    body?: never;
    path?: never;
    query?: {
        /**
         * The maximum number of elements in the response array
         */
        limit?: number;
        /**
         * A server-generated identifier retrieved from pagingMetadata that specifies from which position the result listing should continue
         */
        cursor?: string;
        /**
         * Determines the structural depth of the respective resource content
         */
        level?: 'deep' | 'core';
        /**
         * Determines to which extent the resource is being serialized
         */
        extent?: 'withBlobValue' | 'withoutBlobValue';
    };
    url: '/submodel/submodel-elements';
};

export type GetAllSubmodelElementsErrors = {
    /**
     * Bad Request, e.g. the request parameters of the format of the request body is wrong.
     */
    400: Result;
    /**
     * Forbidden
     */
    403: Result;
    /**
     * Internal Server Error
     */
    500: Result;
    /**
     * Default error handling for unmentioned status codes
     */
    default: Result;
};

export type GetAllSubmodelElementsError = GetAllSubmodelElementsErrors[keyof GetAllSubmodelElementsErrors];

export type GetAllSubmodelElementsResponses = {
    /**
     * List of found submodel elements
     */
    200: GetSubmodelElementsResult;
};

export type GetAllSubmodelElementsResponse = GetAllSubmodelElementsResponses[keyof GetAllSubmodelElementsResponses];

export type PostSubmodelElementData = {
    /**
     * Requested submodel element
     */
    body: SubmodelElement;
    path?: never;
    query?: never;
    url: '/submodel/submodel-elements';
};

export type PostSubmodelElementErrors = {
    /**
     * Bad Request, e.g. the request parameters of the format of the request body is wrong.
     */
    400: Result;
    /**
     * Forbidden
     */
    403: Result;
    /**
     * Conflict, a resource which shall be created exists already. Might be thrown if a Submodel or SubmodelElement with the same ShortId is contained in a POST request.
     */
    409: Result;
    /**
     * Internal Server Error
     */
    500: Result;
    /**
     * Default error handling for unmentioned status codes
     */
    default: Result;
};

export type PostSubmodelElementError = PostSubmodelElementErrors[keyof PostSubmodelElementErrors];

export type PostSubmodelElementResponses = {
    /**
     * Submodel element created successfully
     */
    201: SubmodelElement;
};

export type PostSubmodelElementResponse = PostSubmodelElementResponses[keyof PostSubmodelElementResponses];

export type GetAllSubmodelElementsMetadataData = {
    body?: never;
    path?: never;
    query?: {
        /**
         * The maximum number of elements in the response array
         */
        limit?: number;
        /**
         * A server-generated identifier retrieved from pagingMetadata that specifies from which position the result listing should continue
         */
        cursor?: string;
    };
    url: '/submodel/submodel-elements/$metadata';
};

export type GetAllSubmodelElementsMetadataErrors = {
    /**
     * Bad Request, e.g. the request parameters of the format of the request body is wrong.
     */
    400: Result;
    /**
     * Forbidden
     */
    403: Result;
    /**
     * Internal Server Error
     */
    500: Result;
    /**
     * Default error handling for unmentioned status codes
     */
    default: Result;
};

export type GetAllSubmodelElementsMetadataError =
    GetAllSubmodelElementsMetadataErrors[keyof GetAllSubmodelElementsMetadataErrors];

export type GetAllSubmodelElementsMetadataResponses = {
    /**
     * List of found submodel elements
     */
    200: GetSubmodelElementsMetadataResult;
};

export type GetAllSubmodelElementsMetadataResponse =
    GetAllSubmodelElementsMetadataResponses[keyof GetAllSubmodelElementsMetadataResponses];

export type GetAllSubmodelElementsValueOnlyData = {
    body?: never;
    path?: never;
    query?: {
        /**
         * The maximum number of elements in the response array
         */
        limit?: number;
        /**
         * A server-generated identifier retrieved from pagingMetadata that specifies from which position the result listing should continue
         */
        cursor?: string;
        /**
         * Determines the structural depth of the respective resource content
         */
        level?: 'deep' | 'core';
        /**
         * Determines to which extent the resource is being serialized
         */
        extent?: 'withBlobValue' | 'withoutBlobValue';
    };
    url: '/submodel/submodel-elements/$value';
};

export type GetAllSubmodelElementsValueOnlyErrors = {
    /**
     * Bad Request, e.g. the request parameters of the format of the request body is wrong.
     */
    400: Result;
    /**
     * Forbidden
     */
    403: Result;
    /**
     * Internal Server Error
     */
    500: Result;
    /**
     * Default error handling for unmentioned status codes
     */
    default: Result;
};

export type GetAllSubmodelElementsValueOnlyError =
    GetAllSubmodelElementsValueOnlyErrors[keyof GetAllSubmodelElementsValueOnlyErrors];

export type GetAllSubmodelElementsValueOnlyResponses = {
    /**
     * List of found submodel elements
     */
    200: GetSubmodelElementsValueResult;
};

export type GetAllSubmodelElementsValueOnlyResponse =
    GetAllSubmodelElementsValueOnlyResponses[keyof GetAllSubmodelElementsValueOnlyResponses];

export type GetAllSubmodelElementsReferenceData = {
    body?: never;
    path?: never;
    query?: {
        /**
         * The maximum number of elements in the response array
         */
        limit?: number;
        /**
         * A server-generated identifier retrieved from pagingMetadata that specifies from which position the result listing should continue
         */
        cursor?: string;
        /**
         * Determines the structural depth of the respective resource content
         */
        level?: 'core';
    };
    url: '/submodel/submodel-elements/$reference';
};

export type GetAllSubmodelElementsReferenceErrors = {
    /**
     * Bad Request, e.g. the request parameters of the format of the request body is wrong.
     */
    400: Result;
    /**
     * Forbidden
     */
    403: Result;
    /**
     * Internal Server Error
     */
    500: Result;
    /**
     * Default error handling for unmentioned status codes
     */
    default: Result;
};

export type GetAllSubmodelElementsReferenceError =
    GetAllSubmodelElementsReferenceErrors[keyof GetAllSubmodelElementsReferenceErrors];

export type GetAllSubmodelElementsReferenceResponses = {
    /**
     * List of found submodel elements
     */
    200: GetReferencesResult;
};

export type GetAllSubmodelElementsReferenceResponse =
    GetAllSubmodelElementsReferenceResponses[keyof GetAllSubmodelElementsReferenceResponses];

export type GetAllSubmodelElementsPathData = {
    body?: never;
    path?: never;
    query?: {
        /**
         * The maximum number of elements in the response array
         */
        limit?: number;
        /**
         * A server-generated identifier retrieved from pagingMetadata that specifies from which position the result listing should continue
         */
        cursor?: string;
        /**
         * Determines the structural depth of the respective resource content
         */
        level?: 'deep' | 'core';
    };
    url: '/submodel/submodel-elements/$path';
};

export type GetAllSubmodelElementsPathErrors = {
    /**
     * Bad Request, e.g. the request parameters of the format of the request body is wrong.
     */
    400: Result;
    /**
     * Forbidden
     */
    403: Result;
    /**
     * Internal Server Error
     */
    500: Result;
    /**
     * Default error handling for unmentioned status codes
     */
    default: Result;
};

export type GetAllSubmodelElementsPathError = GetAllSubmodelElementsPathErrors[keyof GetAllSubmodelElementsPathErrors];

export type GetAllSubmodelElementsPathResponses = {
    /**
     * List of found submodel elements in the Path notation
     */
    200: GetPathItemsResult;
};

export type GetAllSubmodelElementsPathResponse =
    GetAllSubmodelElementsPathResponses[keyof GetAllSubmodelElementsPathResponses];

export type DeleteSubmodelElementByPathData = {
    body?: never;
    path: {
        /**
         * IdShort path to the submodel element (dot-separated)
         */
        idShortPath: string;
    };
    query?: never;
    url: '/submodel/submodel-elements/{idShortPath}';
};

export type DeleteSubmodelElementByPathErrors = {
    /**
     * Bad Request, e.g. the request parameters of the format of the request body is wrong.
     */
    400: Result;
    /**
     * Forbidden
     */
    403: Result;
    /**
     * Not Found
     */
    404: Result;
    /**
     * Internal Server Error
     */
    500: Result;
    /**
     * Default error handling for unmentioned status codes
     */
    default: Result;
};

export type DeleteSubmodelElementByPathError =
    DeleteSubmodelElementByPathErrors[keyof DeleteSubmodelElementByPathErrors];

export type DeleteSubmodelElementByPathResponses = {
    /**
     * Submodel element deleted successfully
     */
    204: void;
};

export type DeleteSubmodelElementByPathResponse =
    DeleteSubmodelElementByPathResponses[keyof DeleteSubmodelElementByPathResponses];

export type GetSubmodelElementByPathData = {
    body?: never;
    path: {
        /**
         * IdShort path to the submodel element (dot-separated)
         */
        idShortPath: string;
    };
    query?: {
        /**
         * Determines the structural depth of the respective resource content
         */
        level?: 'deep' | 'core';
        /**
         * Determines to which extent the resource is being serialized
         */
        extent?: 'withBlobValue' | 'withoutBlobValue';
    };
    url: '/submodel/submodel-elements/{idShortPath}';
};

export type GetSubmodelElementByPathErrors = {
    /**
     * Bad Request, e.g. the request parameters of the format of the request body is wrong.
     */
    400: Result;
    /**
     * Forbidden
     */
    403: Result;
    /**
     * Not Found
     */
    404: Result;
    /**
     * Internal Server Error
     */
    500: Result;
    /**
     * Default error handling for unmentioned status codes
     */
    default: Result;
};

export type GetSubmodelElementByPathError = GetSubmodelElementByPathErrors[keyof GetSubmodelElementByPathErrors];

export type GetSubmodelElementByPathResponses = {
    /**
     * Requested submodel element
     */
    200: SubmodelElement;
};

export type GetSubmodelElementByPathResponse =
    GetSubmodelElementByPathResponses[keyof GetSubmodelElementByPathResponses];

export type PatchSubmodelElementByPathData = {
    /**
     * SubmodelElement object
     */
    body: SubmodelElement;
    path: {
        /**
         * IdShort path to the submodel element (dot-separated)
         */
        idShortPath: string;
    };
    query?: {
        /**
         * Determines the structural depth of the respective resource content
         */
        level?: 'core';
    };
    url: '/submodel/submodel-elements/{idShortPath}';
};

export type PatchSubmodelElementByPathErrors = {
    /**
     * Bad Request, e.g. the request parameters of the format of the request body is wrong.
     */
    400: Result;
    /**
     * Forbidden
     */
    403: Result;
    /**
     * Not Found
     */
    404: Result;
    /**
     * Internal Server Error
     */
    500: Result;
    /**
     * Default error handling for unmentioned status codes
     */
    default: Result;
};

export type PatchSubmodelElementByPathError = PatchSubmodelElementByPathErrors[keyof PatchSubmodelElementByPathErrors];

export type PatchSubmodelElementByPathResponses = {
    /**
     * SubmodelElement updated successfully
     */
    204: void;
};

export type PatchSubmodelElementByPathResponse =
    PatchSubmodelElementByPathResponses[keyof PatchSubmodelElementByPathResponses];

export type PostSubmodelElementByPathData = {
    /**
     * Requested submodel element
     */
    body: SubmodelElement;
    path: {
        /**
         * IdShort path to the submodel element (dot-separated)
         */
        idShortPath: string;
    };
    query?: never;
    url: '/submodel/submodel-elements/{idShortPath}';
};

export type PostSubmodelElementByPathErrors = {
    /**
     * Bad Request, e.g. the request parameters of the format of the request body is wrong.
     */
    400: Result;
    /**
     * Forbidden
     */
    403: Result;
    /**
     * Not Found
     */
    404: Result;
    /**
     * Conflict, a resource which shall be created exists already. Might be thrown if a Submodel or SubmodelElement with the same ShortId is contained in a POST request.
     */
    409: Result;
    /**
     * Internal Server Error
     */
    500: Result;
    /**
     * Default error handling for unmentioned status codes
     */
    default: Result;
};

export type PostSubmodelElementByPathError = PostSubmodelElementByPathErrors[keyof PostSubmodelElementByPathErrors];

export type PostSubmodelElementByPathResponses = {
    /**
     * Submodel element created successfully
     */
    201: SubmodelElement;
};

export type PostSubmodelElementByPathResponse =
    PostSubmodelElementByPathResponses[keyof PostSubmodelElementByPathResponses];

export type PutSubmodelElementByPathData = {
    /**
     * Requested submodel element
     */
    body: SubmodelElement;
    path: {
        /**
         * IdShort path to the submodel element (dot-separated)
         */
        idShortPath: string;
    };
    query?: {
        /**
         * Determines the structural depth of the respective resource content
         */
        level?: 'deep';
    };
    url: '/submodel/submodel-elements/{idShortPath}';
};

export type PutSubmodelElementByPathErrors = {
    /**
     * Bad Request, e.g. the request parameters of the format of the request body is wrong.
     */
    400: Result;
    /**
     * Forbidden
     */
    403: Result;
    /**
     * Not Found
     */
    404: Result;
    /**
     * Internal Server Error
     */
    500: Result;
    /**
     * Default error handling for unmentioned status codes
     */
    default: Result;
};

export type PutSubmodelElementByPathError = PutSubmodelElementByPathErrors[keyof PutSubmodelElementByPathErrors];

export type PutSubmodelElementByPathResponses = {
    /**
     * Submodel element updated successfully
     */
    204: void;
};

export type PutSubmodelElementByPathResponse =
    PutSubmodelElementByPathResponses[keyof PutSubmodelElementByPathResponses];

export type GetSubmodelElementByPathMetadataData = {
    body?: never;
    path: {
        /**
         * IdShort path to the submodel element (dot-separated)
         */
        idShortPath: string;
    };
    query?: never;
    url: '/submodel/submodel-elements/{idShortPath}/$metadata';
};

export type GetSubmodelElementByPathMetadataErrors = {
    /**
     * Bad Request, e.g. the request parameters of the format of the request body is wrong.
     */
    400: Result;
    /**
     * Forbidden
     */
    403: Result;
    /**
     * Not Found
     */
    404: Result;
    /**
     * Internal Server Error
     */
    500: Result;
    /**
     * Default error handling for unmentioned status codes
     */
    default: Result;
};

export type GetSubmodelElementByPathMetadataError =
    GetSubmodelElementByPathMetadataErrors[keyof GetSubmodelElementByPathMetadataErrors];

export type GetSubmodelElementByPathMetadataResponses = {
    /**
     * Metadata attributes of the requested submodel element
     */
    200: SubmodelElementMetadata;
};

export type GetSubmodelElementByPathMetadataResponse =
    GetSubmodelElementByPathMetadataResponses[keyof GetSubmodelElementByPathMetadataResponses];

export type PatchSubmodelElementByPathMetadataData = {
    /**
     * Metadata attributes of the SubmodelElement
     */
    body: GetSubmodelElementsMetadataResult;
    path: {
        /**
         * IdShort path to the submodel element (dot-separated)
         */
        idShortPath: string;
    };
    query?: {
        /**
         * The maximum number of elements in the response array
         */
        limit?: number;
        /**
         * A server-generated identifier retrieved from pagingMetadata that specifies from which position the result listing should continue
         */
        cursor?: string;
    };
    url: '/submodel/submodel-elements/{idShortPath}/$metadata';
};

export type PatchSubmodelElementByPathMetadataErrors = {
    /**
     * Bad Request, e.g. the request parameters of the format of the request body is wrong.
     */
    400: Result;
    /**
     * Forbidden
     */
    403: Result;
    /**
     * Not Found
     */
    404: Result;
    /**
     * Internal Server Error
     */
    500: Result;
    /**
     * Default error handling for unmentioned status codes
     */
    default: Result;
};

export type PatchSubmodelElementByPathMetadataError =
    PatchSubmodelElementByPathMetadataErrors[keyof PatchSubmodelElementByPathMetadataErrors];

export type PatchSubmodelElementByPathMetadataResponses = {
    /**
     * SubmodelElement updated successfully
     */
    204: void;
};

export type PatchSubmodelElementByPathMetadataResponse =
    PatchSubmodelElementByPathMetadataResponses[keyof PatchSubmodelElementByPathMetadataResponses];

export type GetSubmodelElementByPathValueOnlyData = {
    body?: never;
    path: {
        /**
         * IdShort path to the submodel element (dot-separated)
         */
        idShortPath: string;
    };
    query?: {
        /**
         * Determines the structural depth of the respective resource content
         */
        level?: 'deep' | 'core';
        /**
         * Determines to which extent the resource is being serialized
         */
        extent?: 'withBlobValue' | 'withoutBlobValue';
    };
    url: '/submodel/submodel-elements/{idShortPath}/$value';
};

export type GetSubmodelElementByPathValueOnlyErrors = {
    /**
     * Bad Request, e.g. the request parameters of the format of the request body is wrong.
     */
    400: Result;
    /**
     * Forbidden
     */
    403: Result;
    /**
     * Not Found
     */
    404: Result;
    /**
     * Internal Server Error
     */
    500: Result;
    /**
     * Default error handling for unmentioned status codes
     */
    default: Result;
};

export type GetSubmodelElementByPathValueOnlyError =
    GetSubmodelElementByPathValueOnlyErrors[keyof GetSubmodelElementByPathValueOnlyErrors];

export type GetSubmodelElementByPathValueOnlyResponses = {
    /**
     * Requested submodel element
     */
    200: SubmodelElementValue;
};

export type GetSubmodelElementByPathValueOnlyResponse =
    GetSubmodelElementByPathValueOnlyResponses[keyof GetSubmodelElementByPathValueOnlyResponses];

export type PatchSubmodelElementByPathValueOnlyData = {
    /**
     * The SubmodelElement in its ValueOnly representation
     */
    body: GetSubmodelElementsValueResult;
    path: {
        /**
         * IdShort path to the submodel element (dot-separated)
         */
        idShortPath: string;
    };
    query?: {
        /**
         * The maximum number of elements in the response array
         */
        limit?: number;
        /**
         * A server-generated identifier retrieved from pagingMetadata that specifies from which position the result listing should continue
         */
        cursor?: string;
        /**
         * Determines the structural depth of the respective resource content
         */
        level?: 'core';
    };
    url: '/submodel/submodel-elements/{idShortPath}/$value';
};

export type PatchSubmodelElementByPathValueOnlyErrors = {
    /**
     * Bad Request, e.g. the request parameters of the format of the request body is wrong.
     */
    400: Result;
    /**
     * Forbidden
     */
    403: Result;
    /**
     * Not Found
     */
    404: Result;
    /**
     * Internal Server Error
     */
    500: Result;
    /**
     * Default error handling for unmentioned status codes
     */
    default: Result;
};

export type PatchSubmodelElementByPathValueOnlyError =
    PatchSubmodelElementByPathValueOnlyErrors[keyof PatchSubmodelElementByPathValueOnlyErrors];

export type PatchSubmodelElementByPathValueOnlyResponses = {
    /**
     * Submodel updated successfully
     */
    204: void;
};

export type PatchSubmodelElementByPathValueOnlyResponse =
    PatchSubmodelElementByPathValueOnlyResponses[keyof PatchSubmodelElementByPathValueOnlyResponses];

export type GetSubmodelElementByPathReferenceData = {
    body?: never;
    path: {
        /**
         * IdShort path to the submodel element (dot-separated)
         */
        idShortPath: string;
    };
    query?: never;
    url: '/submodel/submodel-elements/{idShortPath}/$reference';
};

export type GetSubmodelElementByPathReferenceErrors = {
    /**
     * Bad Request, e.g. the request parameters of the format of the request body is wrong.
     */
    400: Result;
    /**
     * Forbidden
     */
    403: Result;
    /**
     * Not Found
     */
    404: Result;
    /**
     * Internal Server Error
     */
    500: Result;
    /**
     * Default error handling for unmentioned status codes
     */
    default: Result;
};

export type GetSubmodelElementByPathReferenceError =
    GetSubmodelElementByPathReferenceErrors[keyof GetSubmodelElementByPathReferenceErrors];

export type GetSubmodelElementByPathReferenceResponses = {
    /**
     * A Reference of the requested submodel element
     */
    200: Reference;
};

export type GetSubmodelElementByPathReferenceResponse =
    GetSubmodelElementByPathReferenceResponses[keyof GetSubmodelElementByPathReferenceResponses];

export type GetSubmodelElementByPathPathData = {
    body?: never;
    path: {
        /**
         * IdShort path to the submodel element (dot-separated)
         */
        idShortPath: string;
    };
    query?: {
        /**
         * Determines the structural depth of the respective resource content
         */
        level?: 'deep' | 'core';
    };
    url: '/submodel/submodel-elements/{idShortPath}/$path';
};

export type GetSubmodelElementByPathPathErrors = {
    /**
     * Bad Request, e.g. the request parameters of the format of the request body is wrong.
     */
    400: Result;
    /**
     * Forbidden
     */
    403: Result;
    /**
     * Not Found
     */
    404: Result;
    /**
     * Internal Server Error
     */
    500: Result;
    /**
     * Default error handling for unmentioned status codes
     */
    default: Result;
};

export type GetSubmodelElementByPathPathError =
    GetSubmodelElementByPathPathErrors[keyof GetSubmodelElementByPathPathErrors];

export type GetSubmodelElementByPathPathResponses = {
    /**
     * Requested submodel element in path notation.
     */
    200: Array<PathItem>;
};

export type GetSubmodelElementByPathPathResponse =
    GetSubmodelElementByPathPathResponses[keyof GetSubmodelElementByPathPathResponses];

export type DeleteFileByPathData = {
    body?: never;
    path: {
        /**
         * IdShort path to the submodel element (dot-separated)
         */
        idShortPath: string;
    };
    query?: never;
    url: '/submodel/submodel-elements/{idShortPath}/attachment';
};

export type DeleteFileByPathErrors = {
    /**
     * Bad Request, e.g. the request parameters of the format of the request body is wrong.
     */
    400: Result;
    /**
     * Forbidden
     */
    403: Result;
    /**
     * Not Found
     */
    404: Result;
    /**
     * Internal Server Error
     */
    500: Result;
    /**
     * Default error handling for unmentioned status codes
     */
    default: Result;
};

export type DeleteFileByPathError = DeleteFileByPathErrors[keyof DeleteFileByPathErrors];

export type DeleteFileByPathResponses = {
    /**
     * Submodel element updated successfully
     */
    200: unknown;
};

export type GetFileByPathData = {
    body?: never;
    path: {
        /**
         * IdShort path to the submodel element (dot-separated)
         */
        idShortPath: string;
    };
    query?: never;
    url: '/submodel/submodel-elements/{idShortPath}/attachment';
};

export type GetFileByPathErrors = {
    /**
     * Bad Request, e.g. the request parameters of the format of the request body is wrong.
     */
    400: Result;
    /**
     * Forbidden
     */
    403: Result;
    /**
     * Not Found
     */
    404: Result;
    /**
     * Method not allowed - Download only valid for File submodel element
     */
    405: Result;
    /**
     * Internal Server Error
     */
    500: Result;
    /**
     * Default error handling for unmentioned status codes
     */
    default: Result;
};

export type GetFileByPathError = GetFileByPathErrors[keyof GetFileByPathErrors];

export type GetFileByPathResponses = {
    /**
     * Requested file
     */
    200: Blob | File;
};

export type GetFileByPathResponse = GetFileByPathResponses[keyof GetFileByPathResponses];

export type PutFileByPathData = {
    /**
     * File to upload
     */
    body: IdShortPathAttachmentBody1;
    path: {
        /**
         * IdShort path to the submodel element (dot-separated)
         */
        idShortPath: string;
    };
    query?: never;
    url: '/submodel/submodel-elements/{idShortPath}/attachment';
};

export type PutFileByPathErrors = {
    /**
     * Bad Request, e.g. the request parameters of the format of the request body is wrong.
     */
    400: Result;
    /**
     * Forbidden
     */
    403: Result;
    /**
     * Not Found
     */
    404: Result;
    /**
     * Method not allowed - Upload only valid for File submodel element
     */
    405: Result;
    /**
     * Internal Server Error
     */
    500: Result;
    /**
     * Default error handling for unmentioned status codes
     */
    default: Result;
};

export type PutFileByPathError = PutFileByPathErrors[keyof PutFileByPathErrors];

export type PutFileByPathResponses = {
    /**
     * Submodel element updated successfully
     */
    204: void;
};

export type PutFileByPathResponse = PutFileByPathResponses[keyof PutFileByPathResponses];

export type InvokeOperationData = {
    /**
     * Operation request object
     */
    body: OperationRequest;
    path: {
        /**
         * IdShort path to the submodel element (dot-separated)
         */
        idShortPath: string;
    };
    query?: never;
    url: '/submodel/submodel-elements/{idShortPath}/invoke';
};

export type InvokeOperationErrors = {
    /**
     * Bad Request, e.g. the request parameters of the format of the request body is wrong.
     */
    400: Result;
    /**
     * Forbidden
     */
    403: Result;
    /**
     * Not Found
     */
    404: Result;
    /**
     * Method not allowed - Invoke only valid for Operation submodel element
     */
    405: Result;
    /**
     * Internal Server Error
     */
    500: Result;
    /**
     * Default error handling for unmentioned status codes
     */
    default: Result;
};

export type InvokeOperationError = InvokeOperationErrors[keyof InvokeOperationErrors];

export type InvokeOperationResponses = {
    /**
     * Operation result object
     */
    200: OperationResult;
};

export type InvokeOperationResponse = InvokeOperationResponses[keyof InvokeOperationResponses];

export type InvokeOperationAsyncData = {
    /**
     * Operation request object
     */
    body: OperationRequest;
    path: {
        /**
         * IdShort path to the submodel element (dot-separated)
         */
        idShortPath: string;
    };
    query?: never;
    url: '/submodel/submodel-elements/{idShortPath}/invoke-async';
};

export type InvokeOperationAsyncErrors = {
    /**
     * Bad Request, e.g. the request parameters of the format of the request body is wrong.
     */
    400: Result;
    /**
     * Forbidden
     */
    403: Result;
    /**
     * Not Found
     */
    404: Result;
    /**
     * Method not allowed - Invoke only valid for Operation submodel element
     */
    405: Result;
    /**
     * Internal Server Error
     */
    500: Result;
    /**
     * Default error handling for unmentioned status codes
     */
    default: Result;
};

export type InvokeOperationAsyncError = InvokeOperationAsyncErrors[keyof InvokeOperationAsyncErrors];

export type InvokeOperationAsyncResponses = {
    /**
     * The server has accepted the request.
     */
    202: unknown;
};

export type InvokeOperationSyncValueOnlyData = {
    /**
     * Operation request object
     */
    body: OperationRequestValueOnly;
    path: {
        /**
         * IdShort path to the submodel element (dot-separated)
         */
        idShortPath: string;
    };
    query?: never;
    url: '/submodel/submodel-elements/{idShortPath}/invoke/$value';
};

export type InvokeOperationSyncValueOnlyErrors = {
    /**
     * Bad Request, e.g. the request parameters of the format of the request body is wrong.
     */
    400: Result;
    /**
     * Forbidden
     */
    403: Result;
    /**
     * Not Found
     */
    404: Result;
    /**
     * Method not allowed - Invoke only valid for Operation submodel element
     */
    405: Result;
    /**
     * Internal Server Error
     */
    500: Result;
    /**
     * Default error handling for unmentioned status codes
     */
    default: Result;
};

export type InvokeOperationSyncValueOnlyError =
    InvokeOperationSyncValueOnlyErrors[keyof InvokeOperationSyncValueOnlyErrors];

export type InvokeOperationSyncValueOnlyResponses = {
    /**
     * Operation result object
     */
    200: OperationResultValueOnly;
};

export type InvokeOperationSyncValueOnlyResponse =
    InvokeOperationSyncValueOnlyResponses[keyof InvokeOperationSyncValueOnlyResponses];

export type InvokeOperationAsyncValueOnlyData = {
    /**
     * Operation request object
     */
    body: OperationRequestValueOnly;
    path: {
        /**
         * IdShort path to the submodel element (dot-separated)
         */
        idShortPath: string;
    };
    query?: never;
    url: '/submodel/submodel-elements/{idShortPath}/invoke-async/$value';
};

export type InvokeOperationAsyncValueOnlyErrors = {
    /**
     * Bad Request, e.g. the request parameters of the format of the request body is wrong.
     */
    400: Result;
    /**
     * Forbidden
     */
    403: Result;
    /**
     * Not Found
     */
    404: Result;
    /**
     * Method not allowed - Invoke only valid for Operation submodel element
     */
    405: Result;
    /**
     * Internal Server Error
     */
    500: Result;
    /**
     * Default error handling for unmentioned status codes
     */
    default: Result;
};

export type InvokeOperationAsyncValueOnlyError =
    InvokeOperationAsyncValueOnlyErrors[keyof InvokeOperationAsyncValueOnlyErrors];

export type InvokeOperationAsyncValueOnlyResponses = {
    /**
     * The server has accepted the request.
     */
    202: unknown;
};

export type GetOperationAsyncStatusData = {
    body?: never;
    path: {
        /**
         * IdShort path to the submodel element (dot-separated)
         */
        idShortPath: string;
        /**
         * The returned handle id of an operation’s asynchronous invocation used to request the current state of the operation’s execution (UTF8-BASE64-URL-encoded)
         */
        handleId: string;
    };
    query?: never;
    url: '/submodel/submodel-elements/{idShortPath}/operation-status/{handleId}';
};

export type GetOperationAsyncStatusErrors = {
    /**
     * Bad Request, e.g. the request parameters of the format of the request body is wrong.
     */
    400: Result;
    /**
     * Forbidden
     */
    403: Result;
    /**
     * Not Found
     */
    404: Result;
    /**
     * Internal Server Error
     */
    500: Result;
    /**
     * Default error handling for unmentioned status codes
     */
    default: Result;
};

export type GetOperationAsyncStatusError = GetOperationAsyncStatusErrors[keyof GetOperationAsyncStatusErrors];

export type GetOperationAsyncStatusResponses = {
    /**
     * Operation result object containing information that the 'executionState' is still 'Running'
     */
    200: BaseOperationResult;
};

export type GetOperationAsyncStatusResponse = GetOperationAsyncStatusResponses[keyof GetOperationAsyncStatusResponses];

export type GetOperationAsyncResultData = {
    body?: never;
    path: {
        /**
         * IdShort path to the submodel element (dot-separated)
         */
        idShortPath: string;
        /**
         * The returned handle id of an operation’s asynchronous invocation used to request the current state of the operation’s execution (UTF8-BASE64-URL-encoded)
         */
        handleId: string;
    };
    query?: never;
    url: '/submodel/submodel-elements/{idShortPath}/operation-results/{handleId}';
};

export type GetOperationAsyncResultErrors = {
    /**
     * Bad Request, e.g. the request parameters of the format of the request body is wrong.
     */
    400: Result;
    /**
     * Forbidden
     */
    403: Result;
    /**
     * Not Found
     */
    404: Result;
    /**
     * Internal Server Error
     */
    500: Result;
    /**
     * Default error handling for unmentioned status codes
     */
    default: Result;
};

export type GetOperationAsyncResultError = GetOperationAsyncResultErrors[keyof GetOperationAsyncResultErrors];

export type GetOperationAsyncResultResponses = {
    /**
     * Operation result object
     */
    200: OperationResult;
};

export type GetOperationAsyncResultResponse = GetOperationAsyncResultResponses[keyof GetOperationAsyncResultResponses];

export type GetOperationAsyncResultValueOnlyData = {
    body?: never;
    path: {
        /**
         * IdShort path to the submodel element (dot-separated)
         */
        idShortPath: string;
        /**
         * The returned handle id of an operation’s asynchronous invocation used to request the current state of the operation’s execution (UTF8-BASE64-URL-encoded)
         */
        handleId: string;
    };
    query?: never;
    url: '/submodel/submodel-elements/{idShortPath}/operation-results/{handleId}/$value';
};

export type GetOperationAsyncResultValueOnlyErrors = {
    /**
     * Bad Request, e.g. the request parameters of the format of the request body is wrong.
     */
    400: Result;
    /**
     * Forbidden
     */
    403: Result;
    /**
     * Not Found
     */
    404: Result;
    /**
     * Internal Server Error
     */
    500: Result;
    /**
     * Default error handling for unmentioned status codes
     */
    default: Result;
};

export type GetOperationAsyncResultValueOnlyError =
    GetOperationAsyncResultValueOnlyErrors[keyof GetOperationAsyncResultValueOnlyErrors];

export type GetOperationAsyncResultValueOnlyResponses = {
    /**
     * Operation result object
     */
    200: OperationResultValueOnly;
};

export type GetOperationAsyncResultValueOnlyResponse =
    GetOperationAsyncResultValueOnlyResponses[keyof GetOperationAsyncResultValueOnlyResponses];

export type GetAllAssetAdministrationShellsData = {
    body?: never;
    path?: never;
    query?: {
        /**
         * A list of specific Asset identifiers. Every single value asset identifier is a base64-url-encoded [SpecificAssetId](https://api.swaggerhub.com/domains/Plattform_i40/Part1-MetaModel-Schemas/V3.0.3#/components/schemas/SpecificAssetId).
         */
        assetIds?: Array<string>;
        /**
         * The Asset Administration Shell’s IdShort
         */
        idShort?: string;
        /**
         * The maximum number of elements in the response array
         */
        limit?: number;
        /**
         * A server-generated identifier retrieved from pagingMetadata that specifies from which position the result listing should continue
         */
        cursor?: string;
    };
    url: '/shells';
};

export type GetAllAssetAdministrationShellsErrors = {
    /**
     * Bad Request, e.g. the request parameters of the format of the request body is wrong.
     */
    400: Result;
    /**
     * Unauthorized, e.g. the server refused the authorization attempt.
     */
    401: Result;
    /**
     * Forbidden
     */
    403: Result;
    /**
     * Internal Server Error
     */
    500: Result;
    /**
     * Default error handling for unmentioned status codes
     */
    default: Result;
};

export type GetAllAssetAdministrationShellsError =
    GetAllAssetAdministrationShellsErrors[keyof GetAllAssetAdministrationShellsErrors];

export type GetAllAssetAdministrationShellsResponses = {
    /**
     * Requested Asset Administration Shells
     */
    200: GetAssetAdministrationShellsResult;
};

export type GetAllAssetAdministrationShellsResponse =
    GetAllAssetAdministrationShellsResponses[keyof GetAllAssetAdministrationShellsResponses];

export type PostAssetAdministrationShellData = {
    /**
     * Asset Administration Shell object
     */
    body: AssetAdministrationShell;
    path?: never;
    query?: never;
    url: '/shells';
};

export type PostAssetAdministrationShellErrors = {
    /**
     * Bad Request, e.g. the request parameters of the format of the request body is wrong.
     */
    400: Result;
    /**
     * Unauthorized, e.g. the server refused the authorization attempt.
     */
    401: Result;
    /**
     * Forbidden
     */
    403: Result;
    /**
     * Conflict, a resource which shall be created exists already. Might be thrown if a Submodel or SubmodelElement with the same ShortId is contained in a POST request.
     */
    409: Result;
    /**
     * Internal Server Error
     */
    500: Result;
    /**
     * Default error handling for unmentioned status codes
     */
    default: Result;
};

export type PostAssetAdministrationShellError =
    PostAssetAdministrationShellErrors[keyof PostAssetAdministrationShellErrors];

export type PostAssetAdministrationShellResponses = {
    /**
     * Asset Administration Shell created successfully
     */
    201: AssetAdministrationShell;
};

export type PostAssetAdministrationShellResponse =
    PostAssetAdministrationShellResponses[keyof PostAssetAdministrationShellResponses];

export type GetAllAssetAdministrationShellsReferenceData = {
    body?: never;
    path?: never;
    query?: {
        /**
         * A list of specific Asset identifiers. Every single value asset identifier is a base64-url-encoded [SpecificAssetId](https://api.swaggerhub.com/domains/Plattform_i40/Part1-MetaModel-Schemas/V3.0.3#/components/schemas/SpecificAssetId).
         */
        assetIds?: Array<string>;
        /**
         * The Asset Administration Shell’s IdShort
         */
        idShort?: string;
        /**
         * The maximum number of elements in the response array
         */
        limit?: number;
        /**
         * A server-generated identifier retrieved from pagingMetadata that specifies from which position the result listing should continue
         */
        cursor?: string;
    };
    url: '/shells/$reference';
};

export type GetAllAssetAdministrationShellsReferenceErrors = {
    /**
     * Bad Request, e.g. the request parameters of the format of the request body is wrong.
     */
    400: Result;
    /**
     * Unauthorized, e.g. the server refused the authorization attempt.
     */
    401: Result;
    /**
     * Forbidden
     */
    403: Result;
    /**
     * Internal Server Error
     */
    500: Result;
    /**
     * Default error handling for unmentioned status codes
     */
    default: Result;
};

export type GetAllAssetAdministrationShellsReferenceError =
    GetAllAssetAdministrationShellsReferenceErrors[keyof GetAllAssetAdministrationShellsReferenceErrors];

export type GetAllAssetAdministrationShellsReferenceResponses = {
    /**
     * Requested Asset Administration Shells as a list of References
     */
    200: GetReferencesResult;
};

export type GetAllAssetAdministrationShellsReferenceResponse =
    GetAllAssetAdministrationShellsReferenceResponses[keyof GetAllAssetAdministrationShellsReferenceResponses];

export type DeleteAssetAdministrationShellByIdData = {
    body?: never;
    path: {
        /**
         * The Asset Administration Shell’s unique id (UTF8-BASE64-URL-encoded)
         */
        aasIdentifier: string;
    };
    query?: never;
    url: '/shells/{aasIdentifier}';
};

export type DeleteAssetAdministrationShellByIdErrors = {
    /**
     * Unauthorized, e.g. the server refused the authorization attempt.
     */
    401: Result;
    /**
     * Forbidden
     */
    403: Result;
    /**
     * Not Found
     */
    404: Result;
    /**
     * Internal Server Error
     */
    500: Result;
    /**
     * Default error handling for unmentioned status codes
     */
    default: Result;
};

export type DeleteAssetAdministrationShellByIdError =
    DeleteAssetAdministrationShellByIdErrors[keyof DeleteAssetAdministrationShellByIdErrors];

export type DeleteAssetAdministrationShellByIdResponses = {
    /**
     * Asset Administration Shell deleted successfully
     */
    204: void;
};

export type DeleteAssetAdministrationShellByIdResponse =
    DeleteAssetAdministrationShellByIdResponses[keyof DeleteAssetAdministrationShellByIdResponses];

export type GetAssetAdministrationShellByIdData = {
    body?: never;
    path: {
        /**
         * The Asset Administration Shell’s unique id (UTF8-BASE64-URL-encoded)
         */
        aasIdentifier: string;
    };
    query?: never;
    url: '/shells/{aasIdentifier}';
};

export type GetAssetAdministrationShellByIdErrors = {
    /**
     * Bad Request, e.g. the request parameters of the format of the request body is wrong.
     */
    400: Result;
    /**
     * Unauthorized, e.g. the server refused the authorization attempt.
     */
    401: Result;
    /**
     * Forbidden
     */
    403: Result;
    /**
     * Not Found
     */
    404: Result;
    /**
     * Internal Server Error
     */
    500: Result;
    /**
     * Default error handling for unmentioned status codes
     */
    default: Result;
};

export type GetAssetAdministrationShellByIdError =
    GetAssetAdministrationShellByIdErrors[keyof GetAssetAdministrationShellByIdErrors];

export type GetAssetAdministrationShellByIdResponses = {
    /**
     * Requested Asset Administration Shell
     */
    200: AssetAdministrationShell;
};

export type GetAssetAdministrationShellByIdResponse =
    GetAssetAdministrationShellByIdResponses[keyof GetAssetAdministrationShellByIdResponses];

export type PutAssetAdministrationShellByIdData = {
    /**
     * Asset Administration Shell object
     */
    body: AssetAdministrationShell;
    path: {
        /**
         * The Asset Administration Shell’s unique id (UTF8-BASE64-URL-encoded)
         */
        aasIdentifier: string;
    };
    query?: never;
    url: '/shells/{aasIdentifier}';
};

export type PutAssetAdministrationShellByIdErrors = {
    /**
     * Bad Request, e.g. the request parameters of the format of the request body is wrong.
     */
    400: Result;
    /**
     * Unauthorized, e.g. the server refused the authorization attempt.
     */
    401: Result;
    /**
     * Forbidden
     */
    403: Result;
    /**
     * Not Found
     */
    404: Result;
    /**
     * Internal Server Error
     */
    500: Result;
    /**
     * Default error handling for unmentioned status codes
     */
    default: Result;
};

export type PutAssetAdministrationShellByIdError =
    PutAssetAdministrationShellByIdErrors[keyof PutAssetAdministrationShellByIdErrors];

export type PutAssetAdministrationShellByIdResponses = {
    /**
     * Asset Administration Shell updated successfully
     */
    204: void;
};

export type PutAssetAdministrationShellByIdResponse =
    PutAssetAdministrationShellByIdResponses[keyof PutAssetAdministrationShellByIdResponses];

export type GetAssetAdministrationShellByIdReferenceAasRepositoryData = {
    body?: never;
    path: {
        /**
         * The Asset Administration Shell’s unique id (UTF8-BASE64-URL-encoded)
         */
        aasIdentifier: string;
    };
    query?: never;
    url: '/shells/{aasIdentifier}/$reference';
};

export type GetAssetAdministrationShellByIdReferenceAasRepositoryErrors = {
    /**
     * Bad Request, e.g. the request parameters of the format of the request body is wrong.
     */
    400: Result;
    /**
     * Unauthorized, e.g. the server refused the authorization attempt.
     */
    401: Result;
    /**
     * Forbidden
     */
    403: Result;
    /**
     * Not Found
     */
    404: Result;
    /**
     * Internal Server Error
     */
    500: Result;
    /**
     * Default error handling for unmentioned status codes
     */
    default: Result;
};

export type GetAssetAdministrationShellByIdReferenceAasRepositoryError =
    GetAssetAdministrationShellByIdReferenceAasRepositoryErrors[keyof GetAssetAdministrationShellByIdReferenceAasRepositoryErrors];

export type GetAssetAdministrationShellByIdReferenceAasRepositoryResponses = {
    /**
     * Requested Asset Administration Shell
     */
    200: Reference;
};

export type GetAssetAdministrationShellByIdReferenceAasRepositoryResponse =
    GetAssetAdministrationShellByIdReferenceAasRepositoryResponses[keyof GetAssetAdministrationShellByIdReferenceAasRepositoryResponses];

export type GetAssetInformationAasRepositoryData = {
    body?: never;
    path: {
        /**
         * The Asset Administration Shell’s unique id (UTF8-BASE64-URL-encoded)
         */
        aasIdentifier: string;
    };
    query?: never;
    url: '/shells/{aasIdentifier}/asset-information';
};

export type GetAssetInformationAasRepositoryErrors = {
    /**
     * Bad Request, e.g. the request parameters of the format of the request body is wrong.
     */
    400: Result;
    /**
     * Unauthorized, e.g. the server refused the authorization attempt.
     */
    401: Result;
    /**
     * Forbidden
     */
    403: Result;
    /**
     * Not Found
     */
    404: Result;
    /**
     * Internal Server Error
     */
    500: Result;
    /**
     * Default error handling for unmentioned status codes
     */
    default: Result;
};

export type GetAssetInformationAasRepositoryError =
    GetAssetInformationAasRepositoryErrors[keyof GetAssetInformationAasRepositoryErrors];

export type GetAssetInformationAasRepositoryResponses = {
    /**
     * Requested Asset Information
     */
    200: AssetInformation;
};

export type GetAssetInformationAasRepositoryResponse =
    GetAssetInformationAasRepositoryResponses[keyof GetAssetInformationAasRepositoryResponses];

export type PutAssetInformationAasRepositoryData = {
    /**
     * Asset Information object
     */
    body: AssetInformation;
    path: {
        /**
         * The Asset Administration Shell’s unique id (UTF8-BASE64-URL-encoded)
         */
        aasIdentifier: string;
    };
    query?: never;
    url: '/shells/{aasIdentifier}/asset-information';
};

export type PutAssetInformationAasRepositoryErrors = {
    /**
     * Bad Request, e.g. the request parameters of the format of the request body is wrong.
     */
    400: Result;
    /**
     * Unauthorized, e.g. the server refused the authorization attempt.
     */
    401: Result;
    /**
     * Forbidden
     */
    403: Result;
    /**
     * Not Found
     */
    404: Result;
    /**
     * Internal Server Error
     */
    500: Result;
    /**
     * Default error handling for unmentioned status codes
     */
    default: Result;
};

export type PutAssetInformationAasRepositoryError =
    PutAssetInformationAasRepositoryErrors[keyof PutAssetInformationAasRepositoryErrors];

export type PutAssetInformationAasRepositoryResponses = {
    /**
     * Asset Information updated successfully
     */
    204: void;
};

export type PutAssetInformationAasRepositoryResponse =
    PutAssetInformationAasRepositoryResponses[keyof PutAssetInformationAasRepositoryResponses];

export type DeleteThumbnailAasRepositoryData = {
    body?: never;
    path: {
        /**
         * The Asset Administration Shell’s unique id (UTF8-BASE64-URL-encoded)
         */
        aasIdentifier: string;
    };
    query?: never;
    url: '/shells/{aasIdentifier}/asset-information/thumbnail';
};

export type DeleteThumbnailAasRepositoryErrors = {
    /**
     * Bad Request, e.g. the request parameters of the format of the request body is wrong.
     */
    400: Result;
    /**
     * Unauthorized, e.g. the server refused the authorization attempt.
     */
    401: Result;
    /**
     * Forbidden
     */
    403: Result;
    /**
     * Not Found
     */
    404: Result;
    /**
     * Internal Server Error
     */
    500: Result;
    /**
     * Default error handling for unmentioned status codes
     */
    default: Result;
};

export type DeleteThumbnailAasRepositoryError =
    DeleteThumbnailAasRepositoryErrors[keyof DeleteThumbnailAasRepositoryErrors];

export type DeleteThumbnailAasRepositoryResponses = {
    /**
     * Thumbnail deletion successful
     */
    200: unknown;
};

export type GetThumbnailAasRepositoryData = {
    body?: never;
    path: {
        /**
         * The Asset Administration Shell’s unique id (UTF8-BASE64-URL-encoded)
         */
        aasIdentifier: string;
    };
    query?: never;
    url: '/shells/{aasIdentifier}/asset-information/thumbnail';
};

export type GetThumbnailAasRepositoryErrors = {
    /**
     * Bad Request, e.g. the request parameters of the format of the request body is wrong.
     */
    400: Result;
    /**
     * Unauthorized, e.g. the server refused the authorization attempt.
     */
    401: Result;
    /**
     * Forbidden
     */
    403: Result;
    /**
     * Not Found
     */
    404: Result;
    /**
     * Internal Server Error
     */
    500: Result;
    /**
     * Default error handling for unmentioned status codes
     */
    default: Result;
};

export type GetThumbnailAasRepositoryError = GetThumbnailAasRepositoryErrors[keyof GetThumbnailAasRepositoryErrors];

export type GetThumbnailAasRepositoryResponses = {
    /**
     * The thumbnail of the Asset Information.
     */
    200: globalThis.Blob | globalThis.File;
};

export type GetThumbnailAasRepositoryResponse =
    GetThumbnailAasRepositoryResponses[keyof GetThumbnailAasRepositoryResponses];

export type PutThumbnailAasRepositoryData = {
    /**
     * Thumbnail to upload
     */
    body: AssetinformationThumbnailBody1;
    path: {
        /**
         * The Asset Administration Shell’s unique id (UTF8-BASE64-URL-encoded)
         */
        aasIdentifier: string;
    };
    query?: never;
    url: '/shells/{aasIdentifier}/asset-information/thumbnail';
};

export type PutThumbnailAasRepositoryErrors = {
    /**
     * Bad Request, e.g. the request parameters of the format of the request body is wrong.
     */
    400: Result;
    /**
     * Unauthorized, e.g. the server refused the authorization attempt.
     */
    401: Result;
    /**
     * Forbidden
     */
    403: Result;
    /**
     * Not Found
     */
    404: Result;
    /**
     * Internal Server Error
     */
    500: Result;
    /**
     * Default error handling for unmentioned status codes
     */
    default: Result;
};

export type PutThumbnailAasRepositoryError = PutThumbnailAasRepositoryErrors[keyof PutThumbnailAasRepositoryErrors];

export type PutThumbnailAasRepositoryResponses = {
    /**
     * Thumbnail updated successfully
     */
    204: void;
};

export type PutThumbnailAasRepositoryResponse =
    PutThumbnailAasRepositoryResponses[keyof PutThumbnailAasRepositoryResponses];

export type GetAllSubmodelReferencesAasRepositoryData = {
    body?: never;
    path: {
        /**
         * The Asset Administration Shell’s unique id (UTF8-BASE64-URL-encoded)
         */
        aasIdentifier: string;
    };
    query?: {
        /**
         * The maximum number of elements in the response array
         */
        limit?: number;
        /**
         * A server-generated identifier retrieved from pagingMetadata that specifies from which position the result listing should continue
         */
        cursor?: string;
    };
    url: '/shells/{aasIdentifier}/submodel-refs';
};

export type GetAllSubmodelReferencesAasRepositoryErrors = {
    /**
     * Bad Request, e.g. the request parameters of the format of the request body is wrong.
     */
    400: Result;
    /**
     * Unauthorized, e.g. the server refused the authorization attempt.
     */
    401: Result;
    /**
     * Forbidden
     */
    403: Result;
    /**
     * Not Found
     */
    404: Result;
    /**
     * Internal Server Error
     */
    500: Result;
    /**
     * Default error handling for unmentioned status codes
     */
    default: Result;
};

export type GetAllSubmodelReferencesAasRepositoryError =
    GetAllSubmodelReferencesAasRepositoryErrors[keyof GetAllSubmodelReferencesAasRepositoryErrors];

export type GetAllSubmodelReferencesAasRepositoryResponses = {
    /**
     * Requested submodel references
     */
    200: GetReferencesResult;
};

export type GetAllSubmodelReferencesAasRepositoryResponse =
    GetAllSubmodelReferencesAasRepositoryResponses[keyof GetAllSubmodelReferencesAasRepositoryResponses];

export type PostSubmodelReferenceAasRepositoryData = {
    /**
     * Reference to the Submodel
     */
    body: Reference;
    path: {
        /**
         * The Asset Administration Shell’s unique id (UTF8-BASE64-URL-encoded)
         */
        aasIdentifier: string;
    };
    query?: never;
    url: '/shells/{aasIdentifier}/submodel-refs';
};

export type PostSubmodelReferenceAasRepositoryErrors = {
    /**
     * Bad Request, e.g. the request parameters of the format of the request body is wrong.
     */
    400: Result;
    /**
     * Unauthorized, e.g. the server refused the authorization attempt.
     */
    401: Result;
    /**
     * Forbidden
     */
    403: Result;
    /**
     * Not Found
     */
    404: Result;
    /**
     * Conflict, a resource which shall be created exists already. Might be thrown if a Submodel or SubmodelElement with the same ShortId is contained in a POST request.
     */
    409: Result;
    /**
     * Internal Server Error
     */
    500: Result;
    /**
     * Default error handling for unmentioned status codes
     */
    default: Result;
};

export type PostSubmodelReferenceAasRepositoryError =
    PostSubmodelReferenceAasRepositoryErrors[keyof PostSubmodelReferenceAasRepositoryErrors];

export type PostSubmodelReferenceAasRepositoryResponses = {
    /**
     * Submodel reference created successfully
     */
    201: Reference;
};

export type PostSubmodelReferenceAasRepositoryResponse =
    PostSubmodelReferenceAasRepositoryResponses[keyof PostSubmodelReferenceAasRepositoryResponses];

export type DeleteSubmodelReferenceByIdAasRepositoryData = {
    body?: never;
    path: {
        /**
         * The Asset Administration Shell’s unique id (UTF8-BASE64-URL-encoded)
         */
        aasIdentifier: string;
        /**
         * The Submodel’s unique id (UTF8-BASE64-URL-encoded)
         */
        submodelIdentifier: string;
    };
    query?: never;
    url: '/shells/{aasIdentifier}/submodel-refs/{submodelIdentifier}';
};

export type DeleteSubmodelReferenceByIdAasRepositoryErrors = {
    /**
     * Bad Request, e.g. the request parameters of the format of the request body is wrong.
     */
    400: Result;
    /**
     * Unauthorized, e.g. the server refused the authorization attempt.
     */
    401: Result;
    /**
     * Forbidden
     */
    403: Result;
    /**
     * Not Found
     */
    404: Result;
    /**
     * Internal Server Error
     */
    500: Result;
    /**
     * Default error handling for unmentioned status codes
     */
    default: Result;
};

export type DeleteSubmodelReferenceByIdAasRepositoryError =
    DeleteSubmodelReferenceByIdAasRepositoryErrors[keyof DeleteSubmodelReferenceByIdAasRepositoryErrors];

export type DeleteSubmodelReferenceByIdAasRepositoryResponses = {
    /**
     * Submodel reference deleted successfully
     */
    204: void;
};

export type DeleteSubmodelReferenceByIdAasRepositoryResponse =
    DeleteSubmodelReferenceByIdAasRepositoryResponses[keyof DeleteSubmodelReferenceByIdAasRepositoryResponses];

export type DeleteSubmodelByIdAasRepositoryData = {
    body?: never;
    path: {
        /**
         * The Asset Administration Shell’s unique id (UTF8-BASE64-URL-encoded)
         */
        aasIdentifier: string;
        /**
         * The Submodel’s unique id (UTF8-BASE64-URL-encoded)
         */
        submodelIdentifier: string;
    };
    query?: never;
    url: '/shells/{aasIdentifier}/submodels/{submodelIdentifier}';
};

export type DeleteSubmodelByIdAasRepositoryErrors = {
    /**
     * Bad Request, e.g. the request parameters of the format of the request body is wrong.
     */
    400: Result;
    /**
     * Unauthorized, e.g. the server refused the authorization attempt.
     */
    401: Result;
    /**
     * Forbidden
     */
    403: Result;
    /**
     * Not Found
     */
    404: Result;
    /**
     * Internal Server Error
     */
    500: Result;
    /**
     * Default error handling for unmentioned status codes
     */
    default: Result;
};

export type DeleteSubmodelByIdAasRepositoryError =
    DeleteSubmodelByIdAasRepositoryErrors[keyof DeleteSubmodelByIdAasRepositoryErrors];

export type DeleteSubmodelByIdAasRepositoryResponses = {
    /**
     * Submodel deleted successfully
     */
    204: void;
};

export type DeleteSubmodelByIdAasRepositoryResponse =
    DeleteSubmodelByIdAasRepositoryResponses[keyof DeleteSubmodelByIdAasRepositoryResponses];

export type GetSubmodelByIdAasRepositoryData = {
    body?: never;
    path: {
        /**
         * The Asset Administration Shell’s unique id (UTF8-BASE64-URL-encoded)
         */
        aasIdentifier: string;
        /**
         * The Submodel’s unique id (UTF8-BASE64-URL-encoded)
         */
        submodelIdentifier: string;
    };
    query?: {
        /**
         * Determines the structural depth of the respective resource content
         */
        level?: 'deep' | 'core';
        /**
         * Determines to which extent the resource is being serialized
         */
        extent?: 'withBlobValue' | 'withoutBlobValue';
    };
    url: '/shells/{aasIdentifier}/submodels/{submodelIdentifier}';
};

export type GetSubmodelByIdAasRepositoryErrors = {
    /**
     * Bad Request, e.g. the request parameters of the format of the request body is wrong.
     */
    400: Result;
    /**
     * Unauthorized, e.g. the server refused the authorization attempt.
     */
    401: Result;
    /**
     * Forbidden
     */
    403: Result;
    /**
     * Not Found
     */
    404: Result;
    /**
     * Internal Server Error
     */
    500: Result;
    /**
     * Default error handling for unmentioned status codes
     */
    default: Result;
};

export type GetSubmodelByIdAasRepositoryError =
    GetSubmodelByIdAasRepositoryErrors[keyof GetSubmodelByIdAasRepositoryErrors];

export type GetSubmodelByIdAasRepositoryResponses = {
    /**
     * Requested Submodel
     */
    200: Submodel;
};

export type GetSubmodelByIdAasRepositoryResponse =
    GetSubmodelByIdAasRepositoryResponses[keyof GetSubmodelByIdAasRepositoryResponses];

export type PatchSubmodelAasRepositoryData = {
    /**
     * Submodel object
     */
    body: Submodel;
    path: {
        /**
         * The Asset Administration Shell’s unique id (UTF8-BASE64-URL-encoded)
         */
        aasIdentifier: string;
        /**
         * The Submodel’s unique id (UTF8-BASE64-URL-encoded)
         */
        submodelIdentifier: string;
    };
    query?: {
        /**
         * Determines the structural depth of the respective resource content
         */
        level?: 'core';
    };
    url: '/shells/{aasIdentifier}/submodels/{submodelIdentifier}';
};

export type PatchSubmodelAasRepositoryErrors = {
    /**
     * Bad Request, e.g. the request parameters of the format of the request body is wrong.
     */
    400: Result;
    /**
     * Unauthorized, e.g. the server refused the authorization attempt.
     */
    401: Result;
    /**
     * Forbidden
     */
    403: Result;
    /**
     * Not Found
     */
    404: Result;
    /**
     * Internal Server Error
     */
    500: Result;
    /**
     * Default error handling for unmentioned status codes
     */
    default: Result;
};

export type PatchSubmodelAasRepositoryError = PatchSubmodelAasRepositoryErrors[keyof PatchSubmodelAasRepositoryErrors];

export type PatchSubmodelAasRepositoryResponses = {
    /**
     * Submodel updated successfully
     */
    204: void;
};

export type PatchSubmodelAasRepositoryResponse =
    PatchSubmodelAasRepositoryResponses[keyof PatchSubmodelAasRepositoryResponses];

export type PutSubmodelByIdAasRepositoryData = {
    /**
     * Submodel object
     */
    body: Submodel;
    path: {
        /**
         * The Asset Administration Shell’s unique id (UTF8-BASE64-URL-encoded)
         */
        aasIdentifier: string;
        /**
         * The Submodel’s unique id (UTF8-BASE64-URL-encoded)
         */
        submodelIdentifier: string;
    };
    query?: never;
    url: '/shells/{aasIdentifier}/submodels/{submodelIdentifier}';
};

export type PutSubmodelByIdAasRepositoryErrors = {
    /**
     * Bad Request, e.g. the request parameters of the format of the request body is wrong.
     */
    400: Result;
    /**
     * Unauthorized, e.g. the server refused the authorization attempt.
     */
    401: Result;
    /**
     * Forbidden
     */
    403: Result;
    /**
     * Not Found
     */
    404: Result;
    /**
     * Internal Server Error
     */
    500: Result;
    /**
     * Default error handling for unmentioned status codes
     */
    default: Result;
};

export type PutSubmodelByIdAasRepositoryError =
    PutSubmodelByIdAasRepositoryErrors[keyof PutSubmodelByIdAasRepositoryErrors];

export type PutSubmodelByIdAasRepositoryResponses = {
    /**
     * Submodel updated successfully
     */
    204: void;
};

export type PutSubmodelByIdAasRepositoryResponse =
    PutSubmodelByIdAasRepositoryResponses[keyof PutSubmodelByIdAasRepositoryResponses];

export type GetSubmodelByIdMetadataAasRepositoryData = {
    body?: never;
    path: {
        /**
         * The Asset Administration Shell’s unique id (UTF8-BASE64-URL-encoded)
         */
        aasIdentifier: string;
        /**
         * The Submodel’s unique id (UTF8-BASE64-URL-encoded)
         */
        submodelIdentifier: string;
    };
    query?: never;
    url: '/shells/{aasIdentifier}/submodels/{submodelIdentifier}/$metadata';
};

export type GetSubmodelByIdMetadataAasRepositoryErrors = {
    /**
     * Bad Request, e.g. the request parameters of the format of the request body is wrong.
     */
    400: Result;
    /**
     * Unauthorized, e.g. the server refused the authorization attempt.
     */
    401: Result;
    /**
     * Forbidden
     */
    403: Result;
    /**
     * Not Found
     */
    404: Result;
    /**
     * Internal Server Error
     */
    500: Result;
    /**
     * Default error handling for unmentioned status codes
     */
    default: Result;
};

export type GetSubmodelByIdMetadataAasRepositoryError =
    GetSubmodelByIdMetadataAasRepositoryErrors[keyof GetSubmodelByIdMetadataAasRepositoryErrors];

export type GetSubmodelByIdMetadataAasRepositoryResponses = {
    /**
     * Requested Submodel
     */
    200: SubmodelMetadata;
};

export type GetSubmodelByIdMetadataAasRepositoryResponse =
    GetSubmodelByIdMetadataAasRepositoryResponses[keyof GetSubmodelByIdMetadataAasRepositoryResponses];

export type PatchSubmodelByIdMetadataAasRepositoryData = {
    /**
     * Submodel object
     */
    body: SubmodelMetadata;
    path: {
        /**
         * The Asset Administration Shell’s unique id (UTF8-BASE64-URL-encoded)
         */
        aasIdentifier: string;
        /**
         * The Submodel’s unique id (UTF8-BASE64-URL-encoded)
         */
        submodelIdentifier: string;
    };
    query?: never;
    url: '/shells/{aasIdentifier}/submodels/{submodelIdentifier}/$metadata';
};

export type PatchSubmodelByIdMetadataAasRepositoryErrors = {
    /**
     * Bad Request, e.g. the request parameters of the format of the request body is wrong.
     */
    400: Result;
    /**
     * Unauthorized, e.g. the server refused the authorization attempt.
     */
    401: Result;
    /**
     * Forbidden
     */
    403: Result;
    /**
     * Not Found
     */
    404: Result;
    /**
     * Internal Server Error
     */
    500: Result;
    /**
     * Default error handling for unmentioned status codes
     */
    default: Result;
};

export type PatchSubmodelByIdMetadataAasRepositoryError =
    PatchSubmodelByIdMetadataAasRepositoryErrors[keyof PatchSubmodelByIdMetadataAasRepositoryErrors];

export type PatchSubmodelByIdMetadataAasRepositoryResponses = {
    /**
     * Submodel updated successfully
     */
    204: void;
};

export type PatchSubmodelByIdMetadataAasRepositoryResponse =
    PatchSubmodelByIdMetadataAasRepositoryResponses[keyof PatchSubmodelByIdMetadataAasRepositoryResponses];

export type GetSubmodelByIdValueOnlyAasRepositoryData = {
    body?: never;
    path: {
        /**
         * The Asset Administration Shell’s unique id (UTF8-BASE64-URL-encoded)
         */
        aasIdentifier: string;
        /**
         * The Submodel’s unique id (UTF8-BASE64-URL-encoded)
         */
        submodelIdentifier: string;
    };
    query?: {
        /**
         * Determines the structural depth of the respective resource content
         */
        level?: 'deep' | 'core';
        /**
         * Determines to which extent the resource is being serialized
         */
        extent?: 'withBlobValue' | 'withoutBlobValue';
    };
    url: '/shells/{aasIdentifier}/submodels/{submodelIdentifier}/$value';
};

export type GetSubmodelByIdValueOnlyAasRepositoryErrors = {
    /**
     * Bad Request, e.g. the request parameters of the format of the request body is wrong.
     */
    400: Result;
    /**
     * Unauthorized, e.g. the server refused the authorization attempt.
     */
    401: Result;
    /**
     * Forbidden
     */
    403: Result;
    /**
     * Not Found
     */
    404: Result;
    /**
     * Internal Server Error
     */
    500: Result;
    /**
     * Default error handling for unmentioned status codes
     */
    default: Result;
};

export type GetSubmodelByIdValueOnlyAasRepositoryError =
    GetSubmodelByIdValueOnlyAasRepositoryErrors[keyof GetSubmodelByIdValueOnlyAasRepositoryErrors];

export type GetSubmodelByIdValueOnlyAasRepositoryResponses = {
    /**
     * Requested Submodel
     */
    200: SubmodelValue;
};

export type GetSubmodelByIdValueOnlyAasRepositoryResponse =
    GetSubmodelByIdValueOnlyAasRepositoryResponses[keyof GetSubmodelByIdValueOnlyAasRepositoryResponses];

export type PatchSubmodelByIdValueOnlyAasRepositoryData = {
    /**
     * Submodel object in the ValueOnly representation
     */
    body: SubmodelValue;
    path: {
        /**
         * The Asset Administration Shell’s unique id (UTF8-BASE64-URL-encoded)
         */
        aasIdentifier: string;
        /**
         * The Submodel’s unique id (UTF8-BASE64-URL-encoded)
         */
        submodelIdentifier: string;
    };
    query?: {
        /**
         * Determines the structural depth of the respective resource content
         */
        level?: 'core';
    };
    url: '/shells/{aasIdentifier}/submodels/{submodelIdentifier}/$value';
};

export type PatchSubmodelByIdValueOnlyAasRepositoryErrors = {
    /**
     * Bad Request, e.g. the request parameters of the format of the request body is wrong.
     */
    400: Result;
    /**
     * Unauthorized, e.g. the server refused the authorization attempt.
     */
    401: Result;
    /**
     * Forbidden
     */
    403: Result;
    /**
     * Not Found
     */
    404: Result;
    /**
     * Internal Server Error
     */
    500: Result;
    /**
     * Default error handling for unmentioned status codes
     */
    default: Result;
};

export type PatchSubmodelByIdValueOnlyAasRepositoryError =
    PatchSubmodelByIdValueOnlyAasRepositoryErrors[keyof PatchSubmodelByIdValueOnlyAasRepositoryErrors];

export type PatchSubmodelByIdValueOnlyAasRepositoryResponses = {
    /**
     * Submodel updated successfully
     */
    204: void;
};

export type PatchSubmodelByIdValueOnlyAasRepositoryResponse =
    PatchSubmodelByIdValueOnlyAasRepositoryResponses[keyof PatchSubmodelByIdValueOnlyAasRepositoryResponses];

export type GetSubmodelByIdReferenceAasRepositoryData = {
    body?: never;
    path: {
        /**
         * The Asset Administration Shell’s unique id (UTF8-BASE64-URL-encoded)
         */
        aasIdentifier: string;
        /**
         * The Submodel’s unique id (UTF8-BASE64-URL-encoded)
         */
        submodelIdentifier: string;
    };
    query?: never;
    url: '/shells/{aasIdentifier}/submodels/{submodelIdentifier}/$reference';
};

export type GetSubmodelByIdReferenceAasRepositoryErrors = {
    /**
     * Bad Request, e.g. the request parameters of the format of the request body is wrong.
     */
    400: Result;
    /**
     * Unauthorized, e.g. the server refused the authorization attempt.
     */
    401: Result;
    /**
     * Forbidden
     */
    403: Result;
    /**
     * Not Found
     */
    404: Result;
    /**
     * Internal Server Error
     */
    500: Result;
    /**
     * Default error handling for unmentioned status codes
     */
    default: Result;
};

export type GetSubmodelByIdReferenceAasRepositoryError =
    GetSubmodelByIdReferenceAasRepositoryErrors[keyof GetSubmodelByIdReferenceAasRepositoryErrors];

export type GetSubmodelByIdReferenceAasRepositoryResponses = {
    /**
     * Requested Submodel as a Reference
     */
    200: Reference;
};

export type GetSubmodelByIdReferenceAasRepositoryResponse =
    GetSubmodelByIdReferenceAasRepositoryResponses[keyof GetSubmodelByIdReferenceAasRepositoryResponses];

export type GetSubmodelByIdPathAasRepositoryData = {
    body?: never;
    path: {
        /**
         * The Asset Administration Shell’s unique id (UTF8-BASE64-URL-encoded)
         */
        aasIdentifier: string;
        /**
         * The Submodel’s unique id (UTF8-BASE64-URL-encoded)
         */
        submodelIdentifier: string;
    };
    query?: {
        /**
         * Determines the structural depth of the respective resource content
         */
        level?: 'deep' | 'core';
    };
    url: '/shells/{aasIdentifier}/submodels/{submodelIdentifier}/$path';
};

export type GetSubmodelByIdPathAasRepositoryErrors = {
    /**
     * Bad Request, e.g. the request parameters of the format of the request body is wrong.
     */
    400: Result;
    /**
     * Unauthorized, e.g. the server refused the authorization attempt.
     */
    401: Result;
    /**
     * Forbidden
     */
    403: Result;
    /**
     * Not Found
     */
    404: Result;
    /**
     * Internal Server Error
     */
    500: Result;
    /**
     * Default error handling for unmentioned status codes
     */
    default: Result;
};

export type GetSubmodelByIdPathAasRepositoryError =
    GetSubmodelByIdPathAasRepositoryErrors[keyof GetSubmodelByIdPathAasRepositoryErrors];

export type GetSubmodelByIdPathAasRepositoryResponses = {
    /**
     * Requested Submodel in Path notation
     */
    200: Array<PathItem>;
};

export type GetSubmodelByIdPathAasRepositoryResponse =
    GetSubmodelByIdPathAasRepositoryResponses[keyof GetSubmodelByIdPathAasRepositoryResponses];

export type GetAllSubmodelElementsAasRepositoryData = {
    body?: never;
    path: {
        /**
         * The Asset Administration Shell’s unique id (UTF8-BASE64-URL-encoded)
         */
        aasIdentifier: string;
        /**
         * The Submodel’s unique id (UTF8-BASE64-URL-encoded)
         */
        submodelIdentifier: string;
    };
    query?: {
        /**
         * The maximum number of elements in the response array
         */
        limit?: number;
        /**
         * A server-generated identifier retrieved from pagingMetadata that specifies from which position the result listing should continue
         */
        cursor?: string;
        /**
         * Determines the structural depth of the respective resource content
         */
        level?: 'deep' | 'core';
        /**
         * Determines to which extent the resource is being serialized
         */
        extent?: 'withBlobValue' | 'withoutBlobValue';
    };
    url: '/shells/{aasIdentifier}/submodels/{submodelIdentifier}/submodel-elements';
};

export type GetAllSubmodelElementsAasRepositoryErrors = {
    /**
     * Bad Request, e.g. the request parameters of the format of the request body is wrong.
     */
    400: Result;
    /**
     * Unauthorized, e.g. the server refused the authorization attempt.
     */
    401: Result;
    /**
     * Forbidden
     */
    403: Result;
    /**
     * Not Found
     */
    404: Result;
    /**
     * Internal Server Error
     */
    500: Result;
    /**
     * Default error handling for unmentioned status codes
     */
    default: Result;
};

export type GetAllSubmodelElementsAasRepositoryError =
    GetAllSubmodelElementsAasRepositoryErrors[keyof GetAllSubmodelElementsAasRepositoryErrors];

export type GetAllSubmodelElementsAasRepositoryResponses = {
    /**
     * List of found submodel elements
     */
    200: GetSubmodelElementsResult;
};

export type GetAllSubmodelElementsAasRepositoryResponse =
    GetAllSubmodelElementsAasRepositoryResponses[keyof GetAllSubmodelElementsAasRepositoryResponses];

export type PostSubmodelElementAasRepositoryData = {
    /**
     * Requested submodel element
     */
    body: SubmodelElement;
    path: {
        /**
         * The Asset Administration Shell’s unique id (UTF8-BASE64-URL-encoded)
         */
        aasIdentifier: string;
        /**
         * The Submodel’s unique id (UTF8-BASE64-URL-encoded)
         */
        submodelIdentifier: string;
    };
    query?: never;
    url: '/shells/{aasIdentifier}/submodels/{submodelIdentifier}/submodel-elements';
};

export type PostSubmodelElementAasRepositoryErrors = {
    /**
     * Bad Request, e.g. the request parameters of the format of the request body is wrong.
     */
    400: Result;
    /**
     * Unauthorized, e.g. the server refused the authorization attempt.
     */
    401: Result;
    /**
     * Forbidden
     */
    403: Result;
    /**
     * Not Found
     */
    404: Result;
    /**
     * Conflict, a resource which shall be created exists already. Might be thrown if a Submodel or SubmodelElement with the same ShortId is contained in a POST request.
     */
    409: Result;
    /**
     * Internal Server Error
     */
    500: Result;
    /**
     * Default error handling for unmentioned status codes
     */
    default: Result;
};

export type PostSubmodelElementAasRepositoryError =
    PostSubmodelElementAasRepositoryErrors[keyof PostSubmodelElementAasRepositoryErrors];

export type PostSubmodelElementAasRepositoryResponses = {
    /**
     * Submodel element created successfully
     */
    201: SubmodelElement;
};

export type PostSubmodelElementAasRepositoryResponse =
    PostSubmodelElementAasRepositoryResponses[keyof PostSubmodelElementAasRepositoryResponses];

export type GetAllSubmodelElementsMetadataAasRepositoryData = {
    body?: never;
    path: {
        /**
         * The Asset Administration Shell’s unique id (UTF8-BASE64-URL-encoded)
         */
        aasIdentifier: string;
        /**
         * The Submodel’s unique id (UTF8-BASE64-URL-encoded)
         */
        submodelIdentifier: string;
    };
    query?: {
        /**
         * The maximum number of elements in the response array
         */
        limit?: number;
        /**
         * A server-generated identifier retrieved from pagingMetadata that specifies from which position the result listing should continue
         */
        cursor?: string;
    };
    url: '/shells/{aasIdentifier}/submodels/{submodelIdentifier}/submodel-elements/$metadata';
};

export type GetAllSubmodelElementsMetadataAasRepositoryErrors = {
    /**
     * Bad Request, e.g. the request parameters of the format of the request body is wrong.
     */
    400: Result;
    /**
     * Unauthorized, e.g. the server refused the authorization attempt.
     */
    401: Result;
    /**
     * Forbidden
     */
    403: Result;
    /**
     * Not Found
     */
    404: Result;
    /**
     * Internal Server Error
     */
    500: Result;
    /**
     * Default error handling for unmentioned status codes
     */
    default: Result;
};

export type GetAllSubmodelElementsMetadataAasRepositoryError =
    GetAllSubmodelElementsMetadataAasRepositoryErrors[keyof GetAllSubmodelElementsMetadataAasRepositoryErrors];

export type GetAllSubmodelElementsMetadataAasRepositoryResponses = {
    /**
     * List of found submodel elements
     */
    200: GetSubmodelElementsMetadataResult;
};

export type GetAllSubmodelElementsMetadataAasRepositoryResponse =
    GetAllSubmodelElementsMetadataAasRepositoryResponses[keyof GetAllSubmodelElementsMetadataAasRepositoryResponses];

export type GetAllSubmodelElementsValueOnlyAasRepositoryData = {
    body?: never;
    path: {
        /**
         * The Asset Administration Shell’s unique id (UTF8-BASE64-URL-encoded)
         */
        aasIdentifier: string;
        /**
         * The Submodel’s unique id (UTF8-BASE64-URL-encoded)
         */
        submodelIdentifier: string;
    };
    query?: {
        /**
         * The maximum number of elements in the response array
         */
        limit?: number;
        /**
         * A server-generated identifier retrieved from pagingMetadata that specifies from which position the result listing should continue
         */
        cursor?: string;
        /**
         * Determines the structural depth of the respective resource content
         */
        level?: 'deep' | 'core';
    };
    url: '/shells/{aasIdentifier}/submodels/{submodelIdentifier}/submodel-elements/$value';
};

export type GetAllSubmodelElementsValueOnlyAasRepositoryErrors = {
    /**
     * Bad Request, e.g. the request parameters of the format of the request body is wrong.
     */
    400: Result;
    /**
     * Unauthorized, e.g. the server refused the authorization attempt.
     */
    401: Result;
    /**
     * Forbidden
     */
    403: Result;
    /**
     * Not Found
     */
    404: Result;
    /**
     * Internal Server Error
     */
    500: Result;
    /**
     * Default error handling for unmentioned status codes
     */
    default: Result;
};

export type GetAllSubmodelElementsValueOnlyAasRepositoryError =
    GetAllSubmodelElementsValueOnlyAasRepositoryErrors[keyof GetAllSubmodelElementsValueOnlyAasRepositoryErrors];

export type GetAllSubmodelElementsValueOnlyAasRepositoryResponses = {
    /**
     * List of found submodel elements in their ValueOnly representation
     */
    200: GetSubmodelElementsValueResult;
};

export type GetAllSubmodelElementsValueOnlyAasRepositoryResponse =
    GetAllSubmodelElementsValueOnlyAasRepositoryResponses[keyof GetAllSubmodelElementsValueOnlyAasRepositoryResponses];

export type GetAllSubmodelElementsReferenceAasRepositoryData = {
    body?: never;
    path: {
        /**
         * The Asset Administration Shell’s unique id (UTF8-BASE64-URL-encoded)
         */
        aasIdentifier: string;
        /**
         * The Submodel’s unique id (UTF8-BASE64-URL-encoded)
         */
        submodelIdentifier: string;
    };
    query?: {
        /**
         * The maximum number of elements in the response array
         */
        limit?: number;
        /**
         * A server-generated identifier retrieved from pagingMetadata that specifies from which position the result listing should continue
         */
        cursor?: string;
        /**
         * Determines the structural depth of the respective resource content
         */
        level?: 'core';
    };
    url: '/shells/{aasIdentifier}/submodels/{submodelIdentifier}/submodel-elements/$reference';
};

export type GetAllSubmodelElementsReferenceAasRepositoryErrors = {
    /**
     * Bad Request, e.g. the request parameters of the format of the request body is wrong.
     */
    400: Result;
    /**
     * Unauthorized, e.g. the server refused the authorization attempt.
     */
    401: Result;
    /**
     * Forbidden
     */
    403: Result;
    /**
     * Not Found
     */
    404: Result;
    /**
     * Internal Server Error
     */
    500: Result;
    /**
     * Default error handling for unmentioned status codes
     */
    default: Result;
};

export type GetAllSubmodelElementsReferenceAasRepositoryError =
    GetAllSubmodelElementsReferenceAasRepositoryErrors[keyof GetAllSubmodelElementsReferenceAasRepositoryErrors];

export type GetAllSubmodelElementsReferenceAasRepositoryResponses = {
    /**
     * List of References of the found submodel elements
     */
    200: GetReferencesResult;
};

export type GetAllSubmodelElementsReferenceAasRepositoryResponse =
    GetAllSubmodelElementsReferenceAasRepositoryResponses[keyof GetAllSubmodelElementsReferenceAasRepositoryResponses];

export type GetAllSubmodelElementsPathAasRepositoryData = {
    body?: never;
    path: {
        /**
         * The Asset Administration Shell’s unique id (UTF8-BASE64-URL-encoded)
         */
        aasIdentifier: string;
        /**
         * The Submodel’s unique id (UTF8-BASE64-URL-encoded)
         */
        submodelIdentifier: string;
    };
    query?: {
        /**
         * The maximum number of elements in the response array
         */
        limit?: number;
        /**
         * A server-generated identifier retrieved from pagingMetadata that specifies from which position the result listing should continue
         */
        cursor?: string;
        /**
         * Determines the structural depth of the respective resource content
         */
        level?: 'deep' | 'core';
        /**
         * Determines to which extent the resource is being serialized
         */
        extent?: 'withBlobValue' | 'withoutBlobValue';
    };
    url: '/shells/{aasIdentifier}/submodels/{submodelIdentifier}/submodel-elements/$path';
};

export type GetAllSubmodelElementsPathAasRepositoryErrors = {
    /**
     * Bad Request, e.g. the request parameters of the format of the request body is wrong.
     */
    400: Result;
    /**
     * Unauthorized, e.g. the server refused the authorization attempt.
     */
    401: Result;
    /**
     * Forbidden
     */
    403: Result;
    /**
     * Not Found
     */
    404: Result;
    /**
     * Internal Server Error
     */
    500: Result;
    /**
     * Default error handling for unmentioned status codes
     */
    default: Result;
};

export type GetAllSubmodelElementsPathAasRepositoryError =
    GetAllSubmodelElementsPathAasRepositoryErrors[keyof GetAllSubmodelElementsPathAasRepositoryErrors];

export type GetAllSubmodelElementsPathAasRepositoryResponses = {
    /**
     * List of found submodel elements in the Path notation
     */
    200: GetPathItemsResult;
};

export type GetAllSubmodelElementsPathAasRepositoryResponse =
    GetAllSubmodelElementsPathAasRepositoryResponses[keyof GetAllSubmodelElementsPathAasRepositoryResponses];

export type DeleteSubmodelElementByPathAasRepositoryData = {
    body?: never;
    path: {
        /**
         * The Asset Administration Shell’s unique id (UTF8-BASE64-URL-encoded)
         */
        aasIdentifier: string;
        /**
         * The Submodel’s unique id (UTF8-BASE64-URL-encoded)
         */
        submodelIdentifier: string;
        /**
         * IdShort path to the submodel element (dot-separated)
         */
        idShortPath: string;
    };
    query?: never;
    url: '/shells/{aasIdentifier}/submodels/{submodelIdentifier}/submodel-elements/{idShortPath}';
};

export type DeleteSubmodelElementByPathAasRepositoryErrors = {
    /**
     * Bad Request, e.g. the request parameters of the format of the request body is wrong.
     */
    400: Result;
    /**
     * Unauthorized, e.g. the server refused the authorization attempt.
     */
    401: Result;
    /**
     * Forbidden
     */
    403: Result;
    /**
     * Not Found
     */
    404: Result;
    /**
     * Internal Server Error
     */
    500: Result;
    /**
     * Default error handling for unmentioned status codes
     */
    default: Result;
};

export type DeleteSubmodelElementByPathAasRepositoryError =
    DeleteSubmodelElementByPathAasRepositoryErrors[keyof DeleteSubmodelElementByPathAasRepositoryErrors];

export type DeleteSubmodelElementByPathAasRepositoryResponses = {
    /**
     * Submodel element deleted successfully
     */
    204: void;
};

export type DeleteSubmodelElementByPathAasRepositoryResponse =
    DeleteSubmodelElementByPathAasRepositoryResponses[keyof DeleteSubmodelElementByPathAasRepositoryResponses];

export type GetSubmodelElementByPathAasRepositoryData = {
    body?: never;
    path: {
        /**
         * The Asset Administration Shell’s unique id (UTF8-BASE64-URL-encoded)
         */
        aasIdentifier: string;
        /**
         * The Submodel’s unique id (UTF8-BASE64-URL-encoded)
         */
        submodelIdentifier: string;
        /**
         * IdShort path to the submodel element (dot-separated)
         */
        idShortPath: string;
    };
    query?: {
        /**
         * Determines the structural depth of the respective resource content
         */
        level?: 'deep' | 'core';
        /**
         * Determines to which extent the resource is being serialized
         */
        extent?: 'withBlobValue' | 'withoutBlobValue';
    };
    url: '/shells/{aasIdentifier}/submodels/{submodelIdentifier}/submodel-elements/{idShortPath}';
};

export type GetSubmodelElementByPathAasRepositoryErrors = {
    /**
     * Bad Request, e.g. the request parameters of the format of the request body is wrong.
     */
    400: Result;
    /**
     * Unauthorized, e.g. the server refused the authorization attempt.
     */
    401: Result;
    /**
     * Forbidden
     */
    403: Result;
    /**
     * Not Found
     */
    404: Result;
    /**
     * Internal Server Error
     */
    500: Result;
    /**
     * Default error handling for unmentioned status codes
     */
    default: Result;
};

export type GetSubmodelElementByPathAasRepositoryError =
    GetSubmodelElementByPathAasRepositoryErrors[keyof GetSubmodelElementByPathAasRepositoryErrors];

export type GetSubmodelElementByPathAasRepositoryResponses = {
    /**
     * Requested submodel element
     */
    200: SubmodelElement;
};

export type GetSubmodelElementByPathAasRepositoryResponse =
    GetSubmodelElementByPathAasRepositoryResponses[keyof GetSubmodelElementByPathAasRepositoryResponses];

export type PatchSubmodelElementValueByPathAasRepositoryData = {
    /**
     * The updated value of the submodel element
     */
    body: SubmodelElement;
    path: {
        /**
         * The Asset Administration Shell’s unique id (UTF8-BASE64-URL-encoded)
         */
        aasIdentifier: string;
        /**
         * The Submodel’s unique id (UTF8-BASE64-URL-encoded)
         */
        submodelIdentifier: string;
        /**
         * IdShort path to the submodel element (dot-separated)
         */
        idShortPath: string;
    };
    query?: {
        /**
         * Determines the structural depth of the respective resource content
         */
        level?: 'deep' | 'core';
    };
    url: '/shells/{aasIdentifier}/submodels/{submodelIdentifier}/submodel-elements/{idShortPath}';
};

export type PatchSubmodelElementValueByPathAasRepositoryErrors = {
    /**
     * Bad Request, e.g. the request parameters of the format of the request body is wrong.
     */
    400: Result;
    /**
     * Unauthorized, e.g. the server refused the authorization attempt.
     */
    401: Result;
    /**
     * Forbidden
     */
    403: Result;
    /**
     * Not Found
     */
    404: Result;
    /**
     * Internal Server Error
     */
    500: Result;
    /**
     * Default error handling for unmentioned status codes
     */
    default: Result;
};

export type PatchSubmodelElementValueByPathAasRepositoryError =
    PatchSubmodelElementValueByPathAasRepositoryErrors[keyof PatchSubmodelElementValueByPathAasRepositoryErrors];

export type PatchSubmodelElementValueByPathAasRepositoryResponses = {
    /**
     * Submodel element updated successfully
     */
    204: void;
};

export type PatchSubmodelElementValueByPathAasRepositoryResponse =
    PatchSubmodelElementValueByPathAasRepositoryResponses[keyof PatchSubmodelElementValueByPathAasRepositoryResponses];

export type PostSubmodelElementByPathAasRepositoryData = {
    /**
     * Requested submodel element
     */
    body: SubmodelElement;
    path: {
        /**
         * The Asset Administration Shell’s unique id (UTF8-BASE64-URL-encoded)
         */
        aasIdentifier: string;
        /**
         * The Submodel’s unique id (UTF8-BASE64-URL-encoded)
         */
        submodelIdentifier: string;
        /**
         * IdShort path to the submodel element (dot-separated)
         */
        idShortPath: string;
    };
    query?: never;
    url: '/shells/{aasIdentifier}/submodels/{submodelIdentifier}/submodel-elements/{idShortPath}';
};

export type PostSubmodelElementByPathAasRepositoryErrors = {
    /**
     * Bad Request, e.g. the request parameters of the format of the request body is wrong.
     */
    400: Result;
    /**
     * Unauthorized, e.g. the server refused the authorization attempt.
     */
    401: Result;
    /**
     * Forbidden
     */
    403: Result;
    /**
     * Not Found
     */
    404: Result;
    /**
     * Conflict, a resource which shall be created exists already. Might be thrown if a Submodel or SubmodelElement with the same ShortId is contained in a POST request.
     */
    409: Result;
    /**
     * Internal Server Error
     */
    500: Result;
    /**
     * Default error handling for unmentioned status codes
     */
    default: Result;
};

export type PostSubmodelElementByPathAasRepositoryError =
    PostSubmodelElementByPathAasRepositoryErrors[keyof PostSubmodelElementByPathAasRepositoryErrors];

export type PostSubmodelElementByPathAasRepositoryResponses = {
    /**
     * Submodel element created successfully
     */
    201: SubmodelElement;
};

export type PostSubmodelElementByPathAasRepositoryResponse =
    PostSubmodelElementByPathAasRepositoryResponses[keyof PostSubmodelElementByPathAasRepositoryResponses];

export type PutSubmodelElementByPathAasRepositoryData = {
    /**
     * Requested submodel element
     */
    body: SubmodelElement;
    path: {
        /**
         * The Asset Administration Shell’s unique id (UTF8-BASE64-URL-encoded)
         */
        aasIdentifier: string;
        /**
         * The Submodel’s unique id (UTF8-BASE64-URL-encoded)
         */
        submodelIdentifier: string;
        /**
         * IdShort path to the submodel element (dot-separated)
         */
        idShortPath: string;
    };
    query?: never;
    url: '/shells/{aasIdentifier}/submodels/{submodelIdentifier}/submodel-elements/{idShortPath}';
};

export type PutSubmodelElementByPathAasRepositoryErrors = {
    /**
     * Bad Request, e.g. the request parameters of the format of the request body is wrong.
     */
    400: Result;
    /**
     * Unauthorized, e.g. the server refused the authorization attempt.
     */
    401: Result;
    /**
     * Forbidden
     */
    403: Result;
    /**
     * Not Found
     */
    404: Result;
    /**
     * Internal Server Error
     */
    500: Result;
    /**
     * Default error handling for unmentioned status codes
     */
    default: Result;
};

export type PutSubmodelElementByPathAasRepositoryError =
    PutSubmodelElementByPathAasRepositoryErrors[keyof PutSubmodelElementByPathAasRepositoryErrors];

export type PutSubmodelElementByPathAasRepositoryResponses = {
    /**
     * Submodel element updated successfully
     */
    204: void;
};

export type PutSubmodelElementByPathAasRepositoryResponse =
    PutSubmodelElementByPathAasRepositoryResponses[keyof PutSubmodelElementByPathAasRepositoryResponses];

export type GetSubmodelElementByPathMetadataAasRepositoryData = {
    body?: never;
    path: {
        /**
         * The Asset Administration Shell’s unique id (UTF8-BASE64-URL-encoded)
         */
        aasIdentifier: string;
        /**
         * The Submodel’s unique id (UTF8-BASE64-URL-encoded)
         */
        submodelIdentifier: string;
        /**
         * IdShort path to the submodel element (dot-separated)
         */
        idShortPath: string;
    };
    query?: never;
    url: '/shells/{aasIdentifier}/submodels/{submodelIdentifier}/submodel-elements/{idShortPath}/$metadata';
};

export type GetSubmodelElementByPathMetadataAasRepositoryErrors = {
    /**
     * Bad Request, e.g. the request parameters of the format of the request body is wrong.
     */
    400: Result;
    /**
     * Unauthorized, e.g. the server refused the authorization attempt.
     */
    401: Result;
    /**
     * Forbidden
     */
    403: Result;
    /**
     * Not Found
     */
    404: Result;
    /**
     * Internal Server Error
     */
    500: Result;
    /**
     * Default error handling for unmentioned status codes
     */
    default: Result;
};

export type GetSubmodelElementByPathMetadataAasRepositoryError =
    GetSubmodelElementByPathMetadataAasRepositoryErrors[keyof GetSubmodelElementByPathMetadataAasRepositoryErrors];

export type GetSubmodelElementByPathMetadataAasRepositoryResponses = {
    /**
     * Requested submodel element
     */
    200: SubmodelElementMetadata;
};

export type GetSubmodelElementByPathMetadataAasRepositoryResponse =
    GetSubmodelElementByPathMetadataAasRepositoryResponses[keyof GetSubmodelElementByPathMetadataAasRepositoryResponses];

export type PatchSubmodelElementValueByPathMetadataData = {
    /**
     * The updated metadata attributes of the submodel element
     */
    body: SubmodelElementMetadata;
    path: {
        /**
         * The Asset Administration Shell’s unique id (UTF8-BASE64-URL-encoded)
         */
        aasIdentifier: string;
        /**
         * The Submodel’s unique id (UTF8-BASE64-URL-encoded)
         */
        submodelIdentifier: string;
        /**
         * IdShort path to the submodel element (dot-separated)
         */
        idShortPath: string;
    };
    query?: never;
    url: '/shells/{aasIdentifier}/submodels/{submodelIdentifier}/submodel-elements/{idShortPath}/$metadata';
};

export type PatchSubmodelElementValueByPathMetadataErrors = {
    /**
     * Bad Request, e.g. the request parameters of the format of the request body is wrong.
     */
    400: Result;
    /**
     * Unauthorized, e.g. the server refused the authorization attempt.
     */
    401: Result;
    /**
     * Forbidden
     */
    403: Result;
    /**
     * Not Found
     */
    404: Result;
    /**
     * Internal Server Error
     */
    500: Result;
    /**
     * Default error handling for unmentioned status codes
     */
    default: Result;
};

export type PatchSubmodelElementValueByPathMetadataError =
    PatchSubmodelElementValueByPathMetadataErrors[keyof PatchSubmodelElementValueByPathMetadataErrors];

export type PatchSubmodelElementValueByPathMetadataResponses = {
    /**
     * Submodel element updated successfully
     */
    204: void;
};

export type PatchSubmodelElementValueByPathMetadataResponse =
    PatchSubmodelElementValueByPathMetadataResponses[keyof PatchSubmodelElementValueByPathMetadataResponses];

export type GetSubmodelElementByPathValueOnlyAasRepositoryData = {
    body?: never;
    path: {
        /**
         * The Asset Administration Shell’s unique id (UTF8-BASE64-URL-encoded)
         */
        aasIdentifier: string;
        /**
         * The Submodel’s unique id (UTF8-BASE64-URL-encoded)
         */
        submodelIdentifier: string;
        /**
         * IdShort path to the submodel element (dot-separated)
         */
        idShortPath: string;
    };
    query?: {
        /**
         * Determines the structural depth of the respective resource content
         */
        level?: 'deep' | 'core';
        /**
         * Determines to which extent the resource is being serialized
         */
        extent?: 'withBlobValue' | 'withoutBlobValue';
    };
    url: '/shells/{aasIdentifier}/submodels/{submodelIdentifier}/submodel-elements/{idShortPath}/$value';
};

export type GetSubmodelElementByPathValueOnlyAasRepositoryErrors = {
    /**
     * Bad Request, e.g. the request parameters of the format of the request body is wrong.
     */
    400: Result;
    /**
     * Unauthorized, e.g. the server refused the authorization attempt.
     */
    401: Result;
    /**
     * Forbidden
     */
    403: Result;
    /**
     * Not Found
     */
    404: Result;
    /**
     * Internal Server Error
     */
    500: Result;
    /**
     * Default error handling for unmentioned status codes
     */
    default: Result;
};

export type GetSubmodelElementByPathValueOnlyAasRepositoryError =
    GetSubmodelElementByPathValueOnlyAasRepositoryErrors[keyof GetSubmodelElementByPathValueOnlyAasRepositoryErrors];

export type GetSubmodelElementByPathValueOnlyAasRepositoryResponses = {
    /**
     * Requested submodel element in its ValueOnly representation
     */
    200: SubmodelElementValue;
};

export type GetSubmodelElementByPathValueOnlyAasRepositoryResponse =
    GetSubmodelElementByPathValueOnlyAasRepositoryResponses[keyof GetSubmodelElementByPathValueOnlyAasRepositoryResponses];

export type PatchSubmodelElementValueByPathValueOnlyData = {
    /**
     * The updated value of the submodel element
     */
    body: SubmodelElementValue;
    path: {
        /**
         * The Asset Administration Shell’s unique id (UTF8-BASE64-URL-encoded)
         */
        aasIdentifier: string;
        /**
         * The Submodel’s unique id (UTF8-BASE64-URL-encoded)
         */
        submodelIdentifier: string;
        /**
         * IdShort path to the submodel element (dot-separated)
         */
        idShortPath: string;
    };
    query?: {
        /**
         * Determines the structural depth of the respective resource content
         */
        level?: 'deep' | 'core';
    };
    url: '/shells/{aasIdentifier}/submodels/{submodelIdentifier}/submodel-elements/{idShortPath}/$value';
};

export type PatchSubmodelElementValueByPathValueOnlyErrors = {
    /**
     * Bad Request, e.g. the request parameters of the format of the request body is wrong.
     */
    400: Result;
    /**
     * Unauthorized, e.g. the server refused the authorization attempt.
     */
    401: Result;
    /**
     * Forbidden
     */
    403: Result;
    /**
     * Not Found
     */
    404: Result;
    /**
     * Internal Server Error
     */
    500: Result;
    /**
     * Default error handling for unmentioned status codes
     */
    default: Result;
};

export type PatchSubmodelElementValueByPathValueOnlyError =
    PatchSubmodelElementValueByPathValueOnlyErrors[keyof PatchSubmodelElementValueByPathValueOnlyErrors];

export type PatchSubmodelElementValueByPathValueOnlyResponses = {
    /**
     * Submodel element updated successfully
     */
    204: void;
};

export type PatchSubmodelElementValueByPathValueOnlyResponse =
    PatchSubmodelElementValueByPathValueOnlyResponses[keyof PatchSubmodelElementValueByPathValueOnlyResponses];

export type GetSubmodelElementByPathReferenceAasRepositoryData = {
    body?: never;
    path: {
        /**
         * The Asset Administration Shell’s unique id (UTF8-BASE64-URL-encoded)
         */
        aasIdentifier: string;
        /**
         * The Submodel’s unique id (UTF8-BASE64-URL-encoded)
         */
        submodelIdentifier: string;
        /**
         * IdShort path to the submodel element (dot-separated)
         */
        idShortPath: string;
    };
    query?: never;
    url: '/shells/{aasIdentifier}/submodels/{submodelIdentifier}/submodel-elements/{idShortPath}/$reference';
};

export type GetSubmodelElementByPathReferenceAasRepositoryErrors = {
    /**
     * Bad Request, e.g. the request parameters of the format of the request body is wrong.
     */
    400: Result;
    /**
     * Unauthorized, e.g. the server refused the authorization attempt.
     */
    401: Result;
    /**
     * Forbidden
     */
    403: Result;
    /**
     * Not Found
     */
    404: Result;
    /**
     * Internal Server Error
     */
    500: Result;
    /**
     * Default error handling for unmentioned status codes
     */
    default: Result;
};

export type GetSubmodelElementByPathReferenceAasRepositoryError =
    GetSubmodelElementByPathReferenceAasRepositoryErrors[keyof GetSubmodelElementByPathReferenceAasRepositoryErrors];

export type GetSubmodelElementByPathReferenceAasRepositoryResponses = {
    /**
     * Requested submodel element in its ValueOnly representation
     */
    200: Reference;
};

export type GetSubmodelElementByPathReferenceAasRepositoryResponse =
    GetSubmodelElementByPathReferenceAasRepositoryResponses[keyof GetSubmodelElementByPathReferenceAasRepositoryResponses];

export type GetSubmodelElementByPathPathAasRepositoryData = {
    body?: never;
    path: {
        /**
         * The Asset Administration Shell’s unique id (UTF8-BASE64-URL-encoded)
         */
        aasIdentifier: string;
        /**
         * The Submodel’s unique id (UTF8-BASE64-URL-encoded)
         */
        submodelIdentifier: string;
        /**
         * IdShort path to the submodel element (dot-separated)
         */
        idShortPath: string;
    };
    query?: {
        /**
         * Determines the structural depth of the respective resource content
         */
        level?: 'deep' | 'core';
    };
    url: '/shells/{aasIdentifier}/submodels/{submodelIdentifier}/submodel-elements/{idShortPath}/$path';
};

export type GetSubmodelElementByPathPathAasRepositoryErrors = {
    /**
     * Bad Request, e.g. the request parameters of the format of the request body is wrong.
     */
    400: Result;
    /**
     * Unauthorized, e.g. the server refused the authorization attempt.
     */
    401: Result;
    /**
     * Forbidden
     */
    403: Result;
    /**
     * Not Found
     */
    404: Result;
    /**
     * Internal Server Error
     */
    500: Result;
    /**
     * Default error handling for unmentioned status codes
     */
    default: Result;
};

export type GetSubmodelElementByPathPathAasRepositoryError =
    GetSubmodelElementByPathPathAasRepositoryErrors[keyof GetSubmodelElementByPathPathAasRepositoryErrors];

export type GetSubmodelElementByPathPathAasRepositoryResponses = {
    /**
     * Requested submodel element in the Path notation
     */
    200: Array<PathItem>;
};

export type GetSubmodelElementByPathPathAasRepositoryResponse =
    GetSubmodelElementByPathPathAasRepositoryResponses[keyof GetSubmodelElementByPathPathAasRepositoryResponses];

export type DeleteFileByPathAasRepositoryData = {
    body?: never;
    path: {
        /**
         * The Asset Administration Shell’s unique id (UTF8-BASE64-URL-encoded)
         */
        aasIdentifier: string;
        /**
         * The Submodel’s unique id (UTF8-BASE64-URL-encoded)
         */
        submodelIdentifier: string;
        /**
         * IdShort path to the submodel element (dot-separated)
         */
        idShortPath: string;
    };
    query?: never;
    url: '/shells/{aasIdentifier}/submodels/{submodelIdentifier}/submodel-elements/{idShortPath}/attachment';
};

export type DeleteFileByPathAasRepositoryErrors = {
    /**
     * Bad Request, e.g. the request parameters of the format of the request body is wrong.
     */
    400: Result;
    /**
     * Unauthorized, e.g. the server refused the authorization attempt.
     */
    401: Result;
    /**
     * Forbidden
     */
    403: Result;
    /**
     * Not Found
     */
    404: Result;
    /**
     * Internal Server Error
     */
    500: Result;
    /**
     * Default error handling for unmentioned status codes
     */
    default: Result;
};

export type DeleteFileByPathAasRepositoryError =
    DeleteFileByPathAasRepositoryErrors[keyof DeleteFileByPathAasRepositoryErrors];

export type DeleteFileByPathAasRepositoryResponses = {
    /**
     * Submodel element updated successfully
     */
    200: unknown;
};

export type GetFileByPathAasRepositoryData = {
    body?: never;
    path: {
        /**
         * The Asset Administration Shell’s unique id (UTF8-BASE64-URL-encoded)
         */
        aasIdentifier: string;
        /**
         * The Submodel’s unique id (UTF8-BASE64-URL-encoded)
         */
        submodelIdentifier: string;
        /**
         * IdShort path to the submodel element (dot-separated)
         */
        idShortPath: string;
    };
    query?: never;
    url: '/shells/{aasIdentifier}/submodels/{submodelIdentifier}/submodel-elements/{idShortPath}/attachment';
};

export type GetFileByPathAasRepositoryErrors = {
    /**
     * Bad Request, e.g. the request parameters of the format of the request body is wrong.
     */
    400: Result;
    /**
     * Unauthorized, e.g. the server refused the authorization attempt.
     */
    401: Result;
    /**
     * Forbidden
     */
    403: Result;
    /**
     * Not Found
     */
    404: Result;
    /**
     * Internal Server Error
     */
    500: Result;
    /**
     * Default error handling for unmentioned status codes
     */
    default: Result;
};

export type GetFileByPathAasRepositoryError = GetFileByPathAasRepositoryErrors[keyof GetFileByPathAasRepositoryErrors];

export type GetFileByPathAasRepositoryResponses = {
    /**
     * Requested file
     */
    200: Blob | File;
};

export type GetFileByPathAasRepositoryResponse =
    GetFileByPathAasRepositoryResponses[keyof GetFileByPathAasRepositoryResponses];

export type PutFileByPathAasRepositoryData = {
    /**
     * File to upload
     */
    body: IdShortPathAttachmentBody2;
    path: {
        /**
         * The Asset Administration Shell’s unique id (UTF8-BASE64-URL-encoded)
         */
        aasIdentifier: string;
        /**
         * The Submodel’s unique id (UTF8-BASE64-URL-encoded)
         */
        submodelIdentifier: string;
        /**
         * IdShort path to the submodel element (dot-separated)
         */
        idShortPath: string;
    };
    query?: never;
    url: '/shells/{aasIdentifier}/submodels/{submodelIdentifier}/submodel-elements/{idShortPath}/attachment';
};

export type PutFileByPathAasRepositoryErrors = {
    /**
     * Bad Request, e.g. the request parameters of the format of the request body is wrong.
     */
    400: Result;
    /**
     * Unauthorized, e.g. the server refused the authorization attempt.
     */
    401: Result;
    /**
     * Forbidden
     */
    403: Result;
    /**
     * Not Found
     */
    404: Result;
    /**
     * Internal Server Error
     */
    500: Result;
    /**
     * Default error handling for unmentioned status codes
     */
    default: Result;
};

export type PutFileByPathAasRepositoryError = PutFileByPathAasRepositoryErrors[keyof PutFileByPathAasRepositoryErrors];

export type PutFileByPathAasRepositoryResponses = {
    /**
     * Submodel element updated successfully
     */
    204: void;
};

export type PutFileByPathAasRepositoryResponse =
    PutFileByPathAasRepositoryResponses[keyof PutFileByPathAasRepositoryResponses];

export type InvokeOperationAasRepositoryData = {
    /**
     * Operation request object
     */
    body: OperationRequest;
    path: {
        /**
         * The Asset Administration Shell’s unique id (UTF8-BASE64-URL-encoded)
         */
        aasIdentifier: string;
        /**
         * The Submodel’s unique id (UTF8-BASE64-URL-encoded)
         */
        submodelIdentifier: string;
        /**
         * IdShort path to the submodel element (dot-separated)
         */
        idShortPath: string;
    };
    query?: never;
    url: '/shells/{aasIdentifier}/submodels/{submodelIdentifier}/submodel-elements/{idShortPath}/invoke';
};

export type InvokeOperationAasRepositoryErrors = {
    /**
     * Bad Request, e.g. the request parameters of the format of the request body is wrong.
     */
    400: Result;
    /**
     * Unauthorized, e.g. the server refused the authorization attempt.
     */
    401: Result;
    /**
     * Forbidden
     */
    403: Result;
    /**
     * Not Found
     */
    404: Result;
    /**
     * Internal Server Error
     */
    500: Result;
    /**
     * Default error handling for unmentioned status codes
     */
    default: Result;
};

export type InvokeOperationAasRepositoryError =
    InvokeOperationAasRepositoryErrors[keyof InvokeOperationAasRepositoryErrors];

export type InvokeOperationAasRepositoryResponses = {
    /**
     * Operation result object
     */
    200: OperationResult;
};

export type InvokeOperationAasRepositoryResponse =
    InvokeOperationAasRepositoryResponses[keyof InvokeOperationAasRepositoryResponses];

export type InvokeOperationValueOnlyAasRepositoryData = {
    /**
     * Operation request object
     */
    body: OperationRequestValueOnly;
    path: {
        /**
         * The Asset Administration Shell’s unique id (UTF8-BASE64-URL-encoded)
         */
        aasIdentifier: string;
        /**
         * The Submodel’s unique id (UTF8-BASE64-URL-encoded)
         */
        submodelIdentifier: string;
        /**
         * IdShort path to the submodel element (dot-separated)
         */
        idShortPath: string;
    };
    query?: never;
    url: '/shells/{aasIdentifier}/submodels/{submodelIdentifier}/submodel-elements/{idShortPath}/invoke/$value';
};

export type InvokeOperationValueOnlyAasRepositoryErrors = {
    /**
     * Bad Request, e.g. the request parameters of the format of the request body is wrong.
     */
    400: Result;
    /**
     * Unauthorized, e.g. the server refused the authorization attempt.
     */
    401: Result;
    /**
     * Forbidden
     */
    403: Result;
    /**
     * Not Found
     */
    404: Result;
    /**
     * Internal Server Error
     */
    500: Result;
    /**
     * Default error handling for unmentioned status codes
     */
    default: Result;
};

export type InvokeOperationValueOnlyAasRepositoryError =
    InvokeOperationValueOnlyAasRepositoryErrors[keyof InvokeOperationValueOnlyAasRepositoryErrors];

export type InvokeOperationValueOnlyAasRepositoryResponses = {
    /**
     * Operation result object
     */
    200: OperationResultValueOnly;
};

export type InvokeOperationValueOnlyAasRepositoryResponse =
    InvokeOperationValueOnlyAasRepositoryResponses[keyof InvokeOperationValueOnlyAasRepositoryResponses];

export type InvokeOperationAsyncAasRepositoryData = {
    /**
     * Operation request object
     */
    body: OperationRequest;
    path: {
        /**
         * The Asset Administration Shell’s unique id (UTF8-BASE64-URL-encoded)
         */
        aasIdentifier: string;
        /**
         * The Submodel’s unique id (UTF8-BASE64-URL-encoded)
         */
        submodelIdentifier: string;
        /**
         * IdShort path to the submodel element (dot-separated)
         */
        idShortPath: string;
    };
    query?: never;
    url: '/shells/{aasIdentifier}/submodels/{submodelIdentifier}/submodel-elements/{idShortPath}/invoke-async';
};

export type InvokeOperationAsyncAasRepositoryErrors = {
    /**
     * Bad Request, e.g. the request parameters of the format of the request body is wrong.
     */
    400: Result;
    /**
     * Unauthorized, e.g. the server refused the authorization attempt.
     */
    401: Result;
    /**
     * Forbidden
     */
    403: Result;
    /**
     * Not Found
     */
    404: Result;
    /**
     * Internal Server Error
     */
    500: Result;
    /**
     * Default error handling for unmentioned status codes
     */
    default: Result;
};

export type InvokeOperationAsyncAasRepositoryError =
    InvokeOperationAsyncAasRepositoryErrors[keyof InvokeOperationAsyncAasRepositoryErrors];

export type InvokeOperationAsyncAasRepositoryResponses = {
    /**
     * The server has accepted the request.
     */
    202: unknown;
};

export type InvokeOperationAsyncValueOnlyAasRepositoryData = {
    /**
     * Operation request object
     */
    body: OperationRequestValueOnly;
    path: {
        /**
         * The Asset Administration Shell’s unique id (UTF8-BASE64-URL-encoded)
         */
        aasIdentifier: string;
        /**
         * The Submodel’s unique id (UTF8-BASE64-URL-encoded)
         */
        submodelIdentifier: string;
        /**
         * IdShort path to the submodel element (dot-separated)
         */
        idShortPath: string;
    };
    query?: never;
    url: '/shells/{aasIdentifier}/submodels/{submodelIdentifier}/submodel-elements/{idShortPath}/invoke-async/$value';
};

export type InvokeOperationAsyncValueOnlyAasRepositoryErrors = {
    /**
     * Bad Request, e.g. the request parameters of the format of the request body is wrong.
     */
    400: Result;
    /**
     * Unauthorized, e.g. the server refused the authorization attempt.
     */
    401: Result;
    /**
     * Forbidden
     */
    403: Result;
    /**
     * Not Found
     */
    404: Result;
    /**
     * Internal Server Error
     */
    500: Result;
    /**
     * Default error handling for unmentioned status codes
     */
    default: Result;
};

export type InvokeOperationAsyncValueOnlyAasRepositoryError =
    InvokeOperationAsyncValueOnlyAasRepositoryErrors[keyof InvokeOperationAsyncValueOnlyAasRepositoryErrors];

export type InvokeOperationAsyncValueOnlyAasRepositoryResponses = {
    /**
     * The server has accepted the request.
     */
    202: unknown;
};

export type GetOperationAsyncStatusAasRepositoryData = {
    body?: never;
    path: {
        /**
         * The Asset Administration Shell’s unique id (UTF8-BASE64-URL-encoded)
         */
        aasIdentifier: string;
        /**
         * The Submodel’s unique id (UTF8-BASE64-URL-encoded)
         */
        submodelIdentifier: string;
        /**
         * IdShort path to the submodel element (dot-separated)
         */
        idShortPath: string;
        /**
         * The returned handle id of an operation’s asynchronous invocation used to request the current state of the operation’s execution (UTF8-BASE64-URL-encoded)
         */
        handleId: string;
    };
    query?: never;
    url: '/shells/{aasIdentifier}/submodels/{submodelIdentifier}/submodel-elements/{idShortPath}/operation-status/{handleId}';
};

export type GetOperationAsyncStatusAasRepositoryErrors = {
    /**
     * Bad Request, e.g. the request parameters of the format of the request body is wrong.
     */
    400: Result;
    /**
     * Unauthorized, e.g. the server refused the authorization attempt.
     */
    401: Result;
    /**
     * Forbidden
     */
    403: Result;
    /**
     * Not Found
     */
    404: Result;
    /**
     * Internal Server Error
     */
    500: Result;
    /**
     * Default error handling for unmentioned status codes
     */
    default: Result;
};

export type GetOperationAsyncStatusAasRepositoryError =
    GetOperationAsyncStatusAasRepositoryErrors[keyof GetOperationAsyncStatusAasRepositoryErrors];

export type GetOperationAsyncStatusAasRepositoryResponses = {
    /**
     * Operation result object containing information that the 'executionState' is still 'Running'
     */
    200: BaseOperationResult;
};

export type GetOperationAsyncStatusAasRepositoryResponse =
    GetOperationAsyncStatusAasRepositoryResponses[keyof GetOperationAsyncStatusAasRepositoryResponses];

export type GetOperationAsyncResultAasRepositoryData = {
    body?: never;
    path: {
        /**
         * The Asset Administration Shell’s unique id (UTF8-BASE64-URL-encoded)
         */
        aasIdentifier: string;
        /**
         * The Submodel’s unique id (UTF8-BASE64-URL-encoded)
         */
        submodelIdentifier: string;
        /**
         * IdShort path to the submodel element (dot-separated)
         */
        idShortPath: string;
        /**
         * The returned handle id of an operation’s asynchronous invocation used to request the current state of the operation’s execution (UTF8-BASE64-URL-encoded)
         */
        handleId: string;
    };
    query?: never;
    url: '/shells/{aasIdentifier}/submodels/{submodelIdentifier}/submodel-elements/{idShortPath}/operation-results/{handleId}';
};

export type GetOperationAsyncResultAasRepositoryErrors = {
    /**
     * Bad Request, e.g. the request parameters of the format of the request body is wrong.
     */
    400: Result;
    /**
     * Unauthorized, e.g. the server refused the authorization attempt.
     */
    401: Result;
    /**
     * Forbidden
     */
    403: Result;
    /**
     * Not Found
     */
    404: Result;
    /**
     * Internal Server Error
     */
    500: Result;
    /**
     * Default error handling for unmentioned status codes
     */
    default: Result;
};

export type GetOperationAsyncResultAasRepositoryError =
    GetOperationAsyncResultAasRepositoryErrors[keyof GetOperationAsyncResultAasRepositoryErrors];

export type GetOperationAsyncResultAasRepositoryResponses = {
    /**
     * Operation result object
     */
    200: OperationResult;
};

export type GetOperationAsyncResultAasRepositoryResponse =
    GetOperationAsyncResultAasRepositoryResponses[keyof GetOperationAsyncResultAasRepositoryResponses];

export type GetOperationAsyncResultValueOnlyAasRepositoryData = {
    body?: never;
    path: {
        /**
         * The Asset Administration Shell’s unique id (UTF8-BASE64-URL-encoded)
         */
        aasIdentifier: string;
        /**
         * The Submodel’s unique id (UTF8-BASE64-URL-encoded)
         */
        submodelIdentifier: string;
        /**
         * IdShort path to the submodel element (dot-separated)
         */
        idShortPath: string;
        /**
         * The returned handle id of an operation’s asynchronous invocation used to request the current state of the operation’s execution (UTF8-BASE64-URL-encoded)
         */
        handleId: string;
    };
    query?: never;
    url: '/shells/{aasIdentifier}/submodels/{submodelIdentifier}/submodel-elements/{idShortPath}/operation-results/{handleId}/$value';
};

export type GetOperationAsyncResultValueOnlyAasRepositoryErrors = {
    /**
     * Bad Request, e.g. the request parameters of the format of the request body is wrong.
     */
    400: Result;
    /**
     * Unauthorized, e.g. the server refused the authorization attempt.
     */
    401: Result;
    /**
     * Forbidden
     */
    403: Result;
    /**
     * Not Found
     */
    404: Result;
    /**
     * Internal Server Error
     */
    500: Result;
    /**
     * Default error handling for unmentioned status codes
     */
    default: Result;
};

export type GetOperationAsyncResultValueOnlyAasRepositoryError =
    GetOperationAsyncResultValueOnlyAasRepositoryErrors[keyof GetOperationAsyncResultValueOnlyAasRepositoryErrors];

export type GetOperationAsyncResultValueOnlyAasRepositoryResponses = {
    /**
     * Operation result object
     */
    200: OperationResultValueOnly;
};

export type GetOperationAsyncResultValueOnlyAasRepositoryResponse =
    GetOperationAsyncResultValueOnlyAasRepositoryResponses[keyof GetOperationAsyncResultValueOnlyAasRepositoryResponses];

export type GetAllSubmodelsData = {
    body?: never;
    path?: never;
    query?: {
        /**
         * The value of the semantic id reference (BASE64-URL-encoded)
         */
        semanticId?: string;
        /**
         * The Asset Administration Shell’s IdShort
         */
        idShort?: string;
        /**
         * The maximum number of elements in the response array
         */
        limit?: number;
        /**
         * A server-generated identifier retrieved from pagingMetadata that specifies from which position the result listing should continue
         */
        cursor?: string;
        /**
         * Determines the structural depth of the respective resource content
         */
        level?: 'deep' | 'core';
        /**
         * Determines to which extent the resource is being serialized
         */
        extent?: 'withBlobValue' | 'withoutBlobValue';
    };
    url: '/submodels';
};

export type GetAllSubmodelsErrors = {
    /**
     * Bad Request, e.g. the request parameters of the format of the request body is wrong.
     */
    400: Result;
    /**
     * Unauthorized, e.g. the server refused the authorization attempt.
     */
    401: Result;
    /**
     * Forbidden
     */
    403: Result;
    /**
     * Internal Server Error
     */
    500: Result;
    /**
     * Default error handling for unmentioned status codes
     */
    default: Result;
};

export type GetAllSubmodelsError = GetAllSubmodelsErrors[keyof GetAllSubmodelsErrors];

export type GetAllSubmodelsResponses = {
    /**
     * Requested Submodels
     */
    200: GetSubmodelsResult;
};

export type GetAllSubmodelsResponse = GetAllSubmodelsResponses[keyof GetAllSubmodelsResponses];

export type PostSubmodelData = {
    /**
     * Submodel object
     */
    body: Submodel;
    path?: never;
    query?: never;
    url: '/submodels';
};

export type PostSubmodelErrors = {
    /**
     * Bad Request, e.g. the request parameters of the format of the request body is wrong.
     */
    400: Result;
    /**
     * Unauthorized, e.g. the server refused the authorization attempt.
     */
    401: Result;
    /**
     * Forbidden
     */
    403: Result;
    /**
     * Conflict, a resource which shall be created exists already. Might be thrown if a Submodel or SubmodelElement with the same ShortId is contained in a POST request.
     */
    409: Result;
    /**
     * Internal Server Error
     */
    500: Result;
    /**
     * Default error handling for unmentioned status codes
     */
    default: Result;
};

export type PostSubmodelError = PostSubmodelErrors[keyof PostSubmodelErrors];

export type PostSubmodelResponses = {
    /**
     * Submodel created successfully
     */
    201: Submodel;
};

export type PostSubmodelResponse = PostSubmodelResponses[keyof PostSubmodelResponses];

export type GetAllSubmodelsMetadataData = {
    body?: never;
    path?: never;
    query?: {
        /**
         * The value of the semantic id reference (BASE64-URL-encoded)
         */
        semanticId?: string;
        /**
         * The Asset Administration Shell’s IdShort
         */
        idShort?: string;
        /**
         * The maximum number of elements in the response array
         */
        limit?: number;
        /**
         * A server-generated identifier retrieved from pagingMetadata that specifies from which position the result listing should continue
         */
        cursor?: string;
    };
    url: '/submodels/$metadata';
};

export type GetAllSubmodelsMetadataErrors = {
    /**
     * Bad Request, e.g. the request parameters of the format of the request body is wrong.
     */
    400: Result;
    /**
     * Unauthorized, e.g. the server refused the authorization attempt.
     */
    401: Result;
    /**
     * Forbidden
     */
    403: Result;
    /**
     * Internal Server Error
     */
    500: Result;
    /**
     * Default error handling for unmentioned status codes
     */
    default: Result;
};

export type GetAllSubmodelsMetadataError = GetAllSubmodelsMetadataErrors[keyof GetAllSubmodelsMetadataErrors];

export type GetAllSubmodelsMetadataResponses = {
    /**
     * Requested Submodels
     */
    200: GetSubmodelsMetadataResult;
};

export type GetAllSubmodelsMetadataResponse = GetAllSubmodelsMetadataResponses[keyof GetAllSubmodelsMetadataResponses];

export type GetAllSubmodelsValueOnlyData = {
    body?: never;
    path?: never;
    query?: {
        /**
         * The value of the semantic id reference (BASE64-URL-encoded)
         */
        semanticId?: string;
        /**
         * The Asset Administration Shell’s IdShort
         */
        idShort?: string;
        /**
         * The maximum number of elements in the response array
         */
        limit?: number;
        /**
         * A server-generated identifier retrieved from pagingMetadata that specifies from which position the result listing should continue
         */
        cursor?: string;
        /**
         * Determines the structural depth of the respective resource content
         */
        level?: 'deep' | 'core';
        /**
         * Determines to which extent the resource is being serialized
         */
        extent?: 'withBlobValue' | 'withoutBlobValue';
    };
    url: '/submodels/$value';
};

export type GetAllSubmodelsValueOnlyErrors = {
    /**
     * Bad Request, e.g. the request parameters of the format of the request body is wrong.
     */
    400: Result;
    /**
     * Unauthorized, e.g. the server refused the authorization attempt.
     */
    401: Result;
    /**
     * Forbidden
     */
    403: Result;
    /**
     * Not Found
     */
    404: Result;
    /**
     * Internal Server Error
     */
    500: Result;
    /**
     * Default error handling for unmentioned status codes
     */
    default: Result;
};

export type GetAllSubmodelsValueOnlyError = GetAllSubmodelsValueOnlyErrors[keyof GetAllSubmodelsValueOnlyErrors];

export type GetAllSubmodelsValueOnlyResponses = {
    /**
     * Requested Submodels
     */
    200: GetSubmodelsValueResult;
};

export type GetAllSubmodelsValueOnlyResponse =
    GetAllSubmodelsValueOnlyResponses[keyof GetAllSubmodelsValueOnlyResponses];

export type GetAllSubmodelsReferenceData = {
    body?: never;
    path?: never;
    query?: {
        /**
         * The value of the semantic id reference (BASE64-URL-encoded)
         */
        semanticId?: string;
        /**
         * The Asset Administration Shell’s IdShort
         */
        idShort?: string;
        /**
         * The maximum number of elements in the response array
         */
        limit?: number;
        /**
         * A server-generated identifier retrieved from pagingMetadata that specifies from which position the result listing should continue
         */
        cursor?: string;
        /**
         * Determines the structural depth of the respective resource content
         */
        level?: 'core';
    };
    url: '/submodels/$reference';
};

export type GetAllSubmodelsReferenceErrors = {
    /**
     * Bad Request, e.g. the request parameters of the format of the request body is wrong.
     */
    400: Result;
    /**
     * Unauthorized, e.g. the server refused the authorization attempt.
     */
    401: Result;
    /**
     * Forbidden
     */
    403: Result;
    /**
     * Internal Server Error
     */
    500: Result;
    /**
     * Default error handling for unmentioned status codes
     */
    default: Result;
};

export type GetAllSubmodelsReferenceError = GetAllSubmodelsReferenceErrors[keyof GetAllSubmodelsReferenceErrors];

export type GetAllSubmodelsReferenceResponses = {
    /**
     * References of the requested Submodels
     */
    200: GetReferencesResult;
};

export type GetAllSubmodelsReferenceResponse =
    GetAllSubmodelsReferenceResponses[keyof GetAllSubmodelsReferenceResponses];

export type GetAllSubmodelsPathData = {
    body?: never;
    path?: never;
    query?: {
        /**
         * The value of the semantic id reference (BASE64-URL-encoded)
         */
        semanticId?: string;
        /**
         * The Asset Administration Shell’s IdShort
         */
        idShort?: string;
        /**
         * The maximum number of elements in the response array
         */
        limit?: number;
        /**
         * A server-generated identifier retrieved from pagingMetadata that specifies from which position the result listing should continue
         */
        cursor?: string;
        /**
         * Determines the structural depth of the respective resource content
         */
        level?: 'deep' | 'core';
    };
    url: '/submodels/$path';
};

export type GetAllSubmodelsPathErrors = {
    /**
     * Bad Request, e.g. the request parameters of the format of the request body is wrong.
     */
    400: Result;
    /**
     * Unauthorized, e.g. the server refused the authorization attempt.
     */
    401: Result;
    /**
     * Forbidden
     */
    403: Result;
    /**
     * Internal Server Error
     */
    500: Result;
    /**
     * Default error handling for unmentioned status codes
     */
    default: Result;
};

export type GetAllSubmodelsPathError = GetAllSubmodelsPathErrors[keyof GetAllSubmodelsPathErrors];

export type GetAllSubmodelsPathResponses = {
    /**
     * Requested Submodels
     */
    200: GetPathItemsResult;
};

export type GetAllSubmodelsPathResponse = GetAllSubmodelsPathResponses[keyof GetAllSubmodelsPathResponses];

export type DeleteSubmodelByIdData = {
    body?: never;
    path: {
        /**
         * The Submodel’s unique id (UTF8-BASE64-URL-encoded)
         */
        submodelIdentifier: string;
    };
    query?: never;
    url: '/submodels/{submodelIdentifier}';
};

export type DeleteSubmodelByIdErrors = {
    /**
     * Bad Request, e.g. the request parameters of the format of the request body is wrong.
     */
    400: Result;
    /**
     * Unauthorized, e.g. the server refused the authorization attempt.
     */
    401: Result;
    /**
     * Forbidden
     */
    403: Result;
    /**
     * Not Found
     */
    404: Result;
    /**
     * Internal Server Error
     */
    500: Result;
    /**
     * Default error handling for unmentioned status codes
     */
    default: Result;
};

export type DeleteSubmodelByIdError = DeleteSubmodelByIdErrors[keyof DeleteSubmodelByIdErrors];

export type DeleteSubmodelByIdResponses = {
    /**
     * Submodel deleted successfully
     */
    204: void;
};

export type DeleteSubmodelByIdResponse = DeleteSubmodelByIdResponses[keyof DeleteSubmodelByIdResponses];

export type GetSubmodelByIdData = {
    body?: never;
    path: {
        /**
         * The Submodel’s unique id (UTF8-BASE64-URL-encoded)
         */
        submodelIdentifier: string;
    };
    query?: {
        /**
         * Determines the structural depth of the respective resource content
         */
        level?: 'deep' | 'core';
        /**
         * Determines to which extent the resource is being serialized
         */
        extent?: 'withBlobValue' | 'withoutBlobValue';
    };
    url: '/submodels/{submodelIdentifier}';
};

export type GetSubmodelByIdErrors = {
    /**
     * Bad Request, e.g. the request parameters of the format of the request body is wrong.
     */
    400: Result;
    /**
     * Unauthorized, e.g. the server refused the authorization attempt.
     */
    401: Result;
    /**
     * Forbidden
     */
    403: Result;
    /**
     * Not Found
     */
    404: Result;
    /**
     * Internal Server Error
     */
    500: Result;
    /**
     * Default error handling for unmentioned status codes
     */
    default: Result;
};

export type GetSubmodelByIdError = GetSubmodelByIdErrors[keyof GetSubmodelByIdErrors];

export type GetSubmodelByIdResponses = {
    /**
     * Requested Submodel
     */
    200: Submodel;
};

export type GetSubmodelByIdResponse = GetSubmodelByIdResponses[keyof GetSubmodelByIdResponses];

export type PatchSubmodelByIdData = {
    /**
     * Submodel object
     */
    body: Submodel;
    path: {
        /**
         * The Submodel’s unique id (UTF8-BASE64-URL-encoded)
         */
        submodelIdentifier: string;
    };
    query?: {
        /**
         * Determines the structural depth of the respective resource content
         */
        level?: 'core';
    };
    url: '/submodels/{submodelIdentifier}';
};

export type PatchSubmodelByIdErrors = {
    /**
     * Bad Request, e.g. the request parameters of the format of the request body is wrong.
     */
    400: Result;
    /**
     * Unauthorized, e.g. the server refused the authorization attempt.
     */
    401: Result;
    /**
     * Forbidden
     */
    403: Result;
    /**
     * Not Found
     */
    404: Result;
    /**
     * Internal Server Error
     */
    500: Result;
    /**
     * Default error handling for unmentioned status codes
     */
    default: Result;
};

export type PatchSubmodelByIdError = PatchSubmodelByIdErrors[keyof PatchSubmodelByIdErrors];

export type PatchSubmodelByIdResponses = {
    /**
     * Submodel updated successfully
     */
    204: void;
};

export type PatchSubmodelByIdResponse = PatchSubmodelByIdResponses[keyof PatchSubmodelByIdResponses];

export type PutSubmodelByIdData = {
    /**
     * Submodel object
     */
    body: Submodel;
    path: {
        /**
         * The Submodel’s unique id (UTF8-BASE64-URL-encoded)
         */
        submodelIdentifier: string;
    };
    query?: never;
    url: '/submodels/{submodelIdentifier}';
};

export type PutSubmodelByIdErrors = {
    /**
     * Bad Request, e.g. the request parameters of the format of the request body is wrong.
     */
    400: Result;
    /**
     * Unauthorized, e.g. the server refused the authorization attempt.
     */
    401: Result;
    /**
     * Forbidden
     */
    403: Result;
    /**
     * Not Found
     */
    404: Result;
    /**
     * Internal Server Error
     */
    500: Result;
    /**
     * Default error handling for unmentioned status codes
     */
    default: Result;
};

export type PutSubmodelByIdError = PutSubmodelByIdErrors[keyof PutSubmodelByIdErrors];

export type PutSubmodelByIdResponses = {
    /**
     * Submodel updated successfully
     */
    204: void;
};

export type PutSubmodelByIdResponse = PutSubmodelByIdResponses[keyof PutSubmodelByIdResponses];

export type GetSubmodelByIdMetadataData = {
    body?: never;
    path: {
        /**
         * The Submodel’s unique id (UTF8-BASE64-URL-encoded)
         */
        submodelIdentifier: string;
    };
    query?: never;
    url: '/submodels/{submodelIdentifier}/$metadata';
};

export type GetSubmodelByIdMetadataErrors = {
    /**
     * Bad Request, e.g. the request parameters of the format of the request body is wrong.
     */
    400: Result;
    /**
     * Unauthorized, e.g. the server refused the authorization attempt.
     */
    401: Result;
    /**
     * Forbidden
     */
    403: Result;
    /**
     * Not Found
     */
    404: Result;
    /**
     * Internal Server Error
     */
    500: Result;
    /**
     * Default error handling for unmentioned status codes
     */
    default: Result;
};

export type GetSubmodelByIdMetadataError = GetSubmodelByIdMetadataErrors[keyof GetSubmodelByIdMetadataErrors];

export type GetSubmodelByIdMetadataResponses = {
    /**
     * Requested Submodel in the metadata representation
     */
    200: SubmodelMetadata;
};

export type GetSubmodelByIdMetadataResponse = GetSubmodelByIdMetadataResponses[keyof GetSubmodelByIdMetadataResponses];

export type PatchSubmodelByIdMetadataData = {
    /**
     * The metadata attributes of the Submodel object
     */
    body: SubmodelMetadata;
    path: {
        /**
         * The Submodel’s unique id (UTF8-BASE64-URL-encoded)
         */
        submodelIdentifier: string;
    };
    query?: never;
    url: '/submodels/{submodelIdentifier}/$metadata';
};

export type PatchSubmodelByIdMetadataErrors = {
    /**
     * Bad Request, e.g. the request parameters of the format of the request body is wrong.
     */
    400: Result;
    /**
     * Unauthorized, e.g. the server refused the authorization attempt.
     */
    401: Result;
    /**
     * Forbidden
     */
    403: Result;
    /**
     * Not Found
     */
    404: Result;
    /**
     * Internal Server Error
     */
    500: Result;
    /**
     * Default error handling for unmentioned status codes
     */
    default: Result;
};

export type PatchSubmodelByIdMetadataError = PatchSubmodelByIdMetadataErrors[keyof PatchSubmodelByIdMetadataErrors];

export type PatchSubmodelByIdMetadataResponses = {
    /**
     * Submodel updated successfully
     */
    204: void;
};

export type PatchSubmodelByIdMetadataResponse =
    PatchSubmodelByIdMetadataResponses[keyof PatchSubmodelByIdMetadataResponses];

export type GetSubmodelByIdValueOnlyData = {
    body?: never;
    path: {
        /**
         * The Submodel’s unique id (UTF8-BASE64-URL-encoded)
         */
        submodelIdentifier: string;
    };
    query?: {
        /**
         * Determines the structural depth of the respective resource content
         */
        level?: 'deep' | 'core';
        /**
         * Determines to which extent the resource is being serialized
         */
        extent?: 'withBlobValue' | 'withoutBlobValue';
    };
    url: '/submodels/{submodelIdentifier}/$value';
};

export type GetSubmodelByIdValueOnlyErrors = {
    /**
     * Bad Request, e.g. the request parameters of the format of the request body is wrong.
     */
    400: Result;
    /**
     * Unauthorized, e.g. the server refused the authorization attempt.
     */
    401: Result;
    /**
     * Forbidden
     */
    403: Result;
    /**
     * Not Found
     */
    404: Result;
    /**
     * Internal Server Error
     */
    500: Result;
    /**
     * Default error handling for unmentioned status codes
     */
    default: Result;
};

export type GetSubmodelByIdValueOnlyError = GetSubmodelByIdValueOnlyErrors[keyof GetSubmodelByIdValueOnlyErrors];

export type GetSubmodelByIdValueOnlyResponses = {
    /**
     * Requested Submodel
     */
    200: SubmodelValue;
};

export type GetSubmodelByIdValueOnlyResponse =
    GetSubmodelByIdValueOnlyResponses[keyof GetSubmodelByIdValueOnlyResponses];

export type PatchSubmodelByIdValueOnlyData = {
    /**
     * Submodel object in its ValueOnly representation
     */
    body: SubmodelValue;
    path: {
        /**
         * The Submodel’s unique id (UTF8-BASE64-URL-encoded)
         */
        submodelIdentifier: string;
    };
    query?: {
        /**
         * Determines the structural depth of the respective resource content
         */
        level?: 'core';
    };
    url: '/submodels/{submodelIdentifier}/$value';
};

export type PatchSubmodelByIdValueOnlyErrors = {
    /**
     * Bad Request, e.g. the request parameters of the format of the request body is wrong.
     */
    400: Result;
    /**
     * Unauthorized, e.g. the server refused the authorization attempt.
     */
    401: Result;
    /**
     * Forbidden
     */
    403: Result;
    /**
     * Not Found
     */
    404: Result;
    /**
     * Internal Server Error
     */
    500: Result;
    /**
     * Default error handling for unmentioned status codes
     */
    default: Result;
};

export type PatchSubmodelByIdValueOnlyError = PatchSubmodelByIdValueOnlyErrors[keyof PatchSubmodelByIdValueOnlyErrors];

export type PatchSubmodelByIdValueOnlyResponses = {
    /**
     * Submodel updated successfully
     */
    204: void;
};

export type PatchSubmodelByIdValueOnlyResponse =
    PatchSubmodelByIdValueOnlyResponses[keyof PatchSubmodelByIdValueOnlyResponses];

export type GetSubmodelByIdReferenceData = {
    body?: never;
    path: {
        /**
         * The Submodel’s unique id (UTF8-BASE64-URL-encoded)
         */
        submodelIdentifier: string;
    };
    query?: never;
    url: '/submodels/{submodelIdentifier}/$reference';
};

export type GetSubmodelByIdReferenceErrors = {
    /**
     * Bad Request, e.g. the request parameters of the format of the request body is wrong.
     */
    400: Result;
    /**
     * Unauthorized, e.g. the server refused the authorization attempt.
     */
    401: Result;
    /**
     * Forbidden
     */
    403: Result;
    /**
     * Not Found
     */
    404: Result;
    /**
     * Internal Server Error
     */
    500: Result;
    /**
     * Default error handling for unmentioned status codes
     */
    default: Result;
};

export type GetSubmodelByIdReferenceError = GetSubmodelByIdReferenceErrors[keyof GetSubmodelByIdReferenceErrors];

export type GetSubmodelByIdReferenceResponses = {
    /**
     * Requested Submodel
     */
    200: Reference;
};

export type GetSubmodelByIdReferenceResponse =
    GetSubmodelByIdReferenceResponses[keyof GetSubmodelByIdReferenceResponses];

export type GetSubmodelByIdPathData = {
    body?: never;
    path: {
        /**
         * The Submodel’s unique id (UTF8-BASE64-URL-encoded)
         */
        submodelIdentifier: string;
    };
    query?: {
        /**
         * Determines the structural depth of the respective resource content
         */
        level?: 'deep' | 'core';
    };
    url: '/submodels/{submodelIdentifier}/$path';
};

export type GetSubmodelByIdPathErrors = {
    /**
     * Bad Request, e.g. the request parameters of the format of the request body is wrong.
     */
    400: Result;
    /**
     * Unauthorized, e.g. the server refused the authorization attempt.
     */
    401: Result;
    /**
     * Forbidden
     */
    403: Result;
    /**
     * Not Found
     */
    404: Result;
    /**
     * Internal Server Error
     */
    500: Result;
    /**
     * Default error handling for unmentioned status codes
     */
    default: Result;
};

export type GetSubmodelByIdPathError = GetSubmodelByIdPathErrors[keyof GetSubmodelByIdPathErrors];

export type GetSubmodelByIdPathResponses = {
    /**
     * Requested Submodel
     */
    200: Array<PathItem>;
};

export type GetSubmodelByIdPathResponse = GetSubmodelByIdPathResponses[keyof GetSubmodelByIdPathResponses];

export type GetAllSubmodelElementsSubmodelRepositoryData = {
    body?: never;
    path: {
        /**
         * The Submodel’s unique id (UTF8-BASE64-URL-encoded)
         */
        submodelIdentifier: string;
    };
    query?: {
        /**
         * The maximum number of elements in the response array
         */
        limit?: number;
        /**
         * A server-generated identifier retrieved from pagingMetadata that specifies from which position the result listing should continue
         */
        cursor?: string;
        /**
         * Determines the structural depth of the respective resource content
         */
        level?: 'deep' | 'core';
        /**
         * Determines to which extent the resource is being serialized
         */
        extent?: 'withBlobValue' | 'withoutBlobValue';
    };
    url: '/submodels/{submodelIdentifier}/submodel-elements';
};

export type GetAllSubmodelElementsSubmodelRepositoryErrors = {
    /**
     * Bad Request, e.g. the request parameters of the format of the request body is wrong.
     */
    400: Result;
    /**
     * Unauthorized, e.g. the server refused the authorization attempt.
     */
    401: Result;
    /**
     * Forbidden
     */
    403: Result;
    /**
     * Not Found
     */
    404: Result;
    /**
     * Internal Server Error
     */
    500: Result;
    /**
     * Default error handling for unmentioned status codes
     */
    default: Result;
};

export type GetAllSubmodelElementsSubmodelRepositoryError =
    GetAllSubmodelElementsSubmodelRepositoryErrors[keyof GetAllSubmodelElementsSubmodelRepositoryErrors];

export type GetAllSubmodelElementsSubmodelRepositoryResponses = {
    /**
     * List of found submodel elements
     */
    200: GetSubmodelElementsResult;
};

export type GetAllSubmodelElementsSubmodelRepositoryResponse =
    GetAllSubmodelElementsSubmodelRepositoryResponses[keyof GetAllSubmodelElementsSubmodelRepositoryResponses];

export type PostSubmodelElementSubmodelRepositoryData = {
    /**
     * Requested submodel element
     */
    body: SubmodelElement;
    path: {
        /**
         * The Submodel’s unique id (UTF8-BASE64-URL-encoded)
         */
        submodelIdentifier: string;
    };
    query?: never;
    url: '/submodels/{submodelIdentifier}/submodel-elements';
};

export type PostSubmodelElementSubmodelRepositoryErrors = {
    /**
     * Bad Request, e.g. the request parameters of the format of the request body is wrong.
     */
    400: Result;
    /**
     * Unauthorized, e.g. the server refused the authorization attempt.
     */
    401: Result;
    /**
     * Forbidden
     */
    403: Result;
    /**
     * Not Found
     */
    404: Result;
    /**
     * Conflict, a resource which shall be created exists already. Might be thrown if a Submodel or SubmodelElement with the same ShortId is contained in a POST request.
     */
    409: Result;
    /**
     * Internal Server Error
     */
    500: Result;
    /**
     * Default error handling for unmentioned status codes
     */
    default: Result;
};

export type PostSubmodelElementSubmodelRepositoryError =
    PostSubmodelElementSubmodelRepositoryErrors[keyof PostSubmodelElementSubmodelRepositoryErrors];

export type PostSubmodelElementSubmodelRepositoryResponses = {
    /**
     * Submodel element created successfully
     */
    201: SubmodelElement;
};

export type PostSubmodelElementSubmodelRepositoryResponse =
    PostSubmodelElementSubmodelRepositoryResponses[keyof PostSubmodelElementSubmodelRepositoryResponses];

export type GetAllSubmodelElementsMetadataSubmodelRepositoryData = {
    body?: never;
    path: {
        /**
         * The Submodel’s unique id (UTF8-BASE64-URL-encoded)
         */
        submodelIdentifier: string;
    };
    query?: {
        /**
         * The maximum number of elements in the response array
         */
        limit?: number;
        /**
         * A server-generated identifier retrieved from pagingMetadata that specifies from which position the result listing should continue
         */
        cursor?: string;
    };
    url: '/submodels/{submodelIdentifier}/submodel-elements/$metadata';
};

export type GetAllSubmodelElementsMetadataSubmodelRepositoryErrors = {
    /**
     * Bad Request, e.g. the request parameters of the format of the request body is wrong.
     */
    400: Result;
    /**
     * Unauthorized, e.g. the server refused the authorization attempt.
     */
    401: Result;
    /**
     * Forbidden
     */
    403: Result;
    /**
     * Not Found
     */
    404: Result;
    /**
     * Internal Server Error
     */
    500: Result;
    /**
     * Default error handling for unmentioned status codes
     */
    default: Result;
};

export type GetAllSubmodelElementsMetadataSubmodelRepositoryError =
    GetAllSubmodelElementsMetadataSubmodelRepositoryErrors[keyof GetAllSubmodelElementsMetadataSubmodelRepositoryErrors];

export type GetAllSubmodelElementsMetadataSubmodelRepositoryResponses = {
    /**
     * List of found submodel elements
     */
    200: GetSubmodelElementsMetadataResult;
};

export type GetAllSubmodelElementsMetadataSubmodelRepositoryResponse =
    GetAllSubmodelElementsMetadataSubmodelRepositoryResponses[keyof GetAllSubmodelElementsMetadataSubmodelRepositoryResponses];

export type GetAllSubmodelElementsValueOnlySubmodelRepoData = {
    body?: never;
    path: {
        /**
         * The Submodel’s unique id (UTF8-BASE64-URL-encoded)
         */
        submodelIdentifier: string;
    };
    query?: {
        /**
         * The maximum number of elements in the response array
         */
        limit?: number;
        /**
         * A server-generated identifier retrieved from pagingMetadata that specifies from which position the result listing should continue
         */
        cursor?: string;
        /**
         * Determines the structural depth of the respective resource content
         */
        level?: 'deep' | 'core';
        /**
         * Determines to which extent the resource is being serialized
         */
        extent?: 'withBlobValue' | 'withoutBlobValue';
    };
    url: '/submodels/{submodelIdentifier}/submodel-elements/$value';
};

export type GetAllSubmodelElementsValueOnlySubmodelRepoErrors = {
    /**
     * Bad Request, e.g. the request parameters of the format of the request body is wrong.
     */
    400: Result;
    /**
     * Unauthorized, e.g. the server refused the authorization attempt.
     */
    401: Result;
    /**
     * Forbidden
     */
    403: Result;
    /**
     * Not Found
     */
    404: Result;
    /**
     * Internal Server Error
     */
    500: Result;
    /**
     * Default error handling for unmentioned status codes
     */
    default: Result;
};

export type GetAllSubmodelElementsValueOnlySubmodelRepoError =
    GetAllSubmodelElementsValueOnlySubmodelRepoErrors[keyof GetAllSubmodelElementsValueOnlySubmodelRepoErrors];

export type GetAllSubmodelElementsValueOnlySubmodelRepoResponses = {
    /**
     * List of found submodel elements
     */
    200: GetSubmodelElementsValueResult;
};

export type GetAllSubmodelElementsValueOnlySubmodelRepoResponse =
    GetAllSubmodelElementsValueOnlySubmodelRepoResponses[keyof GetAllSubmodelElementsValueOnlySubmodelRepoResponses];

export type GetAllSubmodelElementsReferenceSubmodelRepoData = {
    body?: never;
    path: {
        /**
         * The Submodel’s unique id (UTF8-BASE64-URL-encoded)
         */
        submodelIdentifier: string;
    };
    query?: {
        /**
         * The maximum number of elements in the response array
         */
        limit?: number;
        /**
         * A server-generated identifier retrieved from pagingMetadata that specifies from which position the result listing should continue
         */
        cursor?: string;
        /**
         * Determines the structural depth of the respective resource content
         */
        level?: 'core';
    };
    url: '/submodels/{submodelIdentifier}/submodel-elements/$reference';
};

export type GetAllSubmodelElementsReferenceSubmodelRepoErrors = {
    /**
     * Bad Request, e.g. the request parameters of the format of the request body is wrong.
     */
    400: Result;
    /**
     * Unauthorized, e.g. the server refused the authorization attempt.
     */
    401: Result;
    /**
     * Forbidden
     */
    403: Result;
    /**
     * Not Found
     */
    404: Result;
    /**
     * Internal Server Error
     */
    500: Result;
    /**
     * Default error handling for unmentioned status codes
     */
    default: Result;
};

export type GetAllSubmodelElementsReferenceSubmodelRepoError =
    GetAllSubmodelElementsReferenceSubmodelRepoErrors[keyof GetAllSubmodelElementsReferenceSubmodelRepoErrors];

export type GetAllSubmodelElementsReferenceSubmodelRepoResponses = {
    /**
     * List of found submodel elements
     */
    200: GetReferencesResult;
};

export type GetAllSubmodelElementsReferenceSubmodelRepoResponse =
    GetAllSubmodelElementsReferenceSubmodelRepoResponses[keyof GetAllSubmodelElementsReferenceSubmodelRepoResponses];

export type GetAllSubmodelElementsPathSubmodelRepoData = {
    body?: never;
    path: {
        /**
         * The Submodel’s unique id (UTF8-BASE64-URL-encoded)
         */
        submodelIdentifier: string;
    };
    query?: {
        /**
         * The maximum number of elements in the response array
         */
        limit?: number;
        /**
         * A server-generated identifier retrieved from pagingMetadata that specifies from which position the result listing should continue
         */
        cursor?: string;
        /**
         * Determines the structural depth of the respective resource content
         */
        level?: 'deep' | 'core';
    };
    url: '/submodels/{submodelIdentifier}/submodel-elements/$path';
};

export type GetAllSubmodelElementsPathSubmodelRepoErrors = {
    /**
     * Bad Request, e.g. the request parameters of the format of the request body is wrong.
     */
    400: Result;
    /**
     * Unauthorized, e.g. the server refused the authorization attempt.
     */
    401: Result;
    /**
     * Forbidden
     */
    403: Result;
    /**
     * Not Found
     */
    404: Result;
    /**
     * Internal Server Error
     */
    500: Result;
    /**
     * Default error handling for unmentioned status codes
     */
    default: Result;
};

export type GetAllSubmodelElementsPathSubmodelRepoError =
    GetAllSubmodelElementsPathSubmodelRepoErrors[keyof GetAllSubmodelElementsPathSubmodelRepoErrors];

export type GetAllSubmodelElementsPathSubmodelRepoResponses = {
    /**
     * List of found submodel elements in the Path notation
     */
    200: GetPathItemsResult;
};

export type GetAllSubmodelElementsPathSubmodelRepoResponse =
    GetAllSubmodelElementsPathSubmodelRepoResponses[keyof GetAllSubmodelElementsPathSubmodelRepoResponses];

export type DeleteSubmodelElementByPathSubmodelRepoData = {
    body?: never;
    path: {
        /**
         * The Submodel’s unique id (UTF8-BASE64-URL-encoded)
         */
        submodelIdentifier: string;
        /**
         * IdShort path to the submodel element (dot-separated)
         */
        idShortPath: string;
    };
    query?: never;
    url: '/submodels/{submodelIdentifier}/submodel-elements/{idShortPath}';
};

export type DeleteSubmodelElementByPathSubmodelRepoErrors = {
    /**
     * Bad Request, e.g. the request parameters of the format of the request body is wrong.
     */
    400: Result;
    /**
     * Unauthorized, e.g. the server refused the authorization attempt.
     */
    401: Result;
    /**
     * Forbidden
     */
    403: Result;
    /**
     * Not Found
     */
    404: Result;
    /**
     * Internal Server Error
     */
    500: Result;
    /**
     * Default error handling for unmentioned status codes
     */
    default: Result;
};

export type DeleteSubmodelElementByPathSubmodelRepoError =
    DeleteSubmodelElementByPathSubmodelRepoErrors[keyof DeleteSubmodelElementByPathSubmodelRepoErrors];

export type DeleteSubmodelElementByPathSubmodelRepoResponses = {
    /**
     * Submodel element deleted successfully
     */
    204: void;
};

export type DeleteSubmodelElementByPathSubmodelRepoResponse =
    DeleteSubmodelElementByPathSubmodelRepoResponses[keyof DeleteSubmodelElementByPathSubmodelRepoResponses];

export type GetSubmodelElementByPathSubmodelRepoData = {
    body?: never;
    path: {
        /**
         * The Submodel’s unique id (UTF8-BASE64-URL-encoded)
         */
        submodelIdentifier: string;
        /**
         * IdShort path to the submodel element (dot-separated)
         */
        idShortPath: string;
    };
    query?: {
        /**
         * Determines the structural depth of the respective resource content
         */
        level?: 'deep' | 'core';
        /**
         * Determines to which extent the resource is being serialized
         */
        extent?: 'withBlobValue' | 'withoutBlobValue';
    };
    url: '/submodels/{submodelIdentifier}/submodel-elements/{idShortPath}';
};

export type GetSubmodelElementByPathSubmodelRepoErrors = {
    /**
     * Bad Request, e.g. the request parameters of the format of the request body is wrong.
     */
    400: Result;
    /**
     * Unauthorized, e.g. the server refused the authorization attempt.
     */
    401: Result;
    /**
     * Forbidden
     */
    403: Result;
    /**
     * Not Found
     */
    404: Result;
    /**
     * Internal Server Error
     */
    500: Result;
    /**
     * Default error handling for unmentioned status codes
     */
    default: Result;
};

export type GetSubmodelElementByPathSubmodelRepoError =
    GetSubmodelElementByPathSubmodelRepoErrors[keyof GetSubmodelElementByPathSubmodelRepoErrors];

export type GetSubmodelElementByPathSubmodelRepoResponses = {
    /**
     * Requested submodel element
     */
    200: SubmodelElement;
};

export type GetSubmodelElementByPathSubmodelRepoResponse =
    GetSubmodelElementByPathSubmodelRepoResponses[keyof GetSubmodelElementByPathSubmodelRepoResponses];

export type PatchSubmodelElementByPathSubmodelRepoData = {
    /**
     * SubmodelElement object
     */
    body: SubmodelElement;
    path: {
        /**
         * The Submodel’s unique id (UTF8-BASE64-URL-encoded)
         */
        submodelIdentifier: string;
        /**
         * IdShort path to the submodel element (dot-separated)
         */
        idShortPath: string;
    };
    query?: {
        /**
         * Determines the structural depth of the respective resource content
         */
        level?: 'core';
    };
    url: '/submodels/{submodelIdentifier}/submodel-elements/{idShortPath}';
};

export type PatchSubmodelElementByPathSubmodelRepoErrors = {
    /**
     * Bad Request, e.g. the request parameters of the format of the request body is wrong.
     */
    400: Result;
    /**
     * Unauthorized, e.g. the server refused the authorization attempt.
     */
    401: Result;
    /**
     * Forbidden
     */
    403: Result;
    /**
     * Not Found
     */
    404: Result;
    /**
     * Internal Server Error
     */
    500: Result;
    /**
     * Default error handling for unmentioned status codes
     */
    default: Result;
};

export type PatchSubmodelElementByPathSubmodelRepoError =
    PatchSubmodelElementByPathSubmodelRepoErrors[keyof PatchSubmodelElementByPathSubmodelRepoErrors];

export type PatchSubmodelElementByPathSubmodelRepoResponses = {
    /**
     * SubmodelElement updated successfully
     */
    204: void;
};

export type PatchSubmodelElementByPathSubmodelRepoResponse =
    PatchSubmodelElementByPathSubmodelRepoResponses[keyof PatchSubmodelElementByPathSubmodelRepoResponses];

export type PostSubmodelElementByPathSubmodelRepoData = {
    /**
     * Requested submodel element
     */
    body: SubmodelElement;
    path: {
        /**
         * The Submodel’s unique id (UTF8-BASE64-URL-encoded)
         */
        submodelIdentifier: string;
        /**
         * IdShort path to the submodel element (dot-separated)
         */
        idShortPath: string;
    };
    query?: never;
    url: '/submodels/{submodelIdentifier}/submodel-elements/{idShortPath}';
};

export type PostSubmodelElementByPathSubmodelRepoErrors = {
    /**
     * Bad Request, e.g. the request parameters of the format of the request body is wrong.
     */
    400: Result;
    /**
     * Unauthorized, e.g. the server refused the authorization attempt.
     */
    401: Result;
    /**
     * Forbidden
     */
    403: Result;
    /**
     * Not Found
     */
    404: Result;
    /**
     * Conflict, a resource which shall be created exists already. Might be thrown if a Submodel or SubmodelElement with the same ShortId is contained in a POST request.
     */
    409: Result;
    /**
     * Internal Server Error
     */
    500: Result;
    /**
     * Default error handling for unmentioned status codes
     */
    default: Result;
};

export type PostSubmodelElementByPathSubmodelRepoError =
    PostSubmodelElementByPathSubmodelRepoErrors[keyof PostSubmodelElementByPathSubmodelRepoErrors];

export type PostSubmodelElementByPathSubmodelRepoResponses = {
    /**
     * Submodel element created successfully
     */
    201: SubmodelElement;
};

export type PostSubmodelElementByPathSubmodelRepoResponse =
    PostSubmodelElementByPathSubmodelRepoResponses[keyof PostSubmodelElementByPathSubmodelRepoResponses];

export type PutSubmodelElementByPathSubmodelRepoData = {
    /**
     * Requested submodel element
     */
    body: SubmodelElement;
    path: {
        /**
         * The Submodel’s unique id (UTF8-BASE64-URL-encoded)
         */
        submodelIdentifier: string;
        /**
         * IdShort path to the submodel element (dot-separated)
         */
        idShortPath: string;
    };
    query?: {
        /**
         * Determines the structural depth of the respective resource content
         */
        level?: 'deep';
    };
    url: '/submodels/{submodelIdentifier}/submodel-elements/{idShortPath}';
};

export type PutSubmodelElementByPathSubmodelRepoErrors = {
    /**
     * Bad Request, e.g. the request parameters of the format of the request body is wrong.
     */
    400: Result;
    /**
     * Unauthorized, e.g. the server refused the authorization attempt.
     */
    401: Result;
    /**
     * Forbidden
     */
    403: Result;
    /**
     * Not Found
     */
    404: Result;
    /**
     * Internal Server Error
     */
    500: Result;
    /**
     * Default error handling for unmentioned status codes
     */
    default: Result;
};

export type PutSubmodelElementByPathSubmodelRepoError =
    PutSubmodelElementByPathSubmodelRepoErrors[keyof PutSubmodelElementByPathSubmodelRepoErrors];

export type PutSubmodelElementByPathSubmodelRepoResponses = {
    /**
     * Submodel element updated successfully
     */
    204: void;
};

export type PutSubmodelElementByPathSubmodelRepoResponse =
    PutSubmodelElementByPathSubmodelRepoResponses[keyof PutSubmodelElementByPathSubmodelRepoResponses];

export type GetSubmodelElementByPathMetadataSubmodelRepoData = {
    body?: never;
    path: {
        /**
         * The Submodel’s unique id (UTF8-BASE64-URL-encoded)
         */
        submodelIdentifier: string;
        /**
         * IdShort path to the submodel element (dot-separated)
         */
        idShortPath: string;
    };
    query?: never;
    url: '/submodels/{submodelIdentifier}/submodel-elements/{idShortPath}/$metadata';
};

export type GetSubmodelElementByPathMetadataSubmodelRepoErrors = {
    /**
     * Bad Request, e.g. the request parameters of the format of the request body is wrong.
     */
    400: Result;
    /**
     * Unauthorized, e.g. the server refused the authorization attempt.
     */
    401: Result;
    /**
     * Forbidden
     */
    403: Result;
    /**
     * Not Found
     */
    404: Result;
    /**
     * Internal Server Error
     */
    500: Result;
    /**
     * Default error handling for unmentioned status codes
     */
    default: Result;
};

export type GetSubmodelElementByPathMetadataSubmodelRepoError =
    GetSubmodelElementByPathMetadataSubmodelRepoErrors[keyof GetSubmodelElementByPathMetadataSubmodelRepoErrors];

export type GetSubmodelElementByPathMetadataSubmodelRepoResponses = {
    /**
     * Metadata attributes of the requested submodel element
     */
    200: SubmodelElementMetadata;
};

export type GetSubmodelElementByPathMetadataSubmodelRepoResponse =
    GetSubmodelElementByPathMetadataSubmodelRepoResponses[keyof GetSubmodelElementByPathMetadataSubmodelRepoResponses];

export type PatchSubmodelElementByPathMetadataSubmodelRepoData = {
    /**
     * Metadata attributes of the SubmodelElement
     */
    body: SubmodelElementMetadata;
    path: {
        /**
         * The Submodel’s unique id (UTF8-BASE64-URL-encoded)
         */
        submodelIdentifier: string;
        /**
         * IdShort path to the submodel element (dot-separated)
         */
        idShortPath: string;
    };
    query?: never;
    url: '/submodels/{submodelIdentifier}/submodel-elements/{idShortPath}/$metadata';
};

export type PatchSubmodelElementByPathMetadataSubmodelRepoErrors = {
    /**
     * Bad Request, e.g. the request parameters of the format of the request body is wrong.
     */
    400: Result;
    /**
     * Unauthorized, e.g. the server refused the authorization attempt.
     */
    401: Result;
    /**
     * Forbidden
     */
    403: Result;
    /**
     * Not Found
     */
    404: Result;
    /**
     * Internal Server Error
     */
    500: Result;
    /**
     * Default error handling for unmentioned status codes
     */
    default: Result;
};

export type PatchSubmodelElementByPathMetadataSubmodelRepoError =
    PatchSubmodelElementByPathMetadataSubmodelRepoErrors[keyof PatchSubmodelElementByPathMetadataSubmodelRepoErrors];

export type PatchSubmodelElementByPathMetadataSubmodelRepoResponses = {
    /**
     * SubmodelElement updated successfully
     */
    204: void;
};

export type PatchSubmodelElementByPathMetadataSubmodelRepoResponse =
    PatchSubmodelElementByPathMetadataSubmodelRepoResponses[keyof PatchSubmodelElementByPathMetadataSubmodelRepoResponses];

export type GetSubmodelElementByPathValueOnlySubmodelRepoData = {
    body?: never;
    path: {
        /**
         * The Submodel’s unique id (UTF8-BASE64-URL-encoded)
         */
        submodelIdentifier: string;
        /**
         * IdShort path to the submodel element (dot-separated)
         */
        idShortPath: string;
    };
    query?: {
        /**
         * Determines the structural depth of the respective resource content
         */
        level?: 'deep' | 'core';
        /**
         * Determines to which extent the resource is being serialized
         */
        extent?: 'withBlobValue' | 'withoutBlobValue';
    };
    url: '/submodels/{submodelIdentifier}/submodel-elements/{idShortPath}/$value';
};

export type GetSubmodelElementByPathValueOnlySubmodelRepoErrors = {
    /**
     * Bad Request, e.g. the request parameters of the format of the request body is wrong.
     */
    400: Result;
    /**
     * Unauthorized, e.g. the server refused the authorization attempt.
     */
    401: Result;
    /**
     * Forbidden
     */
    403: Result;
    /**
     * Not Found
     */
    404: Result;
    /**
     * Internal Server Error
     */
    500: Result;
    /**
     * Default error handling for unmentioned status codes
     */
    default: Result;
};

export type GetSubmodelElementByPathValueOnlySubmodelRepoError =
    GetSubmodelElementByPathValueOnlySubmodelRepoErrors[keyof GetSubmodelElementByPathValueOnlySubmodelRepoErrors];

export type GetSubmodelElementByPathValueOnlySubmodelRepoResponses = {
    /**
     * Requested submodel element
     */
    200: SubmodelElementValue;
};

export type GetSubmodelElementByPathValueOnlySubmodelRepoResponse =
    GetSubmodelElementByPathValueOnlySubmodelRepoResponses[keyof GetSubmodelElementByPathValueOnlySubmodelRepoResponses];

export type PatchSubmodelElementByPathValueOnlySubmodelRepoData = {
    /**
     * The SubmodelElement in its ValueOnly representation
     */
    body: SubmodelElementValue;
    path: {
        /**
         * The Submodel’s unique id (UTF8-BASE64-URL-encoded)
         */
        submodelIdentifier: string;
        /**
         * IdShort path to the submodel element (dot-separated)
         */
        idShortPath: string;
    };
    query?: never;
    url: '/submodels/{submodelIdentifier}/submodel-elements/{idShortPath}/$value';
};

export type PatchSubmodelElementByPathValueOnlySubmodelRepoErrors = {
    /**
     * Bad Request, e.g. the request parameters of the format of the request body is wrong.
     */
    400: Result;
    /**
     * Unauthorized, e.g. the server refused the authorization attempt.
     */
    401: Result;
    /**
     * Forbidden
     */
    403: Result;
    /**
     * Not Found
     */
    404: Result;
    /**
     * Internal Server Error
     */
    500: Result;
    /**
     * Default error handling for unmentioned status codes
     */
    default: Result;
};

export type PatchSubmodelElementByPathValueOnlySubmodelRepoError =
    PatchSubmodelElementByPathValueOnlySubmodelRepoErrors[keyof PatchSubmodelElementByPathValueOnlySubmodelRepoErrors];

export type PatchSubmodelElementByPathValueOnlySubmodelRepoResponses = {
    /**
     * Submodel updated successfully
     */
    204: void;
};

export type PatchSubmodelElementByPathValueOnlySubmodelRepoResponse =
    PatchSubmodelElementByPathValueOnlySubmodelRepoResponses[keyof PatchSubmodelElementByPathValueOnlySubmodelRepoResponses];

export type GetSubmodelElementByPathReferenceSubmodelRepoData = {
    body?: never;
    path: {
        /**
         * The Submodel’s unique id (UTF8-BASE64-URL-encoded)
         */
        submodelIdentifier: string;
        /**
         * IdShort path to the submodel element (dot-separated)
         */
        idShortPath: string;
    };
    query?: never;
    url: '/submodels/{submodelIdentifier}/submodel-elements/{idShortPath}/$reference';
};

export type GetSubmodelElementByPathReferenceSubmodelRepoErrors = {
    /**
     * Bad Request, e.g. the request parameters of the format of the request body is wrong.
     */
    400: Result;
    /**
     * Unauthorized, e.g. the server refused the authorization attempt.
     */
    401: Result;
    /**
     * Forbidden
     */
    403: Result;
    /**
     * Not Found
     */
    404: Result;
    /**
     * Internal Server Error
     */
    500: Result;
    /**
     * Default error handling for unmentioned status codes
     */
    default: Result;
};

export type GetSubmodelElementByPathReferenceSubmodelRepoError =
    GetSubmodelElementByPathReferenceSubmodelRepoErrors[keyof GetSubmodelElementByPathReferenceSubmodelRepoErrors];

export type GetSubmodelElementByPathReferenceSubmodelRepoResponses = {
    /**
     * Requested submodel element
     */
    200: Reference;
};

export type GetSubmodelElementByPathReferenceSubmodelRepoResponse =
    GetSubmodelElementByPathReferenceSubmodelRepoResponses[keyof GetSubmodelElementByPathReferenceSubmodelRepoResponses];

export type GetSubmodelElementByPathPathSubmodelRepoData = {
    body?: never;
    path: {
        /**
         * The Submodel’s unique id (UTF8-BASE64-URL-encoded)
         */
        submodelIdentifier: string;
        /**
         * IdShort path to the submodel element (dot-separated)
         */
        idShortPath: string;
    };
    query?: {
        /**
         * Determines the structural depth of the respective resource content
         */
        level?: 'deep' | 'core';
    };
    url: '/submodels/{submodelIdentifier}/submodel-elements/{idShortPath}/$path';
};

export type GetSubmodelElementByPathPathSubmodelRepoErrors = {
    /**
     * Bad Request, e.g. the request parameters of the format of the request body is wrong.
     */
    400: Result;
    /**
     * Unauthorized, e.g. the server refused the authorization attempt.
     */
    401: Result;
    /**
     * Forbidden
     */
    403: Result;
    /**
     * Not Found
     */
    404: Result;
    /**
     * Internal Server Error
     */
    500: Result;
    /**
     * Default error handling for unmentioned status codes
     */
    default: Result;
};

export type GetSubmodelElementByPathPathSubmodelRepoError =
    GetSubmodelElementByPathPathSubmodelRepoErrors[keyof GetSubmodelElementByPathPathSubmodelRepoErrors];

export type GetSubmodelElementByPathPathSubmodelRepoResponses = {
    /**
     * Requested submodel element
     */
    200: Array<PathItem>;
};

export type GetSubmodelElementByPathPathSubmodelRepoResponse =
    GetSubmodelElementByPathPathSubmodelRepoResponses[keyof GetSubmodelElementByPathPathSubmodelRepoResponses];

export type DeleteFileByPathSubmodelRepoData = {
    body?: never;
    path: {
        /**
         * The Submodel’s unique id (UTF8-BASE64-URL-encoded)
         */
        submodelIdentifier: string;
        /**
         * IdShort path to the submodel element (dot-separated)
         */
        idShortPath: string;
    };
    query?: never;
    url: '/submodels/{submodelIdentifier}/submodel-elements/{idShortPath}/attachment';
};

export type DeleteFileByPathSubmodelRepoErrors = {
    /**
     * Bad Request, e.g. the request parameters of the format of the request body is wrong.
     */
    400: Result;
    /**
     * Unauthorized, e.g. the server refused the authorization attempt.
     */
    401: Result;
    /**
     * Forbidden
     */
    403: Result;
    /**
     * Not Found
     */
    404: Result;
    /**
     * Internal Server Error
     */
    500: Result;
    /**
     * Default error handling for unmentioned status codes
     */
    default: Result;
};

export type DeleteFileByPathSubmodelRepoError =
    DeleteFileByPathSubmodelRepoErrors[keyof DeleteFileByPathSubmodelRepoErrors];

export type DeleteFileByPathSubmodelRepoResponses = {
    /**
     * Submodel element updated successfully
     */
    200: unknown;
};

export type GetFileByPathSubmodelRepoData = {
    body?: never;
    path: {
        /**
         * The Submodel’s unique id (UTF8-BASE64-URL-encoded)
         */
        submodelIdentifier: string;
        /**
         * IdShort path to the submodel element (dot-separated)
         */
        idShortPath: string;
    };
    query?: never;
    url: '/submodels/{submodelIdentifier}/submodel-elements/{idShortPath}/attachment';
};

export type GetFileByPathSubmodelRepoErrors = {
    /**
     * Bad Request, e.g. the request parameters of the format of the request body is wrong.
     */
    400: Result;
    /**
     * Unauthorized, e.g. the server refused the authorization attempt.
     */
    401: Result;
    /**
     * Forbidden
     */
    403: Result;
    /**
     * Not Found
     */
    404: Result;
    /**
     * Method not allowed - Download only valid for File submodel element
     */
    405: Result;
    /**
     * Internal Server Error
     */
    500: Result;
    /**
     * Default error handling for unmentioned status codes
     */
    default: Result;
};

export type GetFileByPathSubmodelRepoError = GetFileByPathSubmodelRepoErrors[keyof GetFileByPathSubmodelRepoErrors];

export type GetFileByPathSubmodelRepoResponses = {
    /**
     * Requested file
     */
    200: Blob | File;
};

export type GetFileByPathSubmodelRepoResponse =
    GetFileByPathSubmodelRepoResponses[keyof GetFileByPathSubmodelRepoResponses];

export type PutFileByPathSubmodelRepoData = {
    /**
     * File to upload
     */
    body: IdShortPathAttachmentBody3;
    path: {
        /**
         * The Submodel’s unique id (UTF8-BASE64-URL-encoded)
         */
        submodelIdentifier: string;
        /**
         * IdShort path to the submodel element (dot-separated)
         */
        idShortPath: string;
    };
    query?: never;
    url: '/submodels/{submodelIdentifier}/submodel-elements/{idShortPath}/attachment';
};

export type PutFileByPathSubmodelRepoErrors = {
    /**
     * Bad Request, e.g. the request parameters of the format of the request body is wrong.
     */
    400: Result;
    /**
     * Unauthorized, e.g. the server refused the authorization attempt.
     */
    401: Result;
    /**
     * Forbidden
     */
    403: Result;
    /**
     * Not Found
     */
    404: Result;
    /**
     * Method not allowed - Upload only valid for File submodel element
     */
    405: Result;
    /**
     * Internal Server Error
     */
    500: Result;
    /**
     * Default error handling for unmentioned status codes
     */
    default: Result;
};

export type PutFileByPathSubmodelRepoError = PutFileByPathSubmodelRepoErrors[keyof PutFileByPathSubmodelRepoErrors];

export type PutFileByPathSubmodelRepoResponses = {
    /**
     * Submodel element updated successfully
     */
    204: void;
};

export type PutFileByPathSubmodelRepoResponse =
    PutFileByPathSubmodelRepoResponses[keyof PutFileByPathSubmodelRepoResponses];

export type InvokeOperationSubmodelRepoData = {
    /**
     * Operation request object
     */
    body: OperationRequest;
    path: {
        /**
         * The Submodel’s unique id (UTF8-BASE64-URL-encoded)
         */
        submodelIdentifier: string;
        /**
         * IdShort path to the submodel element (dot-separated)
         */
        idShortPath: string;
    };
    query?: {
        /**
         * Determines whether an operation invocation is performed asynchronously or synchronously
         */
        async?: boolean;
    };
    url: '/submodels/{submodelIdentifier}/submodel-elements/{idShortPath}/invoke';
};

export type InvokeOperationSubmodelRepoErrors = {
    /**
     * Bad Request, e.g. the request parameters of the format of the request body is wrong.
     */
    400: Result;
    /**
     * Unauthorized, e.g. the server refused the authorization attempt.
     */
    401: Result;
    /**
     * Forbidden
     */
    403: Result;
    /**
     * Not Found
     */
    404: Result;
    /**
     * Method not allowed - Invoke only valid for Operation submodel element
     */
    405: Result;
    /**
     * Internal Server Error
     */
    500: Result;
    /**
     * Default error handling for unmentioned status codes
     */
    default: Result;
};

export type InvokeOperationSubmodelRepoError =
    InvokeOperationSubmodelRepoErrors[keyof InvokeOperationSubmodelRepoErrors];

export type InvokeOperationSubmodelRepoResponses = {
    /**
     * Operation result object
     */
    200: OperationResult;
};

export type InvokeOperationSubmodelRepoResponse =
    InvokeOperationSubmodelRepoResponses[keyof InvokeOperationSubmodelRepoResponses];

export type InvokeOperationValueOnlySubmodelRepoData = {
    /**
     * Operation request object
     */
    body: OperationRequestValueOnly;
    path: {
        /**
         * The Asset Administration Shell’s unique id (UTF8-BASE64-URL-encoded)
         */
        aasIdentifier: string;
        /**
         * The Submodel’s unique id (UTF8-BASE64-URL-encoded)
         */
        submodelIdentifier: string;
        /**
         * IdShort path to the submodel element (dot-separated)
         */
        idShortPath: string;
    };
    query?: {
        /**
         * Determines whether an operation invocation is performed asynchronously or synchronously
         */
        async?: boolean;
    };
    url: '/submodels/{submodelIdentifier}/submodel-elements/{idShortPath}/invoke/$value';
};

export type InvokeOperationValueOnlySubmodelRepoErrors = {
    /**
     * Bad Request, e.g. the request parameters of the format of the request body is wrong.
     */
    400: Result;
    /**
     * Unauthorized, e.g. the server refused the authorization attempt.
     */
    401: Result;
    /**
     * Forbidden
     */
    403: Result;
    /**
     * Not Found
     */
    404: Result;
    /**
     * Internal Server Error
     */
    500: Result;
    /**
     * Default error handling for unmentioned status codes
     */
    default: Result;
};

export type InvokeOperationValueOnlySubmodelRepoError =
    InvokeOperationValueOnlySubmodelRepoErrors[keyof InvokeOperationValueOnlySubmodelRepoErrors];

export type InvokeOperationValueOnlySubmodelRepoResponses = {
    /**
     * Operation result object
     */
    200: OperationResultValueOnly;
};

export type InvokeOperationValueOnlySubmodelRepoResponse =
    InvokeOperationValueOnlySubmodelRepoResponses[keyof InvokeOperationValueOnlySubmodelRepoResponses];

export type InvokeOperationAsyncSubmodelRepoData = {
    /**
     * Operation request object
     */
    body: OperationRequest;
    path: {
        /**
         * The Submodel’s unique id (UTF8-BASE64-URL-encoded)
         */
        submodelIdentifier: string;
        /**
         * IdShort path to the submodel element (dot-separated)
         */
        idShortPath: string;
    };
    query?: never;
    url: '/submodels/{submodelIdentifier}/submodel-elements/{idShortPath}/invoke-async';
};

export type InvokeOperationAsyncSubmodelRepoErrors = {
    /**
     * Bad Request, e.g. the request parameters of the format of the request body is wrong.
     */
    400: Result;
    /**
     * Unauthorized, e.g. the server refused the authorization attempt.
     */
    401: Result;
    /**
     * Forbidden
     */
    403: Result;
    /**
     * Not Found
     */
    404: Result;
    /**
     * Method not allowed - Invoke only valid for Operation submodel element
     */
    405: Result;
    /**
     * Internal Server Error
     */
    500: Result;
    /**
     * Default error handling for unmentioned status codes
     */
    default: Result;
};

export type InvokeOperationAsyncSubmodelRepoError =
    InvokeOperationAsyncSubmodelRepoErrors[keyof InvokeOperationAsyncSubmodelRepoErrors];

export type InvokeOperationAsyncSubmodelRepoResponses = {
    /**
     * The server has accepted the request.
     */
    202: unknown;
};

export type InvokeOperationAsyncValueOnlySubmodelRepoData = {
    /**
     * Operation request object
     */
    body: OperationRequestValueOnly;
    path: {
        /**
         * The Asset Administration Shell’s unique id (UTF8-BASE64-URL-encoded)
         */
        aasIdentifier: string;
        /**
         * The Submodel’s unique id (UTF8-BASE64-URL-encoded)
         */
        submodelIdentifier: string;
        /**
         * IdShort path to the submodel element (dot-separated)
         */
        idShortPath: string;
    };
    query?: never;
    url: '/submodels/{submodelIdentifier}/submodel-elements/{idShortPath}/invoke-async/$value';
};

export type InvokeOperationAsyncValueOnlySubmodelRepoErrors = {
    /**
     * Bad Request, e.g. the request parameters of the format of the request body is wrong.
     */
    400: Result;
    /**
     * Unauthorized, e.g. the server refused the authorization attempt.
     */
    401: Result;
    /**
     * Forbidden
     */
    403: Result;
    /**
     * Not Found
     */
    404: Result;
    /**
     * Internal Server Error
     */
    500: Result;
    /**
     * Default error handling for unmentioned status codes
     */
    default: Result;
};

export type InvokeOperationAsyncValueOnlySubmodelRepoError =
    InvokeOperationAsyncValueOnlySubmodelRepoErrors[keyof InvokeOperationAsyncValueOnlySubmodelRepoErrors];

export type InvokeOperationAsyncValueOnlySubmodelRepoResponses = {
    /**
     * The server has accepted the request.
     */
    202: unknown;
};

export type GetOperationAsyncStatusSubmodelRepoData = {
    body?: never;
    path: {
        /**
         * The Submodel’s unique id (UTF8-BASE64-URL-encoded)
         */
        submodelIdentifier: string;
        /**
         * IdShort path to the submodel element (dot-separated)
         */
        idShortPath: string;
        /**
         * The returned handle id of an operation’s asynchronous invocation used to request the current state of the operation’s execution (UTF8-BASE64-URL-encoded)
         */
        handleId: string;
    };
    query?: never;
    url: '/submodels/{submodelIdentifier}/submodel-elements/{idShortPath}/operation-status/{handleId}';
};

export type GetOperationAsyncStatusSubmodelRepoErrors = {
    /**
     * Bad Request, e.g. the request parameters of the format of the request body is wrong.
     */
    400: Result;
    /**
     * Unauthorized, e.g. the server refused the authorization attempt.
     */
    401: Result;
    /**
     * Forbidden
     */
    403: Result;
    /**
     * Not Found
     */
    404: Result;
    /**
     * Internal Server Error
     */
    500: Result;
    /**
     * Default error handling for unmentioned status codes
     */
    default: Result;
};

export type GetOperationAsyncStatusSubmodelRepoError =
    GetOperationAsyncStatusSubmodelRepoErrors[keyof GetOperationAsyncStatusSubmodelRepoErrors];

export type GetOperationAsyncStatusSubmodelRepoResponses = {
    /**
     * Operation status object
     */
    200: OperationResult;
};

export type GetOperationAsyncStatusSubmodelRepoResponse =
    GetOperationAsyncStatusSubmodelRepoResponses[keyof GetOperationAsyncStatusSubmodelRepoResponses];

export type GetOperationAsyncResultSubmodelRepoData = {
    body?: never;
    path: {
        /**
         * The Submodel’s unique id (UTF8-BASE64-URL-encoded)
         */
        submodelIdentifier: string;
        /**
         * IdShort path to the submodel element (dot-separated)
         */
        idShortPath: string;
        /**
         * The returned handle id of an operation’s asynchronous invocation used to request the current state of the operation’s execution (UTF8-BASE64-URL-encoded)
         */
        handleId: string;
    };
    query?: never;
    url: '/submodels/{submodelIdentifier}/submodel-elements/{idShortPath}/operation-results/{handleId}';
};

export type GetOperationAsyncResultSubmodelRepoErrors = {
    /**
     * Bad Request, e.g. the request parameters of the format of the request body is wrong.
     */
    400: Result;
    /**
     * Unauthorized, e.g. the server refused the authorization attempt.
     */
    401: Result;
    /**
     * Forbidden
     */
    403: Result;
    /**
     * Not Found
     */
    404: Result;
    /**
     * Internal Server Error
     */
    500: Result;
    /**
     * Default error handling for unmentioned status codes
     */
    default: Result;
};

export type GetOperationAsyncResultSubmodelRepoError =
    GetOperationAsyncResultSubmodelRepoErrors[keyof GetOperationAsyncResultSubmodelRepoErrors];

export type GetOperationAsyncResultSubmodelRepoResponses = {
    /**
     * Operation result object
     */
    200: OperationResult;
};

export type GetOperationAsyncResultSubmodelRepoResponse =
    GetOperationAsyncResultSubmodelRepoResponses[keyof GetOperationAsyncResultSubmodelRepoResponses];

export type GetOperationAsyncResultValueOnlySubmodelRepoData = {
    body?: never;
    path: {
        /**
         * The Submodel’s unique id (UTF8-BASE64-URL-encoded)
         */
        submodelIdentifier: string;
        /**
         * IdShort path to the submodel element (dot-separated)
         */
        idShortPath: string;
        /**
         * The returned handle id of an operation’s asynchronous invocation used to request the current state of the operation’s execution (UTF8-BASE64-URL-encoded)
         */
        handleId: string;
    };
    query?: never;
    url: '/submodels/{submodelIdentifier}/submodel-elements/{idShortPath}/operation-results/{handleId}/$value';
};

export type GetOperationAsyncResultValueOnlySubmodelRepoErrors = {
    /**
     * Bad Request, e.g. the request parameters of the format of the request body is wrong.
     */
    400: Result;
    /**
     * Unauthorized, e.g. the server refused the authorization attempt.
     */
    401: Result;
    /**
     * Forbidden
     */
    403: Result;
    /**
     * Not Found
     */
    404: Result;
    /**
     * Internal Server Error
     */
    500: Result;
    /**
     * Default error handling for unmentioned status codes
     */
    default: Result;
};

export type GetOperationAsyncResultValueOnlySubmodelRepoError =
    GetOperationAsyncResultValueOnlySubmodelRepoErrors[keyof GetOperationAsyncResultValueOnlySubmodelRepoErrors];

export type GetOperationAsyncResultValueOnlySubmodelRepoResponses = {
    /**
     * Value of the operation result object
     */
    200: OperationResultValueOnly;
};

export type GetOperationAsyncResultValueOnlySubmodelRepoResponse =
    GetOperationAsyncResultValueOnlySubmodelRepoResponses[keyof GetOperationAsyncResultValueOnlySubmodelRepoResponses];

export type GetAllConceptDescriptionsData = {
    body?: never;
    path?: never;
    query?: {
        /**
         * The Concept Description’s IdShort
         */
        idShort?: string;
        /**
         * IsCaseOf reference (UTF8-BASE64-URL-encoded)
         */
        isCaseOf?: string;
        /**
         * DataSpecification reference (UTF8-BASE64-URL-encoded)
         */
        dataSpecificationRef?: string;
        /**
         * The maximum number of elements in the response array
         */
        limit?: number;
        /**
         * A server-generated identifier retrieved from pagingMetadata that specifies from which position the result listing should continue
         */
        cursor?: string;
    };
    url: '/concept-descriptions';
};

export type GetAllConceptDescriptionsErrors = {
    /**
     * Bad Request, e.g. the request parameters of the format of the request body is wrong.
     */
    400: Result;
    /**
     * Forbidden
     */
    403: Result;
    /**
     * Internal Server Error
     */
    500: Result;
    /**
     * Default error handling for unmentioned status codes
     */
    default: Result;
};

export type GetAllConceptDescriptionsError = GetAllConceptDescriptionsErrors[keyof GetAllConceptDescriptionsErrors];

export type GetAllConceptDescriptionsResponses = {
    /**
     * Requested Concept Descriptions
     */
    200: GetConceptDescriptionsResult;
};

export type GetAllConceptDescriptionsResponse =
    GetAllConceptDescriptionsResponses[keyof GetAllConceptDescriptionsResponses];

export type PostConceptDescriptionData = {
    /**
     * Concept Description object
     */
    body: ConceptDescription;
    path?: never;
    query?: never;
    url: '/concept-descriptions';
};

export type PostConceptDescriptionErrors = {
    /**
     * Bad Request, e.g. the request parameters of the format of the request body is wrong.
     */
    400: Result;
    /**
     * Forbidden
     */
    403: Result;
    /**
     * Conflict, a resource which shall be created exists already. Might be thrown if a Submodel or SubmodelElement with the same ShortId is contained in a POST request.
     */
    409: Result;
    /**
     * Internal Server Error
     */
    500: Result;
    /**
     * Default error handling for unmentioned status codes
     */
    default: Result;
};

export type PostConceptDescriptionError = PostConceptDescriptionErrors[keyof PostConceptDescriptionErrors];

export type PostConceptDescriptionResponses = {
    /**
     * Concept Description created successfully
     */
    201: ConceptDescription;
};

export type PostConceptDescriptionResponse = PostConceptDescriptionResponses[keyof PostConceptDescriptionResponses];

export type DeleteConceptDescriptionByIdData = {
    body?: never;
    path: {
        /**
         * The Concept Description’s unique id (UTF8-BASE64-URL-encoded)
         */
        cdIdentifier: string;
    };
    query?: never;
    url: '/concept-descriptions/{cdIdentifier}';
};

export type DeleteConceptDescriptionByIdErrors = {
    /**
     * Bad Request, e.g. the request parameters of the format of the request body is wrong.
     */
    400: Result;
    /**
     * Forbidden
     */
    403: Result;
    /**
     * Not Found
     */
    404: Result;
    /**
     * Internal Server Error
     */
    500: Result;
    /**
     * Default error handling for unmentioned status codes
     */
    default: Result;
};

export type DeleteConceptDescriptionByIdError =
    DeleteConceptDescriptionByIdErrors[keyof DeleteConceptDescriptionByIdErrors];

export type DeleteConceptDescriptionByIdResponses = {
    /**
     * Concept Description deleted successfully
     */
    204: void;
};

export type DeleteConceptDescriptionByIdResponse =
    DeleteConceptDescriptionByIdResponses[keyof DeleteConceptDescriptionByIdResponses];

export type GetConceptDescriptionByIdData = {
    body?: never;
    path: {
        /**
         * The Concept Description’s unique id (UTF8-BASE64-URL-encoded)
         */
        cdIdentifier: string;
    };
    query?: never;
    url: '/concept-descriptions/{cdIdentifier}';
};

export type GetConceptDescriptionByIdErrors = {
    /**
     * Bad Request, e.g. the request parameters of the format of the request body is wrong.
     */
    400: Result;
    /**
     * Forbidden
     */
    403: Result;
    /**
     * Not Found
     */
    404: Result;
    /**
     * Internal Server Error
     */
    500: Result;
    /**
     * Default error handling for unmentioned status codes
     */
    default: Result;
};

export type GetConceptDescriptionByIdError = GetConceptDescriptionByIdErrors[keyof GetConceptDescriptionByIdErrors];

export type GetConceptDescriptionByIdResponses = {
    /**
     * Requested Concept Description
     */
    200: ConceptDescription;
};

export type GetConceptDescriptionByIdResponse =
    GetConceptDescriptionByIdResponses[keyof GetConceptDescriptionByIdResponses];

export type PutConceptDescriptionByIdData = {
    /**
     * Concept Description object
     */
    body: ConceptDescription;
    path: {
        /**
         * The Concept Description’s unique id (UTF8-BASE64-URL-encoded)
         */
        cdIdentifier: string;
    };
    query?: never;
    url: '/concept-descriptions/{cdIdentifier}';
};

export type PutConceptDescriptionByIdErrors = {
    /**
     * Bad Request, e.g. the request parameters of the format of the request body is wrong.
     */
    400: Result;
    /**
     * Forbidden
     */
    403: Result;
    /**
     * Not Found
     */
    404: Result;
    /**
     * Internal Server Error
     */
    500: Result;
    /**
     * Default error handling for unmentioned status codes
     */
    default: Result;
};

export type PutConceptDescriptionByIdError = PutConceptDescriptionByIdErrors[keyof PutConceptDescriptionByIdErrors];

export type PutConceptDescriptionByIdResponses = {
    /**
     * Concept Description updated successfully
     */
    204: void;
};

export type PutConceptDescriptionByIdResponse =
    PutConceptDescriptionByIdResponses[keyof PutConceptDescriptionByIdResponses];

export type GetAllAssetAdministrationShellDescriptorsData = {
    body?: never;
    path?: never;
    query?: {
        /**
         * The maximum number of elements in the response array
         */
        limit?: number;
        /**
         * A server-generated identifier retrieved from pagingMetadata that specifies from which position the result listing should continue
         */
        cursor?: string;
        /**
         * The Asset's kind (Instance or Type)
         */
        assetKind?: AssetKind;
        /**
         * The Asset's type (UTF8-BASE64-URL-encoded)
         */
        assetType?: string;
    };
    url: '/shell-descriptors';
};

export type GetAllAssetAdministrationShellDescriptorsErrors = {
    /**
     * Bad Request, e.g. the request parameters of the format of the request body is wrong.
     */
    400: Result;
    /**
     * Forbidden
     */
    403: Result;
    /**
     * Internal Server Error
     */
    500: Result;
    /**
     * Default error handling for unmentioned status codes
     */
    default: Result;
};

export type GetAllAssetAdministrationShellDescriptorsError =
    GetAllAssetAdministrationShellDescriptorsErrors[keyof GetAllAssetAdministrationShellDescriptorsErrors];

export type GetAllAssetAdministrationShellDescriptorsResponses = {
    /**
     * Requested Asset Administration Shell Descriptors
     */
    200: GetAssetAdministrationShellDescriptorsResult;
};

export type GetAllAssetAdministrationShellDescriptorsResponse =
    GetAllAssetAdministrationShellDescriptorsResponses[keyof GetAllAssetAdministrationShellDescriptorsResponses];

export type PostAssetAdministrationShellDescriptorData = {
    /**
     * Asset Administration Shell Descriptor object
     */
    body: AssetAdministrationShellDescriptor;
    path?: never;
    query?: never;
    url: '/shell-descriptors';
};

export type PostAssetAdministrationShellDescriptorErrors = {
    /**
     * Bad Request, e.g. the request parameters of the format of the request body is wrong.
     */
    400: Result;
    /**
     * Forbidden
     */
    403: Result;
    /**
     * Conflict, a resource which shall be created exists already. Might be thrown if a Submodel or SubmodelElement with the same ShortId is contained in a POST request.
     */
    409: Result;
    /**
     * Internal Server Error
     */
    500: Result;
    /**
     * Default error handling for unmentioned status codes
     */
    default: Result;
};

export type PostAssetAdministrationShellDescriptorError =
    PostAssetAdministrationShellDescriptorErrors[keyof PostAssetAdministrationShellDescriptorErrors];

export type PostAssetAdministrationShellDescriptorResponses = {
    /**
     * Asset Administration Shell Descriptor created successfully
     */
    201: AssetAdministrationShellDescriptor;
};

export type PostAssetAdministrationShellDescriptorResponse =
    PostAssetAdministrationShellDescriptorResponses[keyof PostAssetAdministrationShellDescriptorResponses];

export type DeleteAssetAdministrationShellDescriptorByIdData = {
    body?: never;
    path: {
        /**
         * The Asset Administration Shell’s unique id (UTF8-BASE64-URL-encoded)
         */
        aasIdentifier: string;
    };
    query?: never;
    url: '/shell-descriptors/{aasIdentifier}';
};

export type DeleteAssetAdministrationShellDescriptorByIdErrors = {
    /**
     * Bad Request, e.g. the request parameters of the format of the request body is wrong.
     */
    400: Result;
    /**
     * Not Found
     */
    404: Result;
    /**
     * Internal Server Error
     */
    500: Result;
    /**
     * Default error handling for unmentioned status codes
     */
    default: Result;
};

export type DeleteAssetAdministrationShellDescriptorByIdError =
    DeleteAssetAdministrationShellDescriptorByIdErrors[keyof DeleteAssetAdministrationShellDescriptorByIdErrors];

export type DeleteAssetAdministrationShellDescriptorByIdResponses = {
    /**
     * Asset Administration Shell Descriptor deleted successfully
     */
    204: void;
};

export type DeleteAssetAdministrationShellDescriptorByIdResponse =
    DeleteAssetAdministrationShellDescriptorByIdResponses[keyof DeleteAssetAdministrationShellDescriptorByIdResponses];

export type GetAssetAdministrationShellDescriptorByIdData = {
    body?: never;
    path: {
        /**
         * The Asset Administration Shell’s unique id (UTF8-BASE64-URL-encoded)
         */
        aasIdentifier: string;
    };
    query?: never;
    url: '/shell-descriptors/{aasIdentifier}';
};

export type GetAssetAdministrationShellDescriptorByIdErrors = {
    /**
     * Bad Request, e.g. the request parameters of the format of the request body is wrong.
     */
    400: Result;
    /**
     * Forbidden
     */
    403: Result;
    /**
     * Not Found
     */
    404: Result;
    /**
     * Internal Server Error
     */
    500: Result;
    /**
     * Default error handling for unmentioned status codes
     */
    default: Result;
};

export type GetAssetAdministrationShellDescriptorByIdError =
    GetAssetAdministrationShellDescriptorByIdErrors[keyof GetAssetAdministrationShellDescriptorByIdErrors];

export type GetAssetAdministrationShellDescriptorByIdResponses = {
    /**
     * Requested Asset Administration Shell Descriptor
     */
    200: AssetAdministrationShellDescriptor;
};

export type GetAssetAdministrationShellDescriptorByIdResponse =
    GetAssetAdministrationShellDescriptorByIdResponses[keyof GetAssetAdministrationShellDescriptorByIdResponses];

export type PutAssetAdministrationShellDescriptorByIdData = {
    /**
     * Asset Administration Shell Descriptor object
     */
    body: AssetAdministrationShellDescriptor;
    path: {
        /**
         * The Asset Administration Shell’s unique id (UTF8-BASE64-URL-encoded)
         */
        aasIdentifier: string;
    };
    query?: never;
    url: '/shell-descriptors/{aasIdentifier}';
};

export type PutAssetAdministrationShellDescriptorByIdErrors = {
    /**
     * Bad Request, e.g. the request parameters of the format of the request body is wrong.
     */
    400: Result;
    /**
     * Forbidden
     */
    403: Result;
    /**
     * Not Found
     */
    404: Result;
    /**
     * Internal Server Error
     */
    500: Result;
    /**
     * Default error handling for unmentioned status codes
     */
    default: Result;
};

export type PutAssetAdministrationShellDescriptorByIdError =
    PutAssetAdministrationShellDescriptorByIdErrors[keyof PutAssetAdministrationShellDescriptorByIdErrors];

export type PutAssetAdministrationShellDescriptorByIdResponses = {
    /**
     * Asset Administration Shell Descriptor updated successfully
     */
    204: void;
};

export type PutAssetAdministrationShellDescriptorByIdResponse =
    PutAssetAdministrationShellDescriptorByIdResponses[keyof PutAssetAdministrationShellDescriptorByIdResponses];

export type GetAllSubmodelDescriptorsThroughSuperpathData = {
    body?: never;
    path: {
        /**
         * The Asset Administration Shell’s unique id (UTF8-BASE64-URL-encoded)
         */
        aasIdentifier: string;
    };
    query?: {
        /**
         * The maximum number of elements in the response array
         */
        limit?: number;
        /**
         * A server-generated identifier retrieved from pagingMetadata that specifies from which position the result listing should continue
         */
        cursor?: string;
    };
    url: '/shell-descriptors/{aasIdentifier}/submodel-descriptors';
};

export type GetAllSubmodelDescriptorsThroughSuperpathErrors = {
    /**
     * Bad Request, e.g. the request parameters of the format of the request body is wrong.
     */
    400: Result;
    /**
     * Forbidden
     */
    403: Result;
    /**
     * Not Found
     */
    404: Result;
    /**
     * Internal Server Error
     */
    500: Result;
    /**
     * Default error handling for unmentioned status codes
     */
    default: Result;
};

export type GetAllSubmodelDescriptorsThroughSuperpathError =
    GetAllSubmodelDescriptorsThroughSuperpathErrors[keyof GetAllSubmodelDescriptorsThroughSuperpathErrors];

export type GetAllSubmodelDescriptorsThroughSuperpathResponses = {
    /**
     * Requested Submodel Descriptors
     */
    200: GetSubmodelDescriptorsResult;
};

export type GetAllSubmodelDescriptorsThroughSuperpathResponse =
    GetAllSubmodelDescriptorsThroughSuperpathResponses[keyof GetAllSubmodelDescriptorsThroughSuperpathResponses];

export type PostSubmodelDescriptorThroughSuperpathData = {
    /**
     * Submodel Descriptor object
     */
    body: SubmodelDescriptor;
    path: {
        /**
         * The Asset Administration Shell’s unique id (UTF8-BASE64-URL-encoded)
         */
        aasIdentifier: string;
    };
    query?: never;
    url: '/shell-descriptors/{aasIdentifier}/submodel-descriptors';
};

export type PostSubmodelDescriptorThroughSuperpathErrors = {
    /**
     * Bad Request, e.g. the request parameters of the format of the request body is wrong.
     */
    400: Result;
    /**
     * Forbidden
     */
    403: Result;
    /**
     * Not Found
     */
    404: Result;
    /**
     * Conflict, a resource which shall be created exists already. Might be thrown if a Submodel or SubmodelElement with the same ShortId is contained in a POST request.
     */
    409: Result;
    /**
     * Internal Server Error
     */
    500: Result;
    /**
     * Default error handling for unmentioned status codes
     */
    default: Result;
};

export type PostSubmodelDescriptorThroughSuperpathError =
    PostSubmodelDescriptorThroughSuperpathErrors[keyof PostSubmodelDescriptorThroughSuperpathErrors];

export type PostSubmodelDescriptorThroughSuperpathResponses = {
    /**
     * Submodel Descriptor created successfully
     */
    201: SubmodelDescriptor;
};

export type PostSubmodelDescriptorThroughSuperpathResponse =
    PostSubmodelDescriptorThroughSuperpathResponses[keyof PostSubmodelDescriptorThroughSuperpathResponses];

export type DeleteSubmodelDescriptorByIdThroughSuperpathData = {
    body?: never;
    path: {
        /**
         * The Asset Administration Shell’s unique id (UTF8-BASE64-URL-encoded)
         */
        aasIdentifier: string;
        /**
         * The Submodel’s unique id (UTF8-BASE64-URL-encoded)
         */
        submodelIdentifier: string;
    };
    query?: never;
    url: '/shell-descriptors/{aasIdentifier}/submodel-descriptors/{submodelIdentifier}';
};

export type DeleteSubmodelDescriptorByIdThroughSuperpathErrors = {
    /**
     * Bad Request, e.g. the request parameters of the format of the request body is wrong.
     */
    400: Result;
    /**
     * Not Found
     */
    404: Result;
    /**
     * Internal Server Error
     */
    500: Result;
    /**
     * Default error handling for unmentioned status codes
     */
    default: Result;
};

export type DeleteSubmodelDescriptorByIdThroughSuperpathError =
    DeleteSubmodelDescriptorByIdThroughSuperpathErrors[keyof DeleteSubmodelDescriptorByIdThroughSuperpathErrors];

export type DeleteSubmodelDescriptorByIdThroughSuperpathResponses = {
    /**
     * Submodel Descriptor deleted successfully
     */
    204: void;
};

export type DeleteSubmodelDescriptorByIdThroughSuperpathResponse =
    DeleteSubmodelDescriptorByIdThroughSuperpathResponses[keyof DeleteSubmodelDescriptorByIdThroughSuperpathResponses];

export type GetSubmodelDescriptorByIdThroughSuperpathData = {
    body?: never;
    path: {
        /**
         * The Asset Administration Shell’s unique id (UTF8-BASE64-URL-encoded)
         */
        aasIdentifier: string;
        /**
         * The Submodel’s unique id (UTF8-BASE64-URL-encoded)
         */
        submodelIdentifier: string;
    };
    query?: never;
    url: '/shell-descriptors/{aasIdentifier}/submodel-descriptors/{submodelIdentifier}';
};

export type GetSubmodelDescriptorByIdThroughSuperpathErrors = {
    /**
     * Bad Request, e.g. the request parameters of the format of the request body is wrong.
     */
    400: Result;
    /**
     * Forbidden
     */
    403: Result;
    /**
     * Not Found
     */
    404: Result;
    /**
     * Internal Server Error
     */
    500: Result;
    /**
     * Default error handling for unmentioned status codes
     */
    default: Result;
};

export type GetSubmodelDescriptorByIdThroughSuperpathError =
    GetSubmodelDescriptorByIdThroughSuperpathErrors[keyof GetSubmodelDescriptorByIdThroughSuperpathErrors];

export type GetSubmodelDescriptorByIdThroughSuperpathResponses = {
    /**
     * Requested Submodel Descriptor
     */
    200: SubmodelDescriptor;
};

export type GetSubmodelDescriptorByIdThroughSuperpathResponse =
    GetSubmodelDescriptorByIdThroughSuperpathResponses[keyof GetSubmodelDescriptorByIdThroughSuperpathResponses];

export type PutSubmodelDescriptorByIdThroughSuperpathData = {
    /**
     * Submodel Descriptor object
     */
    body: SubmodelDescriptor;
    path: {
        /**
         * The Asset Administration Shell’s unique id (UTF8-BASE64-URL-encoded)
         */
        aasIdentifier: string;
        /**
         * The Submodel’s unique id (UTF8-BASE64-URL-encoded)
         */
        submodelIdentifier: string;
    };
    query?: never;
    url: '/shell-descriptors/{aasIdentifier}/submodel-descriptors/{submodelIdentifier}';
};

export type PutSubmodelDescriptorByIdThroughSuperpathErrors = {
    /**
     * Bad Request, e.g. the request parameters of the format of the request body is wrong.
     */
    400: Result;
    /**
     * Forbidden
     */
    403: Result;
    /**
     * Not Found
     */
    404: Result;
    /**
     * Internal Server Error
     */
    500: Result;
    /**
     * Default error handling for unmentioned status codes
     */
    default: Result;
};

export type PutSubmodelDescriptorByIdThroughSuperpathError =
    PutSubmodelDescriptorByIdThroughSuperpathErrors[keyof PutSubmodelDescriptorByIdThroughSuperpathErrors];

export type PutSubmodelDescriptorByIdThroughSuperpathResponses = {
    /**
     * Submodel Descriptor updated successfully
     */
    204: void;
};

export type PutSubmodelDescriptorByIdThroughSuperpathResponse =
    PutSubmodelDescriptorByIdThroughSuperpathResponses[keyof PutSubmodelDescriptorByIdThroughSuperpathResponses];

export type GetAllSubmodelDescriptorsData = {
    body?: never;
    path?: never;
    query?: {
        /**
         * The maximum number of elements in the response array
         */
        limit?: number;
        /**
         * A server-generated identifier retrieved from pagingMetadata that specifies from which position the result listing should continue
         */
        cursor?: string;
    };
    url: '/submodel-descriptors';
};

export type GetAllSubmodelDescriptorsErrors = {
    /**
     * Bad Request, e.g. the request parameters of the format of the request body is wrong.
     */
    400: Result;
    /**
     * Forbidden
     */
    403: Result;
    /**
     * Not Found
     */
    404: Result;
    /**
     * Internal Server Error
     */
    500: Result;
    /**
     * Default error handling for unmentioned status codes
     */
    default: Result;
};

export type GetAllSubmodelDescriptorsError = GetAllSubmodelDescriptorsErrors[keyof GetAllSubmodelDescriptorsErrors];

export type GetAllSubmodelDescriptorsResponses = {
    /**
     * Requested Submodel Descriptors
     */
    200: GetSubmodelDescriptorsResult;
};

export type GetAllSubmodelDescriptorsResponse =
    GetAllSubmodelDescriptorsResponses[keyof GetAllSubmodelDescriptorsResponses];

export type PostSubmodelDescriptorData = {
    /**
     * Submodel Descriptor object
     */
    body: SubmodelDescriptor;
    path?: never;
    query?: never;
    url: '/submodel-descriptors';
};

export type PostSubmodelDescriptorErrors = {
    /**
     * Bad Request, e.g. the request parameters of the format of the request body is wrong.
     */
    400: Result;
    /**
     * Forbidden
     */
    403: Result;
    /**
     * Conflict, a resource which shall be created exists already. Might be thrown if a Submodel or SubmodelElement with the same ShortId is contained in a POST request.
     */
    409: Result;
    /**
     * Default error handling for unmentioned status codes
     */
    default: Result;
};

export type PostSubmodelDescriptorError = PostSubmodelDescriptorErrors[keyof PostSubmodelDescriptorErrors];

export type PostSubmodelDescriptorResponses = {
    /**
     * Submodel Descriptor created successfully
     */
    201: SubmodelDescriptor;
};

export type PostSubmodelDescriptorResponse = PostSubmodelDescriptorResponses[keyof PostSubmodelDescriptorResponses];

export type DeleteSubmodelDescriptorByIdData = {
    body?: never;
    path: {
        /**
         * The Submodel’s unique id (UTF8-BASE64-URL-encoded)
         */
        submodelIdentifier: string;
    };
    query?: never;
    url: '/submodel-descriptors/{submodelIdentifier}';
};

export type DeleteSubmodelDescriptorByIdErrors = {
    /**
     * Bad Request, e.g. the request parameters of the format of the request body is wrong.
     */
    400: Result;
    /**
     * Forbidden
     */
    403: Result;
    /**
     * Not Found
     */
    404: Result;
    /**
     * Internal Server Error
     */
    500: Result;
};

export type DeleteSubmodelDescriptorByIdError =
    DeleteSubmodelDescriptorByIdErrors[keyof DeleteSubmodelDescriptorByIdErrors];

export type DeleteSubmodelDescriptorByIdResponses = {
    /**
     * Submodel Descriptor deleted successfully
     */
    204: void;
};

export type DeleteSubmodelDescriptorByIdResponse =
    DeleteSubmodelDescriptorByIdResponses[keyof DeleteSubmodelDescriptorByIdResponses];

export type GetSubmodelDescriptorByIdData = {
    body?: never;
    path: {
        /**
         * The Submodel’s unique id (UTF8-BASE64-URL-encoded)
         */
        submodelIdentifier: string;
    };
    query?: never;
    url: '/submodel-descriptors/{submodelIdentifier}';
};

export type GetSubmodelDescriptorByIdErrors = {
    /**
     * Bad Request, e.g. the request parameters of the format of the request body is wrong.
     */
    400: Result;
    /**
     * Forbidden
     */
    403: Result;
    /**
     * Not Found
     */
    404: Result;
    /**
     * Internal Server Error
     */
    500: Result;
    /**
     * Default error handling for unmentioned status codes
     */
    default: Result;
};

export type GetSubmodelDescriptorByIdError = GetSubmodelDescriptorByIdErrors[keyof GetSubmodelDescriptorByIdErrors];

export type GetSubmodelDescriptorByIdResponses = {
    /**
     * Requested Submodel Descriptor
     */
    200: SubmodelDescriptor;
};

export type GetSubmodelDescriptorByIdResponse =
    GetSubmodelDescriptorByIdResponses[keyof GetSubmodelDescriptorByIdResponses];

export type PutSubmodelDescriptorByIdData = {
    /**
     * Submodel Descriptor object
     */
    body: SubmodelDescriptor;
    path: {
        /**
         * The Submodel’s unique id (UTF8-BASE64-URL-encoded)
         */
        submodelIdentifier: string;
    };
    query?: never;
    url: '/submodel-descriptors/{submodelIdentifier}';
};

export type PutSubmodelDescriptorByIdErrors = {
    /**
     * Bad Request, e.g. the request parameters of the format of the request body is wrong.
     */
    400: Result;
    /**
     * Forbidden
     */
    403: Result;
    /**
     * Not Found
     */
    404: Result;
    /**
     * Internal Server Error
     */
    500: Result;
    /**
     * Default error handling for unmentioned status codes
     */
    default: Result;
};

export type PutSubmodelDescriptorByIdError = PutSubmodelDescriptorByIdErrors[keyof PutSubmodelDescriptorByIdErrors];

export type PutSubmodelDescriptorByIdResponses = {
    /**
     * Submodel Descriptor updated successfully
     */
    204: void;
};

export type PutSubmodelDescriptorByIdResponse =
    PutSubmodelDescriptorByIdResponses[keyof PutSubmodelDescriptorByIdResponses];

export type GetAllAssetAdministrationShellIdsByAssetLinkData = {
    body?: never;
    path?: never;
    query?: {
        /**
         * A list of specific Asset identifiers. Every single value asset identifier is a base64-url-encoded [SpecificAssetId](https://api.swaggerhub.com/domains/Plattform_i40/Part1-MetaModel-Schemas/V3.0.3#/components/schemas/SpecificAssetId).
         */
        assetIds?: Array<string>;
        /**
         * The maximum number of elements in the response array
         */
        limit?: number;
        /**
         * A server-generated identifier retrieved from pagingMetadata that specifies from which position the result listing should continue
         */
        cursor?: string;
    };
    url: '/lookup/shells';
};

export type GetAllAssetAdministrationShellIdsByAssetLinkErrors = {
    /**
     * Default error handling for unmentioned status codes
     */
    default: Result;
};

export type GetAllAssetAdministrationShellIdsByAssetLinkError =
    GetAllAssetAdministrationShellIdsByAssetLinkErrors[keyof GetAllAssetAdministrationShellIdsByAssetLinkErrors];

export type GetAllAssetAdministrationShellIdsByAssetLinkResponses = {
    /**
     * Requested Asset Administration Shell ids
     */
    200: InlineResponse200;
};

export type GetAllAssetAdministrationShellIdsByAssetLinkResponse =
    GetAllAssetAdministrationShellIdsByAssetLinkResponses[keyof GetAllAssetAdministrationShellIdsByAssetLinkResponses];

export type DeleteAllAssetLinksByIdData = {
    body?: never;
    path: {
        /**
         * The Asset Administration Shell’s unique id (UTF8-BASE64-URL-encoded)
         */
        aasIdentifier: string;
    };
    query?: never;
    url: '/lookup/shells/{aasIdentifier}';
};

export type DeleteAllAssetLinksByIdErrors = {
    /**
     * Not Found
     */
    404: Result;
    /**
     * Default error handling for unmentioned status codes
     */
    default: Result;
};

export type DeleteAllAssetLinksByIdError = DeleteAllAssetLinksByIdErrors[keyof DeleteAllAssetLinksByIdErrors];

export type DeleteAllAssetLinksByIdResponses = {
    /**
     * Specific Asset identifiers deleted successfully
     */
    204: void;
};

export type DeleteAllAssetLinksByIdResponse = DeleteAllAssetLinksByIdResponses[keyof DeleteAllAssetLinksByIdResponses];

export type GetAllAssetLinksByIdData = {
    body?: never;
    path: {
        /**
         * The Asset Administration Shell’s unique id (UTF8-BASE64-URL-encoded)
         */
        aasIdentifier: string;
    };
    query?: never;
    url: '/lookup/shells/{aasIdentifier}';
};

export type GetAllAssetLinksByIdErrors = {
    /**
     * Not Found
     */
    404: Result;
    /**
     * Default error handling for unmentioned status codes
     */
    default: Result;
};

export type GetAllAssetLinksByIdError = GetAllAssetLinksByIdErrors[keyof GetAllAssetLinksByIdErrors];

export type GetAllAssetLinksByIdResponses = {
    /**
     * Requested specific Asset identifiers
     */
    200: Array<SpecificAssetId>;
};

export type GetAllAssetLinksByIdResponse = GetAllAssetLinksByIdResponses[keyof GetAllAssetLinksByIdResponses];

export type PostAllAssetLinksByIdData = {
    /**
     * A list of specific Asset identifiers
     */
    body: Array<SpecificAssetId>;
    path: {
        /**
         * The Asset Administration Shell’s unique id (UTF8-BASE64-URL-encoded)
         */
        aasIdentifier: string;
    };
    query?: never;
    url: '/lookup/shells/{aasIdentifier}';
};

export type PostAllAssetLinksByIdErrors = {
    /**
     * Bad Request, e.g. the request parameters of the format of the request body is wrong.
     */
    400: Result;
    /**
     * Not Found
     */
    404: Result;
    /**
     * Conflict, a resource which shall be created exists already. Might be thrown if a Submodel or SubmodelElement with the same ShortId is contained in a POST request.
     */
    409: Result;
    /**
     * Default error handling for unmentioned status codes
     */
    default: Result;
};

export type PostAllAssetLinksByIdError = PostAllAssetLinksByIdErrors[keyof PostAllAssetLinksByIdErrors];

export type PostAllAssetLinksByIdResponses = {
    /**
     * Specific Asset identifiers created successfully
     */
    201: Array<SpecificAssetId>;
};

export type PostAllAssetLinksByIdResponse = PostAllAssetLinksByIdResponses[keyof PostAllAssetLinksByIdResponses];

export type GetAllAasxPackageIdsData = {
    body?: never;
    path?: never;
    query?: {
        /**
         * The Asset Administration Shell’s unique id (UTF8-BASE64-URL-encoded)
         */
        aasId?: string;
        /**
         * The maximum number of elements in the response array
         */
        limit?: number;
        /**
         * A server-generated identifier retrieved from pagingMetadata that specifies from which position the result listing should continue
         */
        cursor?: string;
    };
    url: '/packages';
};

export type GetAllAasxPackageIdsErrors = {
    /**
     * Bad Request, e.g. the request parameters of the format of the request body is wrong.
     */
    400: Result;
    /**
     * Unauthorized, e.g. the server refused the authorization attempt.
     */
    401: Result;
    /**
     * Forbidden
     */
    403: Result;
    /**
     * Internal Server Error
     */
    500: Result;
    /**
     * Default error handling for unmentioned status codes
     */
    default: Result;
};

export type GetAllAasxPackageIdsError = GetAllAasxPackageIdsErrors[keyof GetAllAasxPackageIdsErrors];

export type GetAllAasxPackageIdsResponses = {
    /**
     * Requested package list
     */
    200: GetPackageDescriptionsResult;
};

export type GetAllAasxPackageIdsResponse = GetAllAasxPackageIdsResponses[keyof GetAllAasxPackageIdsResponses];

export type PostAasxPackageData = {
    /**
     * AASX package
     */
    body: PackagesBody;
    path?: never;
    query?: never;
    url: '/packages';
};

export type PostAasxPackageErrors = {
    /**
     * Bad Request, e.g. the request parameters of the format of the request body is wrong.
     */
    400: Result;
    /**
     * Unauthorized, e.g. the server refused the authorization attempt.
     */
    401: Result;
    /**
     * Forbidden
     */
    403: Result;
    /**
     * Conflict, a resource which shall be created exists already. Might be thrown if a Submodel or SubmodelElement with the same ShortId is contained in a POST request.
     */
    409: Result;
    /**
     * Internal Server Error
     */
    500: Result;
    /**
     * Default error handling for unmentioned status codes
     */
    default: Result;
};

export type PostAasxPackageError = PostAasxPackageErrors[keyof PostAasxPackageErrors];

export type PostAasxPackageResponses = {
    /**
     * AASX package stored successfully
     */
    201: PackageDescription;
};

export type PostAasxPackageResponse = PostAasxPackageResponses[keyof PostAasxPackageResponses];

export type DeleteAasxByPackageIdData = {
    body?: never;
    path: {
        /**
         * The package Id (UTF8-BASE64-URL-encoded)
         */
        packageId: string;
    };
    query?: never;
    url: '/packages/{packageId}';
};

export type DeleteAasxByPackageIdErrors = {
    /**
     * Bad Request, e.g. the request parameters of the format of the request body is wrong.
     */
    400: Result;
    /**
     * Unauthorized, e.g. the server refused the authorization attempt.
     */
    401: Result;
    /**
     * Forbidden
     */
    403: Result;
    /**
     * Not Found
     */
    404: Result;
    /**
     * Internal Server Error
     */
    500: Result;
    /**
     * Default error handling for unmentioned status codes
     */
    default: Result;
};

export type DeleteAasxByPackageIdError = DeleteAasxByPackageIdErrors[keyof DeleteAasxByPackageIdErrors];

export type DeleteAasxByPackageIdResponses = {
    /**
     * Deleted successfully
     */
    204: void;
};

export type DeleteAasxByPackageIdResponse = DeleteAasxByPackageIdResponses[keyof DeleteAasxByPackageIdResponses];

export type GetAasxByPackageIdData = {
    body?: never;
    path: {
        /**
         * The package Id (UTF8-BASE64-URL-encoded)
         */
        packageId: string;
    };
    query?: never;
    url: '/packages/{packageId}';
};

export type GetAasxByPackageIdErrors = {
    /**
     * Bad Request, e.g. the request parameters of the format of the request body is wrong.
     */
    400: Result;
    /**
     * Unauthorized, e.g. the server refused the authorization attempt.
     */
    401: Result;
    /**
     * Forbidden
     */
    403: Result;
    /**
     * Not Found
     */
    404: Result;
    /**
     * Internal Server Error
     */
    500: Result;
    /**
     * Default error handling for unmentioned status codes
     */
    default: Result;
};

export type GetAasxByPackageIdError = GetAasxByPackageIdErrors[keyof GetAasxByPackageIdErrors];

export type GetAasxByPackageIdResponses = {
    /**
     * Requested AASX package
     */
    200: Blob | File;
};

export type GetAasxByPackageIdResponse = GetAasxByPackageIdResponses[keyof GetAasxByPackageIdResponses];

export type PutAasxByPackageIdData = {
    /**
     * AASX package
     */
    body: PackagesPackageIdBody;
    path: {
        /**
         * The package Id (UTF8-BASE64-URL-encoded)
         */
        packageId: string;
    };
    query?: never;
    url: '/packages/{packageId}';
};

export type PutAasxByPackageIdErrors = {
    /**
     * Bad Request, e.g. the request parameters of the format of the request body is wrong.
     */
    400: Result;
    /**
     * Unauthorized, e.g. the server refused the authorization attempt.
     */
    401: Result;
    /**
     * Forbidden
     */
    403: Result;
    /**
     * Not Found
     */
    404: Result;
    /**
     * Internal Server Error
     */
    500: Result;
    /**
     * Default error handling for unmentioned status codes
     */
    default: Result;
};

export type PutAasxByPackageIdError = PutAasxByPackageIdErrors[keyof PutAasxByPackageIdErrors];

export type PutAasxByPackageIdResponses = {
    /**
     * AASX package updated successfully
     */
    204: void;
};

export type PutAasxByPackageIdResponse = PutAasxByPackageIdResponses[keyof PutAasxByPackageIdResponses];

export type GenerateSerializationByIdsData = {
    body?: never;
    path?: never;
    query?: {
        /**
         * The Asset Administration Shells' unique ids (UTF8-BASE64-URL-encoded)
         */
        aasIds?: Array<string>;
        /**
         * The Submodels' unique ids (UTF8-BASE64-URL-encoded)
         */
        submodelIds?: Array<string>;
        /**
         * Include Concept Descriptions?
         */
        includeConceptDescriptions?: boolean;
    };
    url: '/serialization';
};

export type GenerateSerializationByIdsErrors = {
    /**
     * Bad Request, e.g. the request parameters of the format of the request body is wrong.
     */
    400: Result;
    /**
     * Unauthorized, e.g. the server refused the authorization attempt.
     */
    401: Result;
    /**
     * Forbidden
     */
    403: Result;
    /**
     * Internal Server Error
     */
    500: Result;
    /**
     * Default error handling for unmentioned status codes
     */
    default: Result;
};

export type GenerateSerializationByIdsError = GenerateSerializationByIdsErrors[keyof GenerateSerializationByIdsErrors];

export type GenerateSerializationByIdsResponses = {
    /**
     * AASX package
     */
    200: Blob | File;
};

export type GenerateSerializationByIdsResponse =
    GenerateSerializationByIdsResponses[keyof GenerateSerializationByIdsResponses];

export type GetDescriptionData = {
    body?: never;
    path?: never;
    query?: never;
    url: '/description';
};

export type GetDescriptionErrors = {
    /**
     * Unauthorized, e.g. the server refused the authorization attempt.
     */
    401: Result;
    /**
     * Forbidden
     */
    403: Result;
};

export type GetDescriptionError = GetDescriptionErrors[keyof GetDescriptionErrors];

export type GetDescriptionResponses = {
    /**
     * Requested Description
     */
    200: ServiceDescription;
};

export type GetDescriptionResponse = GetDescriptionResponses[keyof GetDescriptionResponses];
