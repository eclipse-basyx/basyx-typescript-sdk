/* tslint:disable */
/* eslint-disable */
/**
 * DotAAS Part 2 | HTTP/REST | Submodel Registry Service Specification
 * The Full Profile of the Submodel Registry Service Specification as part of the [Specification of the Asset Administration Shell: Part 2](https://industrialdigitaltwin.org/en/content-hub/aasspecifications).   Copyright: Industrial Digital Twin Association (IDTA) 2025
 *
 * The version of the OpenAPI document: V3.1.0_SSP-001
 * Contact: info@idtwin.org
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import * as runtime from '../../runtime';
import type {
  GetSubmodelDescriptorsResult,
  Result,
  SubmodelDescriptor,
} from '../models/index';

export interface DeleteSubmodelDescriptorByIdRequest {
    submodelIdentifier: string;
}

export interface GetAllSubmodelDescriptorsRequest {
    limit?: number;
    cursor?: string;
}

export interface GetSubmodelDescriptorByIdRequest {
    submodelIdentifier: string;
}

export interface PostSubmodelDescriptorRequest {
    submodelDescriptor: SubmodelDescriptor;
}

export interface PutSubmodelDescriptorByIdRequest {
    submodelIdentifier: string;
    submodelDescriptor: SubmodelDescriptor;
}

/**
 * 
 */
export class SubmodelRegistryAPIApi extends runtime.BaseAPI {

    /**
     * Deletes a Submodel Descriptor, i.e. de-registers a submodel
     */
    async deleteSubmodelDescriptorByIdRaw(requestParameters: DeleteSubmodelDescriptorByIdRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>> {
        if (requestParameters['submodelIdentifier'] == null) {
            throw new runtime.RequiredError(
                'submodelIdentifier',
                'Required parameter "submodelIdentifier" was null or undefined when calling deleteSubmodelDescriptorById().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/submodel-descriptors/{submodelIdentifier}`.replace(`{${"submodelIdentifier"}}`, encodeURIComponent(String(requestParameters['submodelIdentifier']))),
            method: 'DELETE',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     * Deletes a Submodel Descriptor, i.e. de-registers a submodel
     */
    async deleteSubmodelDescriptorById(requestParameters: DeleteSubmodelDescriptorByIdRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void> {
        await this.deleteSubmodelDescriptorByIdRaw(requestParameters, initOverrides);
    }

    /**
     * Returns all Submodel Descriptors
     */
    async getAllSubmodelDescriptorsRaw(requestParameters: GetAllSubmodelDescriptorsRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<GetSubmodelDescriptorsResult>> {
        const queryParameters: any = {};

        if (requestParameters['limit'] != null) {
            queryParameters['limit'] = requestParameters['limit'];
        }

        if (requestParameters['cursor'] != null) {
            queryParameters['cursor'] = requestParameters['cursor'];
        }

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/submodel-descriptors`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response);
    }

    /**
     * Returns all Submodel Descriptors
     */
    async getAllSubmodelDescriptors(requestParameters: GetAllSubmodelDescriptorsRequest = {}, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<GetSubmodelDescriptorsResult> {
        const response = await this.getAllSubmodelDescriptorsRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Returns a specific Submodel Descriptor
     */
    async getSubmodelDescriptorByIdRaw(requestParameters: GetSubmodelDescriptorByIdRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<SubmodelDescriptor>> {
        if (requestParameters['submodelIdentifier'] == null) {
            throw new runtime.RequiredError(
                'submodelIdentifier',
                'Required parameter "submodelIdentifier" was null or undefined when calling getSubmodelDescriptorById().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/submodel-descriptors/{submodelIdentifier}`.replace(`{${"submodelIdentifier"}}`, encodeURIComponent(String(requestParameters['submodelIdentifier']))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response);
    }

    /**
     * Returns a specific Submodel Descriptor
     */
    async getSubmodelDescriptorById(requestParameters: GetSubmodelDescriptorByIdRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<SubmodelDescriptor> {
        const response = await this.getSubmodelDescriptorByIdRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Creates a new Submodel Descriptor, i.e. registers a submodel
     */
    async postSubmodelDescriptorRaw(requestParameters: PostSubmodelDescriptorRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<SubmodelDescriptor>> {
        if (requestParameters['submodelDescriptor'] == null) {
            throw new runtime.RequiredError(
                'submodelDescriptor',
                'Required parameter "submodelDescriptor" was null or undefined when calling postSubmodelDescriptor().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        const response = await this.request({
            path: `/submodel-descriptors`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: requestParameters['submodelDescriptor'],
        }, initOverrides);

        return new runtime.JSONApiResponse(response);
    }

    /**
     * Creates a new Submodel Descriptor, i.e. registers a submodel
     */
    async postSubmodelDescriptor(requestParameters: PostSubmodelDescriptorRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<SubmodelDescriptor> {
        const response = await this.postSubmodelDescriptorRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Creates or updates an existing Submodel Descriptor
     */
    async putSubmodelDescriptorByIdRaw(requestParameters: PutSubmodelDescriptorByIdRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<SubmodelDescriptor>> {
        if (requestParameters['submodelIdentifier'] == null) {
            throw new runtime.RequiredError(
                'submodelIdentifier',
                'Required parameter "submodelIdentifier" was null or undefined when calling putSubmodelDescriptorById().'
            );
        }

        if (requestParameters['submodelDescriptor'] == null) {
            throw new runtime.RequiredError(
                'submodelDescriptor',
                'Required parameter "submodelDescriptor" was null or undefined when calling putSubmodelDescriptorById().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        const response = await this.request({
            path: `/submodel-descriptors/{submodelIdentifier}`.replace(`{${"submodelIdentifier"}}`, encodeURIComponent(String(requestParameters['submodelIdentifier']))),
            method: 'PUT',
            headers: headerParameters,
            query: queryParameters,
            body: requestParameters['submodelDescriptor'],
        }, initOverrides);

        return new runtime.JSONApiResponse(response);
    }

    /**
     * Creates or updates an existing Submodel Descriptor
     */
    async putSubmodelDescriptorById(requestParameters: PutSubmodelDescriptorByIdRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<SubmodelDescriptor | null | undefined > {
        const response = await this.putSubmodelDescriptorByIdRaw(requestParameters, initOverrides);
        switch (response.raw.status) {
            case 201:
                return await response.value();
            case 204:
                return null;
            default:
                return await response.value();
        }
    }

}
