/* tslint:disable */
/* eslint-disable */
/**
 * DotAAS Part 2 | HTTP/REST | Asset Administration Shell Repository Service Specification
 * The Full Profile of the Asset Administration Shell Repository Service Specification as part of the [Specification of the Asset Administration Shell: Part 2](https://industrialdigitaltwin.org/en/content-hub/aasspecifications).   Copyright: Industrial Digital Twin Association (IDTA) 2025
 *
 * The version of the OpenAPI document: V3.1.0_SSP-001
 * Contact: info@idtwin.org
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import * as runtime from '../../runtime';
import type {
  AssetAdministrationShell,
  AssetInformation,
  BaseOperationResult,
  GetAssetAdministrationShellsResult,
  GetPathItemsResult,
  GetReferencesResult,
  GetSubmodelElementsMetadataResult,
  GetSubmodelElementsResult,
  GetSubmodelElementsValueResult,
  OperationRequest,
  OperationRequestValueOnly,
  OperationResult,
  OperationResultValueOnly,
  Reference,
  Result,
  Submodel,
  SubmodelElement,
  SubmodelElementMetadata,
  SubmodelElementValue,
  SubmodelMetadata,
} from '../models/index';

export interface DeleteAssetAdministrationShellByIdRequest {
    aasIdentifier: string;
}

export interface DeleteFileByPathAasRepositoryRequest {
    aasIdentifier: string;
    submodelIdentifier: string;
    idShortPath: string;
}

export interface DeleteSubmodelByIdAasRepositoryRequest {
    aasIdentifier: string;
    submodelIdentifier: string;
}

export interface DeleteSubmodelElementByPathAasRepositoryRequest {
    aasIdentifier: string;
    submodelIdentifier: string;
    idShortPath: string;
}

export interface DeleteSubmodelReferenceAasRepositoryRequest {
    aasIdentifier: string;
    submodelIdentifier: string;
}

export interface DeleteThumbnailAasRepositoryRequest {
    aasIdentifier: string;
}

export interface GetAllAssetAdministrationShellsRequest {
    assetIds?: Array<string>;
    idShort?: string;
    limit?: number;
    cursor?: string;
}

export interface GetAllAssetAdministrationShellsReferenceRequest {
    assetIds?: Array<string>;
    idShort?: string;
    limit?: number;
    cursor?: string;
}

export interface GetAllSubmodelElementsAasRepositoryRequest {
    aasIdentifier: string;
    submodelIdentifier: string;
    limit?: number;
    cursor?: string;
    level?: GetAllSubmodelElementsAasRepositoryLevelEnum;
    extent?: GetAllSubmodelElementsAasRepositoryExtentEnum;
}

export interface GetAllSubmodelElementsMetadataAasRepositoryRequest {
    aasIdentifier: string;
    submodelIdentifier: string;
    limit?: number;
    cursor?: string;
}

export interface GetAllSubmodelElementsPathAasRepositoryRequest {
    aasIdentifier: string;
    submodelIdentifier: string;
    limit?: number;
    cursor?: string;
    level?: GetAllSubmodelElementsPathAasRepositoryLevelEnum;
    extent?: GetAllSubmodelElementsPathAasRepositoryExtentEnum;
}

export interface GetAllSubmodelElementsReferenceAasRepositoryRequest {
    aasIdentifier: string;
    submodelIdentifier: string;
    limit?: number;
    cursor?: string;
    level?: GetAllSubmodelElementsReferenceAasRepositoryLevelEnum;
}

export interface GetAllSubmodelElementsValueOnlyAasRepositoryRequest {
    aasIdentifier: string;
    submodelIdentifier: string;
    limit?: number;
    cursor?: string;
    level?: GetAllSubmodelElementsValueOnlyAasRepositoryLevelEnum;
}

export interface GetAllSubmodelReferencesAasRepositoryRequest {
    aasIdentifier: string;
    limit?: number;
    cursor?: string;
}

export interface GetAssetAdministrationShellByIdRequest {
    aasIdentifier: string;
}

export interface GetAssetAdministrationShellByIdReferenceAasRepositoryRequest {
    aasIdentifier: string;
}

export interface GetAssetInformationAasRepositoryRequest {
    aasIdentifier: string;
}

export interface GetFileByPathAasRepositoryRequest {
    aasIdentifier: string;
    submodelIdentifier: string;
    idShortPath: string;
}

export interface GetOperationAsyncResultAasRepositoryRequest {
    aasIdentifier: string;
    submodelIdentifier: string;
    idShortPath: string;
    handleId: string;
}

export interface GetOperationAsyncResultValueOnlyAasRepositoryRequest {
    aasIdentifier: string;
    submodelIdentifier: string;
    idShortPath: string;
    handleId: string;
}

export interface GetOperationAsyncStatusAasRepositoryRequest {
    aasIdentifier: string;
    submodelIdentifier: string;
    idShortPath: string;
    handleId: string;
}

export interface GetSubmodelByIdAasRepositoryRequest {
    aasIdentifier: string;
    submodelIdentifier: string;
    level?: GetSubmodelByIdAasRepositoryLevelEnum;
    extent?: GetSubmodelByIdAasRepositoryExtentEnum;
}

export interface GetSubmodelByIdMetadataAasRepositoryRequest {
    aasIdentifier: string;
    submodelIdentifier: string;
}

export interface GetSubmodelByIdPathAasRepositoryRequest {
    aasIdentifier: string;
    submodelIdentifier: string;
    level?: GetSubmodelByIdPathAasRepositoryLevelEnum;
}

export interface GetSubmodelByIdReferenceAasRepositoryRequest {
    aasIdentifier: string;
    submodelIdentifier: string;
}

export interface GetSubmodelByIdValueOnlyAasRepositoryRequest {
    aasIdentifier: string;
    submodelIdentifier: string;
    level?: GetSubmodelByIdValueOnlyAasRepositoryLevelEnum;
    extent?: GetSubmodelByIdValueOnlyAasRepositoryExtentEnum;
}

export interface GetSubmodelElementByPathAasRepositoryRequest {
    aasIdentifier: string;
    submodelIdentifier: string;
    idShortPath: string;
    level?: GetSubmodelElementByPathAasRepositoryLevelEnum;
    extent?: GetSubmodelElementByPathAasRepositoryExtentEnum;
}

export interface GetSubmodelElementByPathMetadataAasRepositoryRequest {
    aasIdentifier: string;
    submodelIdentifier: string;
    idShortPath: string;
}

export interface GetSubmodelElementByPathPathAasRepositoryRequest {
    aasIdentifier: string;
    submodelIdentifier: string;
    idShortPath: string;
    level?: GetSubmodelElementByPathPathAasRepositoryLevelEnum;
}

export interface GetSubmodelElementByPathReferenceAasRepositoryRequest {
    aasIdentifier: string;
    submodelIdentifier: string;
    idShortPath: string;
    level?: GetSubmodelElementByPathReferenceAasRepositoryLevelEnum;
}

export interface GetSubmodelElementByPathValueOnlyAasRepositoryRequest {
    aasIdentifier: string;
    submodelIdentifier: string;
    idShortPath: string;
    level?: GetSubmodelElementByPathValueOnlyAasRepositoryLevelEnum;
    extent?: GetSubmodelElementByPathValueOnlyAasRepositoryExtentEnum;
}

export interface GetThumbnailAasRepositoryRequest {
    aasIdentifier: string;
}

export interface InvokeOperationAasRepositoryRequest {
    aasIdentifier: string;
    submodelIdentifier: string;
    idShortPath: string;
    operationRequest: OperationRequest;
}

export interface InvokeOperationAsyncAasRepositoryRequest {
    aasIdentifier: string;
    submodelIdentifier: string;
    idShortPath: string;
    operationRequest: OperationRequest;
}

export interface InvokeOperationAsyncValueOnlyAasRepositoryRequest {
    aasIdentifier: string;
    submodelIdentifier: string;
    idShortPath: string;
    operationRequestValueOnly: OperationRequestValueOnly;
}

export interface InvokeOperationValueOnlyAasRepositoryRequest {
    aasIdentifier: string;
    submodelIdentifier: string;
    idShortPath: string;
    operationRequestValueOnly: OperationRequestValueOnly;
}

export interface PatchSubmodelAasRepositoryRequest {
    aasIdentifier: string;
    submodelIdentifier: string;
    submodel: Submodel;
    level?: PatchSubmodelAasRepositoryLevelEnum;
}

export interface PatchSubmodelByIdMetadataAasRepositoryRequest {
    aasIdentifier: string;
    submodelIdentifier: string;
    submodelMetadata: SubmodelMetadata;
}

export interface PatchSubmodelByIdValueOnlyAasRepositoryRequest {
    aasIdentifier: string;
    submodelIdentifier: string;
    body: object;
    level?: PatchSubmodelByIdValueOnlyAasRepositoryLevelEnum;
}

export interface PatchSubmodelElementValueByPathAasRepositoryRequest {
    aasIdentifier: string;
    submodelIdentifier: string;
    idShortPath: string;
    submodelElement: SubmodelElement;
    level?: PatchSubmodelElementValueByPathAasRepositoryLevelEnum;
}

export interface PatchSubmodelElementValueByPathMetadataRequest {
    aasIdentifier: string;
    submodelIdentifier: string;
    idShortPath: string;
    submodelElementMetadata: SubmodelElementMetadata;
}

export interface PatchSubmodelElementValueByPathValueOnlyRequest {
    aasIdentifier: string;
    submodelIdentifier: string;
    idShortPath: string;
    submodelElementValue: SubmodelElementValue;
    level?: PatchSubmodelElementValueByPathValueOnlyLevelEnum;
}

export interface PostAssetAdministrationShellRequest {
    assetAdministrationShell: AssetAdministrationShell;
}

export interface PostSubmodelElementAasRepositoryRequest {
    aasIdentifier: string;
    submodelIdentifier: string;
    submodelElement: SubmodelElement;
}

export interface PostSubmodelElementByPathAasRepositoryRequest {
    aasIdentifier: string;
    submodelIdentifier: string;
    idShortPath: string;
    submodelElement: SubmodelElement;
}

export interface PostSubmodelReferenceAasRepositoryRequest {
    aasIdentifier: string;
    reference: Reference;
}

export interface PutAssetAdministrationShellByIdRequest {
    aasIdentifier: string;
    assetAdministrationShell: AssetAdministrationShell;
}

export interface PutAssetInformationAasRepositoryRequest {
    aasIdentifier: string;
    assetInformation: AssetInformation;
}

export interface PutFileByPathAasRepositoryRequest {
    aasIdentifier: string;
    submodelIdentifier: string;
    idShortPath: string;
    fileName?: string;
    file?: Blob;
}

export interface PutSubmodelByIdAasRepositoryRequest {
    aasIdentifier: string;
    submodelIdentifier: string;
    submodel: Submodel;
}

export interface PutSubmodelElementByPathAasRepositoryRequest {
    aasIdentifier: string;
    submodelIdentifier: string;
    idShortPath: string;
    submodelElement: SubmodelElement;
}

export interface PutThumbnailAasRepositoryRequest {
    aasIdentifier: string;
    fileName?: string;
    file?: Blob;
}

/**
 * 
 */
export class AssetAdministrationShellRepositoryAPIApi extends runtime.BaseAPI {

    /**
     * Deletes an Asset Administration Shell
     */
    async deleteAssetAdministrationShellByIdRaw(requestParameters: DeleteAssetAdministrationShellByIdRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>> {
        if (requestParameters['aasIdentifier'] == null) {
            throw new runtime.RequiredError(
                'aasIdentifier',
                'Required parameter "aasIdentifier" was null or undefined when calling deleteAssetAdministrationShellById().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/shells/{aasIdentifier}`.replace(`{${"aasIdentifier"}}`, encodeURIComponent(String(requestParameters['aasIdentifier']))),
            method: 'DELETE',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     * Deletes an Asset Administration Shell
     */
    async deleteAssetAdministrationShellById(requestParameters: DeleteAssetAdministrationShellByIdRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void> {
        await this.deleteAssetAdministrationShellByIdRaw(requestParameters, initOverrides);
    }

    /**
     * Deletes file content of an existing submodel element at a specified path within submodel elements hierarchy
     */
    async deleteFileByPathAasRepositoryRaw(requestParameters: DeleteFileByPathAasRepositoryRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>> {
        if (requestParameters['aasIdentifier'] == null) {
            throw new runtime.RequiredError(
                'aasIdentifier',
                'Required parameter "aasIdentifier" was null or undefined when calling deleteFileByPathAasRepository().'
            );
        }

        if (requestParameters['submodelIdentifier'] == null) {
            throw new runtime.RequiredError(
                'submodelIdentifier',
                'Required parameter "submodelIdentifier" was null or undefined when calling deleteFileByPathAasRepository().'
            );
        }

        if (requestParameters['idShortPath'] == null) {
            throw new runtime.RequiredError(
                'idShortPath',
                'Required parameter "idShortPath" was null or undefined when calling deleteFileByPathAasRepository().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/shells/{aasIdentifier}/submodels/{submodelIdentifier}/submodel-elements/{idShortPath}/attachment`.replace(`{${"aasIdentifier"}}`, encodeURIComponent(String(requestParameters['aasIdentifier']))).replace(`{${"submodelIdentifier"}}`, encodeURIComponent(String(requestParameters['submodelIdentifier']))).replace(`{${"idShortPath"}}`, encodeURIComponent(String(requestParameters['idShortPath']))),
            method: 'DELETE',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     * Deletes file content of an existing submodel element at a specified path within submodel elements hierarchy
     */
    async deleteFileByPathAasRepository(requestParameters: DeleteFileByPathAasRepositoryRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void> {
        await this.deleteFileByPathAasRepositoryRaw(requestParameters, initOverrides);
    }

    /**
     * Deletes the submodel from the Asset Administration Shell and the Repository.
     */
    async deleteSubmodelByIdAasRepositoryRaw(requestParameters: DeleteSubmodelByIdAasRepositoryRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>> {
        if (requestParameters['aasIdentifier'] == null) {
            throw new runtime.RequiredError(
                'aasIdentifier',
                'Required parameter "aasIdentifier" was null or undefined when calling deleteSubmodelByIdAasRepository().'
            );
        }

        if (requestParameters['submodelIdentifier'] == null) {
            throw new runtime.RequiredError(
                'submodelIdentifier',
                'Required parameter "submodelIdentifier" was null or undefined when calling deleteSubmodelByIdAasRepository().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/shells/{aasIdentifier}/submodels/{submodelIdentifier}`.replace(`{${"aasIdentifier"}}`, encodeURIComponent(String(requestParameters['aasIdentifier']))).replace(`{${"submodelIdentifier"}}`, encodeURIComponent(String(requestParameters['submodelIdentifier']))),
            method: 'DELETE',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     * Deletes the submodel from the Asset Administration Shell and the Repository.
     */
    async deleteSubmodelByIdAasRepository(requestParameters: DeleteSubmodelByIdAasRepositoryRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void> {
        await this.deleteSubmodelByIdAasRepositoryRaw(requestParameters, initOverrides);
    }

    /**
     * Deletes a submodel element at a specified path within the submodel elements hierarchy
     */
    async deleteSubmodelElementByPathAasRepositoryRaw(requestParameters: DeleteSubmodelElementByPathAasRepositoryRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>> {
        if (requestParameters['aasIdentifier'] == null) {
            throw new runtime.RequiredError(
                'aasIdentifier',
                'Required parameter "aasIdentifier" was null or undefined when calling deleteSubmodelElementByPathAasRepository().'
            );
        }

        if (requestParameters['submodelIdentifier'] == null) {
            throw new runtime.RequiredError(
                'submodelIdentifier',
                'Required parameter "submodelIdentifier" was null or undefined when calling deleteSubmodelElementByPathAasRepository().'
            );
        }

        if (requestParameters['idShortPath'] == null) {
            throw new runtime.RequiredError(
                'idShortPath',
                'Required parameter "idShortPath" was null or undefined when calling deleteSubmodelElementByPathAasRepository().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/shells/{aasIdentifier}/submodels/{submodelIdentifier}/submodel-elements/{idShortPath}`.replace(`{${"aasIdentifier"}}`, encodeURIComponent(String(requestParameters['aasIdentifier']))).replace(`{${"submodelIdentifier"}}`, encodeURIComponent(String(requestParameters['submodelIdentifier']))).replace(`{${"idShortPath"}}`, encodeURIComponent(String(requestParameters['idShortPath']))),
            method: 'DELETE',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     * Deletes a submodel element at a specified path within the submodel elements hierarchy
     */
    async deleteSubmodelElementByPathAasRepository(requestParameters: DeleteSubmodelElementByPathAasRepositoryRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void> {
        await this.deleteSubmodelElementByPathAasRepositoryRaw(requestParameters, initOverrides);
    }

    /**
     * Deletes the submodel reference from the Asset Administration Shell. Does not delete the submodel itself!
     */
    async deleteSubmodelReferenceAasRepositoryRaw(requestParameters: DeleteSubmodelReferenceAasRepositoryRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>> {
        if (requestParameters['aasIdentifier'] == null) {
            throw new runtime.RequiredError(
                'aasIdentifier',
                'Required parameter "aasIdentifier" was null or undefined when calling deleteSubmodelReferenceAasRepository().'
            );
        }

        if (requestParameters['submodelIdentifier'] == null) {
            throw new runtime.RequiredError(
                'submodelIdentifier',
                'Required parameter "submodelIdentifier" was null or undefined when calling deleteSubmodelReferenceAasRepository().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/shells/{aasIdentifier}/submodel-refs/{submodelIdentifier}`.replace(`{${"aasIdentifier"}}`, encodeURIComponent(String(requestParameters['aasIdentifier']))).replace(`{${"submodelIdentifier"}}`, encodeURIComponent(String(requestParameters['submodelIdentifier']))),
            method: 'DELETE',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     * Deletes the submodel reference from the Asset Administration Shell. Does not delete the submodel itself!
     */
    async deleteSubmodelReferenceAasRepository(requestParameters: DeleteSubmodelReferenceAasRepositoryRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void> {
        await this.deleteSubmodelReferenceAasRepositoryRaw(requestParameters, initOverrides);
    }

    /**
     */
    async deleteThumbnailAasRepositoryRaw(requestParameters: DeleteThumbnailAasRepositoryRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>> {
        if (requestParameters['aasIdentifier'] == null) {
            throw new runtime.RequiredError(
                'aasIdentifier',
                'Required parameter "aasIdentifier" was null or undefined when calling deleteThumbnailAasRepository().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/shells/{aasIdentifier}/asset-information/thumbnail`.replace(`{${"aasIdentifier"}}`, encodeURIComponent(String(requestParameters['aasIdentifier']))),
            method: 'DELETE',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     */
    async deleteThumbnailAasRepository(requestParameters: DeleteThumbnailAasRepositoryRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void> {
        await this.deleteThumbnailAasRepositoryRaw(requestParameters, initOverrides);
    }

    /**
     * Returns all Asset Administration Shells
     */
    async getAllAssetAdministrationShellsRaw(requestParameters: GetAllAssetAdministrationShellsRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<GetAssetAdministrationShellsResult>> {
        const queryParameters: any = {};

        if (requestParameters['assetIds'] != null) {
            queryParameters['assetIds'] = requestParameters['assetIds'];
        }

        if (requestParameters['idShort'] != null) {
            queryParameters['idShort'] = requestParameters['idShort'];
        }

        if (requestParameters['limit'] != null) {
            queryParameters['limit'] = requestParameters['limit'];
        }

        if (requestParameters['cursor'] != null) {
            queryParameters['cursor'] = requestParameters['cursor'];
        }

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/shells`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response);
    }

    /**
     * Returns all Asset Administration Shells
     */
    async getAllAssetAdministrationShells(requestParameters: GetAllAssetAdministrationShellsRequest = {}, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<GetAssetAdministrationShellsResult> {
        const response = await this.getAllAssetAdministrationShellsRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Returns References to all Asset Administration Shells
     */
    async getAllAssetAdministrationShellsReferenceRaw(requestParameters: GetAllAssetAdministrationShellsReferenceRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<GetReferencesResult>> {
        const queryParameters: any = {};

        if (requestParameters['assetIds'] != null) {
            queryParameters['assetIds'] = requestParameters['assetIds'];
        }

        if (requestParameters['idShort'] != null) {
            queryParameters['idShort'] = requestParameters['idShort'];
        }

        if (requestParameters['limit'] != null) {
            queryParameters['limit'] = requestParameters['limit'];
        }

        if (requestParameters['cursor'] != null) {
            queryParameters['cursor'] = requestParameters['cursor'];
        }

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/shells/$reference`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response);
    }

    /**
     * Returns References to all Asset Administration Shells
     */
    async getAllAssetAdministrationShellsReference(requestParameters: GetAllAssetAdministrationShellsReferenceRequest = {}, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<GetReferencesResult> {
        const response = await this.getAllAssetAdministrationShellsReferenceRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Returns all submodel elements including their hierarchy
     */
    async getAllSubmodelElementsAasRepositoryRaw(requestParameters: GetAllSubmodelElementsAasRepositoryRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<GetSubmodelElementsResult>> {
        if (requestParameters['aasIdentifier'] == null) {
            throw new runtime.RequiredError(
                'aasIdentifier',
                'Required parameter "aasIdentifier" was null or undefined when calling getAllSubmodelElementsAasRepository().'
            );
        }

        if (requestParameters['submodelIdentifier'] == null) {
            throw new runtime.RequiredError(
                'submodelIdentifier',
                'Required parameter "submodelIdentifier" was null or undefined when calling getAllSubmodelElementsAasRepository().'
            );
        }

        const queryParameters: any = {};

        if (requestParameters['limit'] != null) {
            queryParameters['limit'] = requestParameters['limit'];
        }

        if (requestParameters['cursor'] != null) {
            queryParameters['cursor'] = requestParameters['cursor'];
        }

        if (requestParameters['level'] != null) {
            queryParameters['level'] = requestParameters['level'];
        }

        if (requestParameters['extent'] != null) {
            queryParameters['extent'] = requestParameters['extent'];
        }

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/shells/{aasIdentifier}/submodels/{submodelIdentifier}/submodel-elements`.replace(`{${"aasIdentifier"}}`, encodeURIComponent(String(requestParameters['aasIdentifier']))).replace(`{${"submodelIdentifier"}}`, encodeURIComponent(String(requestParameters['submodelIdentifier']))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response);
    }

    /**
     * Returns all submodel elements including their hierarchy
     */
    async getAllSubmodelElementsAasRepository(requestParameters: GetAllSubmodelElementsAasRepositoryRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<GetSubmodelElementsResult> {
        const response = await this.getAllSubmodelElementsAasRepositoryRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Returns all submodel elements including their hierarchy
     */
    async getAllSubmodelElementsMetadataAasRepositoryRaw(requestParameters: GetAllSubmodelElementsMetadataAasRepositoryRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<GetSubmodelElementsMetadataResult>> {
        if (requestParameters['aasIdentifier'] == null) {
            throw new runtime.RequiredError(
                'aasIdentifier',
                'Required parameter "aasIdentifier" was null or undefined when calling getAllSubmodelElementsMetadataAasRepository().'
            );
        }

        if (requestParameters['submodelIdentifier'] == null) {
            throw new runtime.RequiredError(
                'submodelIdentifier',
                'Required parameter "submodelIdentifier" was null or undefined when calling getAllSubmodelElementsMetadataAasRepository().'
            );
        }

        const queryParameters: any = {};

        if (requestParameters['limit'] != null) {
            queryParameters['limit'] = requestParameters['limit'];
        }

        if (requestParameters['cursor'] != null) {
            queryParameters['cursor'] = requestParameters['cursor'];
        }

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/shells/{aasIdentifier}/submodels/{submodelIdentifier}/submodel-elements/$metadata`.replace(`{${"aasIdentifier"}}`, encodeURIComponent(String(requestParameters['aasIdentifier']))).replace(`{${"submodelIdentifier"}}`, encodeURIComponent(String(requestParameters['submodelIdentifier']))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response);
    }

    /**
     * Returns all submodel elements including their hierarchy
     */
    async getAllSubmodelElementsMetadataAasRepository(requestParameters: GetAllSubmodelElementsMetadataAasRepositoryRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<GetSubmodelElementsMetadataResult> {
        const response = await this.getAllSubmodelElementsMetadataAasRepositoryRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Returns all submodel elements including their hierarchy
     */
    async getAllSubmodelElementsPathAasRepositoryRaw(requestParameters: GetAllSubmodelElementsPathAasRepositoryRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<GetPathItemsResult>> {
        if (requestParameters['aasIdentifier'] == null) {
            throw new runtime.RequiredError(
                'aasIdentifier',
                'Required parameter "aasIdentifier" was null or undefined when calling getAllSubmodelElementsPathAasRepository().'
            );
        }

        if (requestParameters['submodelIdentifier'] == null) {
            throw new runtime.RequiredError(
                'submodelIdentifier',
                'Required parameter "submodelIdentifier" was null or undefined when calling getAllSubmodelElementsPathAasRepository().'
            );
        }

        const queryParameters: any = {};

        if (requestParameters['limit'] != null) {
            queryParameters['limit'] = requestParameters['limit'];
        }

        if (requestParameters['cursor'] != null) {
            queryParameters['cursor'] = requestParameters['cursor'];
        }

        if (requestParameters['level'] != null) {
            queryParameters['level'] = requestParameters['level'];
        }

        if (requestParameters['extent'] != null) {
            queryParameters['extent'] = requestParameters['extent'];
        }

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/shells/{aasIdentifier}/submodels/{submodelIdentifier}/submodel-elements/$path`.replace(`{${"aasIdentifier"}}`, encodeURIComponent(String(requestParameters['aasIdentifier']))).replace(`{${"submodelIdentifier"}}`, encodeURIComponent(String(requestParameters['submodelIdentifier']))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response);
    }

    /**
     * Returns all submodel elements including their hierarchy
     */
    async getAllSubmodelElementsPathAasRepository(requestParameters: GetAllSubmodelElementsPathAasRepositoryRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<GetPathItemsResult> {
        const response = await this.getAllSubmodelElementsPathAasRepositoryRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Returns all submodel elements as a list of References
     */
    async getAllSubmodelElementsReferenceAasRepositoryRaw(requestParameters: GetAllSubmodelElementsReferenceAasRepositoryRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<GetReferencesResult>> {
        if (requestParameters['aasIdentifier'] == null) {
            throw new runtime.RequiredError(
                'aasIdentifier',
                'Required parameter "aasIdentifier" was null or undefined when calling getAllSubmodelElementsReferenceAasRepository().'
            );
        }

        if (requestParameters['submodelIdentifier'] == null) {
            throw new runtime.RequiredError(
                'submodelIdentifier',
                'Required parameter "submodelIdentifier" was null or undefined when calling getAllSubmodelElementsReferenceAasRepository().'
            );
        }

        const queryParameters: any = {};

        if (requestParameters['limit'] != null) {
            queryParameters['limit'] = requestParameters['limit'];
        }

        if (requestParameters['cursor'] != null) {
            queryParameters['cursor'] = requestParameters['cursor'];
        }

        if (requestParameters['level'] != null) {
            queryParameters['level'] = requestParameters['level'];
        }

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/shells/{aasIdentifier}/submodels/{submodelIdentifier}/submodel-elements/$reference`.replace(`{${"aasIdentifier"}}`, encodeURIComponent(String(requestParameters['aasIdentifier']))).replace(`{${"submodelIdentifier"}}`, encodeURIComponent(String(requestParameters['submodelIdentifier']))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response);
    }

    /**
     * Returns all submodel elements as a list of References
     */
    async getAllSubmodelElementsReferenceAasRepository(requestParameters: GetAllSubmodelElementsReferenceAasRepositoryRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<GetReferencesResult> {
        const response = await this.getAllSubmodelElementsReferenceAasRepositoryRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Returns all submodel elements including their hierarchy in the ValueOnly representation
     */
    async getAllSubmodelElementsValueOnlyAasRepositoryRaw(requestParameters: GetAllSubmodelElementsValueOnlyAasRepositoryRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<GetSubmodelElementsValueResult>> {
        if (requestParameters['aasIdentifier'] == null) {
            throw new runtime.RequiredError(
                'aasIdentifier',
                'Required parameter "aasIdentifier" was null or undefined when calling getAllSubmodelElementsValueOnlyAasRepository().'
            );
        }

        if (requestParameters['submodelIdentifier'] == null) {
            throw new runtime.RequiredError(
                'submodelIdentifier',
                'Required parameter "submodelIdentifier" was null or undefined when calling getAllSubmodelElementsValueOnlyAasRepository().'
            );
        }

        const queryParameters: any = {};

        if (requestParameters['limit'] != null) {
            queryParameters['limit'] = requestParameters['limit'];
        }

        if (requestParameters['cursor'] != null) {
            queryParameters['cursor'] = requestParameters['cursor'];
        }

        if (requestParameters['level'] != null) {
            queryParameters['level'] = requestParameters['level'];
        }

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/shells/{aasIdentifier}/submodels/{submodelIdentifier}/submodel-elements/$value`.replace(`{${"aasIdentifier"}}`, encodeURIComponent(String(requestParameters['aasIdentifier']))).replace(`{${"submodelIdentifier"}}`, encodeURIComponent(String(requestParameters['submodelIdentifier']))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response);
    }

    /**
     * Returns all submodel elements including their hierarchy in the ValueOnly representation
     */
    async getAllSubmodelElementsValueOnlyAasRepository(requestParameters: GetAllSubmodelElementsValueOnlyAasRepositoryRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<GetSubmodelElementsValueResult> {
        const response = await this.getAllSubmodelElementsValueOnlyAasRepositoryRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Returns all submodel references
     */
    async getAllSubmodelReferencesAasRepositoryRaw(requestParameters: GetAllSubmodelReferencesAasRepositoryRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<GetReferencesResult>> {
        if (requestParameters['aasIdentifier'] == null) {
            throw new runtime.RequiredError(
                'aasIdentifier',
                'Required parameter "aasIdentifier" was null or undefined when calling getAllSubmodelReferencesAasRepository().'
            );
        }

        const queryParameters: any = {};

        if (requestParameters['limit'] != null) {
            queryParameters['limit'] = requestParameters['limit'];
        }

        if (requestParameters['cursor'] != null) {
            queryParameters['cursor'] = requestParameters['cursor'];
        }

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/shells/{aasIdentifier}/submodel-refs`.replace(`{${"aasIdentifier"}}`, encodeURIComponent(String(requestParameters['aasIdentifier']))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response);
    }

    /**
     * Returns all submodel references
     */
    async getAllSubmodelReferencesAasRepository(requestParameters: GetAllSubmodelReferencesAasRepositoryRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<GetReferencesResult> {
        const response = await this.getAllSubmodelReferencesAasRepositoryRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Returns a specific Asset Administration Shell
     */
    async getAssetAdministrationShellByIdRaw(requestParameters: GetAssetAdministrationShellByIdRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<AssetAdministrationShell>> {
        if (requestParameters['aasIdentifier'] == null) {
            throw new runtime.RequiredError(
                'aasIdentifier',
                'Required parameter "aasIdentifier" was null or undefined when calling getAssetAdministrationShellById().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/shells/{aasIdentifier}`.replace(`{${"aasIdentifier"}}`, encodeURIComponent(String(requestParameters['aasIdentifier']))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response);
    }

    /**
     * Returns a specific Asset Administration Shell
     */
    async getAssetAdministrationShellById(requestParameters: GetAssetAdministrationShellByIdRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<AssetAdministrationShell> {
        const response = await this.getAssetAdministrationShellByIdRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Returns a specific Asset Administration Shell as a Reference
     */
    async getAssetAdministrationShellByIdReferenceAasRepositoryRaw(requestParameters: GetAssetAdministrationShellByIdReferenceAasRepositoryRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Reference>> {
        if (requestParameters['aasIdentifier'] == null) {
            throw new runtime.RequiredError(
                'aasIdentifier',
                'Required parameter "aasIdentifier" was null or undefined when calling getAssetAdministrationShellByIdReferenceAasRepository().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/shells/{aasIdentifier}/$reference`.replace(`{${"aasIdentifier"}}`, encodeURIComponent(String(requestParameters['aasIdentifier']))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response);
    }

    /**
     * Returns a specific Asset Administration Shell as a Reference
     */
    async getAssetAdministrationShellByIdReferenceAasRepository(requestParameters: GetAssetAdministrationShellByIdReferenceAasRepositoryRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Reference> {
        const response = await this.getAssetAdministrationShellByIdReferenceAasRepositoryRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Returns the Asset Information
     */
    async getAssetInformationAasRepositoryRaw(requestParameters: GetAssetInformationAasRepositoryRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<AssetInformation>> {
        if (requestParameters['aasIdentifier'] == null) {
            throw new runtime.RequiredError(
                'aasIdentifier',
                'Required parameter "aasIdentifier" was null or undefined when calling getAssetInformationAasRepository().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/shells/{aasIdentifier}/asset-information`.replace(`{${"aasIdentifier"}}`, encodeURIComponent(String(requestParameters['aasIdentifier']))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response);
    }

    /**
     * Returns the Asset Information
     */
    async getAssetInformationAasRepository(requestParameters: GetAssetInformationAasRepositoryRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<AssetInformation> {
        const response = await this.getAssetInformationAasRepositoryRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Downloads file content from a specific submodel element from the Submodel at a specified path
     */
    async getFileByPathAasRepositoryRaw(requestParameters: GetFileByPathAasRepositoryRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Blob>> {
        if (requestParameters['aasIdentifier'] == null) {
            throw new runtime.RequiredError(
                'aasIdentifier',
                'Required parameter "aasIdentifier" was null or undefined when calling getFileByPathAasRepository().'
            );
        }

        if (requestParameters['submodelIdentifier'] == null) {
            throw new runtime.RequiredError(
                'submodelIdentifier',
                'Required parameter "submodelIdentifier" was null or undefined when calling getFileByPathAasRepository().'
            );
        }

        if (requestParameters['idShortPath'] == null) {
            throw new runtime.RequiredError(
                'idShortPath',
                'Required parameter "idShortPath" was null or undefined when calling getFileByPathAasRepository().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/shells/{aasIdentifier}/submodels/{submodelIdentifier}/submodel-elements/{idShortPath}/attachment`.replace(`{${"aasIdentifier"}}`, encodeURIComponent(String(requestParameters['aasIdentifier']))).replace(`{${"submodelIdentifier"}}`, encodeURIComponent(String(requestParameters['submodelIdentifier']))).replace(`{${"idShortPath"}}`, encodeURIComponent(String(requestParameters['idShortPath']))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.BlobApiResponse(response);
    }

    /**
     * Downloads file content from a specific submodel element from the Submodel at a specified path
     */
    async getFileByPathAasRepository(requestParameters: GetFileByPathAasRepositoryRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Blob> {
        const response = await this.getFileByPathAasRepositoryRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Returns the Operation result of an asynchronous invoked Operation
     */
    async getOperationAsyncResultAasRepositoryRaw(requestParameters: GetOperationAsyncResultAasRepositoryRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<OperationResult>> {
        if (requestParameters['aasIdentifier'] == null) {
            throw new runtime.RequiredError(
                'aasIdentifier',
                'Required parameter "aasIdentifier" was null or undefined when calling getOperationAsyncResultAasRepository().'
            );
        }

        if (requestParameters['submodelIdentifier'] == null) {
            throw new runtime.RequiredError(
                'submodelIdentifier',
                'Required parameter "submodelIdentifier" was null or undefined when calling getOperationAsyncResultAasRepository().'
            );
        }

        if (requestParameters['idShortPath'] == null) {
            throw new runtime.RequiredError(
                'idShortPath',
                'Required parameter "idShortPath" was null or undefined when calling getOperationAsyncResultAasRepository().'
            );
        }

        if (requestParameters['handleId'] == null) {
            throw new runtime.RequiredError(
                'handleId',
                'Required parameter "handleId" was null or undefined when calling getOperationAsyncResultAasRepository().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/shells/{aasIdentifier}/submodels/{submodelIdentifier}/submodel-elements/{idShortPath}/operation-results/{handleId}`.replace(`{${"aasIdentifier"}}`, encodeURIComponent(String(requestParameters['aasIdentifier']))).replace(`{${"submodelIdentifier"}}`, encodeURIComponent(String(requestParameters['submodelIdentifier']))).replace(`{${"idShortPath"}}`, encodeURIComponent(String(requestParameters['idShortPath']))).replace(`{${"handleId"}}`, encodeURIComponent(String(requestParameters['handleId']))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response);
    }

    /**
     * Returns the Operation result of an asynchronous invoked Operation
     */
    async getOperationAsyncResultAasRepository(requestParameters: GetOperationAsyncResultAasRepositoryRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<OperationResult> {
        const response = await this.getOperationAsyncResultAasRepositoryRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Returns the ValueOnly notation of the Operation result of an asynchronous invoked Operation
     */
    async getOperationAsyncResultValueOnlyAasRepositoryRaw(requestParameters: GetOperationAsyncResultValueOnlyAasRepositoryRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<OperationResultValueOnly>> {
        if (requestParameters['aasIdentifier'] == null) {
            throw new runtime.RequiredError(
                'aasIdentifier',
                'Required parameter "aasIdentifier" was null or undefined when calling getOperationAsyncResultValueOnlyAasRepository().'
            );
        }

        if (requestParameters['submodelIdentifier'] == null) {
            throw new runtime.RequiredError(
                'submodelIdentifier',
                'Required parameter "submodelIdentifier" was null or undefined when calling getOperationAsyncResultValueOnlyAasRepository().'
            );
        }

        if (requestParameters['idShortPath'] == null) {
            throw new runtime.RequiredError(
                'idShortPath',
                'Required parameter "idShortPath" was null or undefined when calling getOperationAsyncResultValueOnlyAasRepository().'
            );
        }

        if (requestParameters['handleId'] == null) {
            throw new runtime.RequiredError(
                'handleId',
                'Required parameter "handleId" was null or undefined when calling getOperationAsyncResultValueOnlyAasRepository().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/shells/{aasIdentifier}/submodels/{submodelIdentifier}/submodel-elements/{idShortPath}/operation-results/{handleId}/$value`.replace(`{${"aasIdentifier"}}`, encodeURIComponent(String(requestParameters['aasIdentifier']))).replace(`{${"submodelIdentifier"}}`, encodeURIComponent(String(requestParameters['submodelIdentifier']))).replace(`{${"idShortPath"}}`, encodeURIComponent(String(requestParameters['idShortPath']))).replace(`{${"handleId"}}`, encodeURIComponent(String(requestParameters['handleId']))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response);
    }

    /**
     * Returns the ValueOnly notation of the Operation result of an asynchronous invoked Operation
     */
    async getOperationAsyncResultValueOnlyAasRepository(requestParameters: GetOperationAsyncResultValueOnlyAasRepositoryRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<OperationResultValueOnly> {
        const response = await this.getOperationAsyncResultValueOnlyAasRepositoryRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Returns the Operation status of an asynchronous invoked Operation
     */
    async getOperationAsyncStatusAasRepositoryRaw(requestParameters: GetOperationAsyncStatusAasRepositoryRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<BaseOperationResult>> {
        if (requestParameters['aasIdentifier'] == null) {
            throw new runtime.RequiredError(
                'aasIdentifier',
                'Required parameter "aasIdentifier" was null or undefined when calling getOperationAsyncStatusAasRepository().'
            );
        }

        if (requestParameters['submodelIdentifier'] == null) {
            throw new runtime.RequiredError(
                'submodelIdentifier',
                'Required parameter "submodelIdentifier" was null or undefined when calling getOperationAsyncStatusAasRepository().'
            );
        }

        if (requestParameters['idShortPath'] == null) {
            throw new runtime.RequiredError(
                'idShortPath',
                'Required parameter "idShortPath" was null or undefined when calling getOperationAsyncStatusAasRepository().'
            );
        }

        if (requestParameters['handleId'] == null) {
            throw new runtime.RequiredError(
                'handleId',
                'Required parameter "handleId" was null or undefined when calling getOperationAsyncStatusAasRepository().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/shells/{aasIdentifier}/submodels/{submodelIdentifier}/submodel-elements/{idShortPath}/operation-status/{handleId}`.replace(`{${"aasIdentifier"}}`, encodeURIComponent(String(requestParameters['aasIdentifier']))).replace(`{${"submodelIdentifier"}}`, encodeURIComponent(String(requestParameters['submodelIdentifier']))).replace(`{${"idShortPath"}}`, encodeURIComponent(String(requestParameters['idShortPath']))).replace(`{${"handleId"}}`, encodeURIComponent(String(requestParameters['handleId']))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response);
    }

    /**
     * Returns the Operation status of an asynchronous invoked Operation
     */
    async getOperationAsyncStatusAasRepository(requestParameters: GetOperationAsyncStatusAasRepositoryRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<BaseOperationResult> {
        const response = await this.getOperationAsyncStatusAasRepositoryRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Returns the Submodel
     */
    async getSubmodelByIdAasRepositoryRaw(requestParameters: GetSubmodelByIdAasRepositoryRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Submodel>> {
        if (requestParameters['aasIdentifier'] == null) {
            throw new runtime.RequiredError(
                'aasIdentifier',
                'Required parameter "aasIdentifier" was null or undefined when calling getSubmodelByIdAasRepository().'
            );
        }

        if (requestParameters['submodelIdentifier'] == null) {
            throw new runtime.RequiredError(
                'submodelIdentifier',
                'Required parameter "submodelIdentifier" was null or undefined when calling getSubmodelByIdAasRepository().'
            );
        }

        const queryParameters: any = {};

        if (requestParameters['level'] != null) {
            queryParameters['level'] = requestParameters['level'];
        }

        if (requestParameters['extent'] != null) {
            queryParameters['extent'] = requestParameters['extent'];
        }

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/shells/{aasIdentifier}/submodels/{submodelIdentifier}`.replace(`{${"aasIdentifier"}}`, encodeURIComponent(String(requestParameters['aasIdentifier']))).replace(`{${"submodelIdentifier"}}`, encodeURIComponent(String(requestParameters['submodelIdentifier']))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response);
    }

    /**
     * Returns the Submodel
     */
    async getSubmodelByIdAasRepository(requestParameters: GetSubmodelByIdAasRepositoryRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Submodel> {
        const response = await this.getSubmodelByIdAasRepositoryRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Returns the Submodel\'s metadata elements
     */
    async getSubmodelByIdMetadataAasRepositoryRaw(requestParameters: GetSubmodelByIdMetadataAasRepositoryRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<SubmodelMetadata>> {
        if (requestParameters['aasIdentifier'] == null) {
            throw new runtime.RequiredError(
                'aasIdentifier',
                'Required parameter "aasIdentifier" was null or undefined when calling getSubmodelByIdMetadataAasRepository().'
            );
        }

        if (requestParameters['submodelIdentifier'] == null) {
            throw new runtime.RequiredError(
                'submodelIdentifier',
                'Required parameter "submodelIdentifier" was null or undefined when calling getSubmodelByIdMetadataAasRepository().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/shells/{aasIdentifier}/submodels/{submodelIdentifier}/$metadata`.replace(`{${"aasIdentifier"}}`, encodeURIComponent(String(requestParameters['aasIdentifier']))).replace(`{${"submodelIdentifier"}}`, encodeURIComponent(String(requestParameters['submodelIdentifier']))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response);
    }

    /**
     * Returns the Submodel\'s metadata elements
     */
    async getSubmodelByIdMetadataAasRepository(requestParameters: GetSubmodelByIdMetadataAasRepositoryRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<SubmodelMetadata> {
        const response = await this.getSubmodelByIdMetadataAasRepositoryRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Returns the elements of this submodel in path notation.
     */
    async getSubmodelByIdPathAasRepositoryRaw(requestParameters: GetSubmodelByIdPathAasRepositoryRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Array<string>>> {
        if (requestParameters['aasIdentifier'] == null) {
            throw new runtime.RequiredError(
                'aasIdentifier',
                'Required parameter "aasIdentifier" was null or undefined when calling getSubmodelByIdPathAasRepository().'
            );
        }

        if (requestParameters['submodelIdentifier'] == null) {
            throw new runtime.RequiredError(
                'submodelIdentifier',
                'Required parameter "submodelIdentifier" was null or undefined when calling getSubmodelByIdPathAasRepository().'
            );
        }

        const queryParameters: any = {};

        if (requestParameters['level'] != null) {
            queryParameters['level'] = requestParameters['level'];
        }

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/shells/{aasIdentifier}/submodels/{submodelIdentifier}/$path`.replace(`{${"aasIdentifier"}}`, encodeURIComponent(String(requestParameters['aasIdentifier']))).replace(`{${"submodelIdentifier"}}`, encodeURIComponent(String(requestParameters['submodelIdentifier']))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse<any>(response);
    }

    /**
     * Returns the elements of this submodel in path notation.
     */
    async getSubmodelByIdPathAasRepository(requestParameters: GetSubmodelByIdPathAasRepositoryRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Array<string>> {
        const response = await this.getSubmodelByIdPathAasRepositoryRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Returns the Submodel as a Reference
     */
    async getSubmodelByIdReferenceAasRepositoryRaw(requestParameters: GetSubmodelByIdReferenceAasRepositoryRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Reference>> {
        if (requestParameters['aasIdentifier'] == null) {
            throw new runtime.RequiredError(
                'aasIdentifier',
                'Required parameter "aasIdentifier" was null or undefined when calling getSubmodelByIdReferenceAasRepository().'
            );
        }

        if (requestParameters['submodelIdentifier'] == null) {
            throw new runtime.RequiredError(
                'submodelIdentifier',
                'Required parameter "submodelIdentifier" was null or undefined when calling getSubmodelByIdReferenceAasRepository().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/shells/{aasIdentifier}/submodels/{submodelIdentifier}/$reference`.replace(`{${"aasIdentifier"}}`, encodeURIComponent(String(requestParameters['aasIdentifier']))).replace(`{${"submodelIdentifier"}}`, encodeURIComponent(String(requestParameters['submodelIdentifier']))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response);
    }

    /**
     * Returns the Submodel as a Reference
     */
    async getSubmodelByIdReferenceAasRepository(requestParameters: GetSubmodelByIdReferenceAasRepositoryRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Reference> {
        const response = await this.getSubmodelByIdReferenceAasRepositoryRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Returns the Submodel\'s ValueOnly representation
     */
    async getSubmodelByIdValueOnlyAasRepositoryRaw(requestParameters: GetSubmodelByIdValueOnlyAasRepositoryRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<object>> {
        if (requestParameters['aasIdentifier'] == null) {
            throw new runtime.RequiredError(
                'aasIdentifier',
                'Required parameter "aasIdentifier" was null or undefined when calling getSubmodelByIdValueOnlyAasRepository().'
            );
        }

        if (requestParameters['submodelIdentifier'] == null) {
            throw new runtime.RequiredError(
                'submodelIdentifier',
                'Required parameter "submodelIdentifier" was null or undefined when calling getSubmodelByIdValueOnlyAasRepository().'
            );
        }

        const queryParameters: any = {};

        if (requestParameters['level'] != null) {
            queryParameters['level'] = requestParameters['level'];
        }

        if (requestParameters['extent'] != null) {
            queryParameters['extent'] = requestParameters['extent'];
        }

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/shells/{aasIdentifier}/submodels/{submodelIdentifier}/$value`.replace(`{${"aasIdentifier"}}`, encodeURIComponent(String(requestParameters['aasIdentifier']))).replace(`{${"submodelIdentifier"}}`, encodeURIComponent(String(requestParameters['submodelIdentifier']))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse<any>(response);
    }

    /**
     * Returns the Submodel\'s ValueOnly representation
     */
    async getSubmodelByIdValueOnlyAasRepository(requestParameters: GetSubmodelByIdValueOnlyAasRepositoryRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<object> {
        const response = await this.getSubmodelByIdValueOnlyAasRepositoryRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Returns a specific submodel element from the Submodel at a specified path
     */
    async getSubmodelElementByPathAasRepositoryRaw(requestParameters: GetSubmodelElementByPathAasRepositoryRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<SubmodelElement>> {
        if (requestParameters['aasIdentifier'] == null) {
            throw new runtime.RequiredError(
                'aasIdentifier',
                'Required parameter "aasIdentifier" was null or undefined when calling getSubmodelElementByPathAasRepository().'
            );
        }

        if (requestParameters['submodelIdentifier'] == null) {
            throw new runtime.RequiredError(
                'submodelIdentifier',
                'Required parameter "submodelIdentifier" was null or undefined when calling getSubmodelElementByPathAasRepository().'
            );
        }

        if (requestParameters['idShortPath'] == null) {
            throw new runtime.RequiredError(
                'idShortPath',
                'Required parameter "idShortPath" was null or undefined when calling getSubmodelElementByPathAasRepository().'
            );
        }

        const queryParameters: any = {};

        if (requestParameters['level'] != null) {
            queryParameters['level'] = requestParameters['level'];
        }

        if (requestParameters['extent'] != null) {
            queryParameters['extent'] = requestParameters['extent'];
        }

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/shells/{aasIdentifier}/submodels/{submodelIdentifier}/submodel-elements/{idShortPath}`.replace(`{${"aasIdentifier"}}`, encodeURIComponent(String(requestParameters['aasIdentifier']))).replace(`{${"submodelIdentifier"}}`, encodeURIComponent(String(requestParameters['submodelIdentifier']))).replace(`{${"idShortPath"}}`, encodeURIComponent(String(requestParameters['idShortPath']))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response);
    }

    /**
     * Returns a specific submodel element from the Submodel at a specified path
     */
    async getSubmodelElementByPathAasRepository(requestParameters: GetSubmodelElementByPathAasRepositoryRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<SubmodelElement> {
        const response = await this.getSubmodelElementByPathAasRepositoryRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Returns the metadata attributes if a specific submodel element from the Submodel at a specified path
     */
    async getSubmodelElementByPathMetadataAasRepositoryRaw(requestParameters: GetSubmodelElementByPathMetadataAasRepositoryRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<SubmodelElementMetadata>> {
        if (requestParameters['aasIdentifier'] == null) {
            throw new runtime.RequiredError(
                'aasIdentifier',
                'Required parameter "aasIdentifier" was null or undefined when calling getSubmodelElementByPathMetadataAasRepository().'
            );
        }

        if (requestParameters['submodelIdentifier'] == null) {
            throw new runtime.RequiredError(
                'submodelIdentifier',
                'Required parameter "submodelIdentifier" was null or undefined when calling getSubmodelElementByPathMetadataAasRepository().'
            );
        }

        if (requestParameters['idShortPath'] == null) {
            throw new runtime.RequiredError(
                'idShortPath',
                'Required parameter "idShortPath" was null or undefined when calling getSubmodelElementByPathMetadataAasRepository().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/shells/{aasIdentifier}/submodels/{submodelIdentifier}/submodel-elements/{idShortPath}/$metadata`.replace(`{${"aasIdentifier"}}`, encodeURIComponent(String(requestParameters['aasIdentifier']))).replace(`{${"submodelIdentifier"}}`, encodeURIComponent(String(requestParameters['submodelIdentifier']))).replace(`{${"idShortPath"}}`, encodeURIComponent(String(requestParameters['idShortPath']))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response);
    }

    /**
     * Returns the metadata attributes if a specific submodel element from the Submodel at a specified path
     */
    async getSubmodelElementByPathMetadataAasRepository(requestParameters: GetSubmodelElementByPathMetadataAasRepositoryRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<SubmodelElementMetadata> {
        const response = await this.getSubmodelElementByPathMetadataAasRepositoryRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Returns a specific submodel element from the Submodel at a specified path in the Path notation
     */
    async getSubmodelElementByPathPathAasRepositoryRaw(requestParameters: GetSubmodelElementByPathPathAasRepositoryRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Array<string>>> {
        if (requestParameters['aasIdentifier'] == null) {
            throw new runtime.RequiredError(
                'aasIdentifier',
                'Required parameter "aasIdentifier" was null or undefined when calling getSubmodelElementByPathPathAasRepository().'
            );
        }

        if (requestParameters['submodelIdentifier'] == null) {
            throw new runtime.RequiredError(
                'submodelIdentifier',
                'Required parameter "submodelIdentifier" was null or undefined when calling getSubmodelElementByPathPathAasRepository().'
            );
        }

        if (requestParameters['idShortPath'] == null) {
            throw new runtime.RequiredError(
                'idShortPath',
                'Required parameter "idShortPath" was null or undefined when calling getSubmodelElementByPathPathAasRepository().'
            );
        }

        const queryParameters: any = {};

        if (requestParameters['level'] != null) {
            queryParameters['level'] = requestParameters['level'];
        }

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/shells/{aasIdentifier}/submodels/{submodelIdentifier}/submodel-elements/{idShortPath}/$path`.replace(`{${"aasIdentifier"}}`, encodeURIComponent(String(requestParameters['aasIdentifier']))).replace(`{${"submodelIdentifier"}}`, encodeURIComponent(String(requestParameters['submodelIdentifier']))).replace(`{${"idShortPath"}}`, encodeURIComponent(String(requestParameters['idShortPath']))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse<any>(response);
    }

    /**
     * Returns a specific submodel element from the Submodel at a specified path in the Path notation
     */
    async getSubmodelElementByPathPathAasRepository(requestParameters: GetSubmodelElementByPathPathAasRepositoryRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Array<string>> {
        const response = await this.getSubmodelElementByPathPathAasRepositoryRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Returns the Reference of a specific submodel element from the Submodel at a specified path
     */
    async getSubmodelElementByPathReferenceAasRepositoryRaw(requestParameters: GetSubmodelElementByPathReferenceAasRepositoryRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Reference>> {
        if (requestParameters['aasIdentifier'] == null) {
            throw new runtime.RequiredError(
                'aasIdentifier',
                'Required parameter "aasIdentifier" was null or undefined when calling getSubmodelElementByPathReferenceAasRepository().'
            );
        }

        if (requestParameters['submodelIdentifier'] == null) {
            throw new runtime.RequiredError(
                'submodelIdentifier',
                'Required parameter "submodelIdentifier" was null or undefined when calling getSubmodelElementByPathReferenceAasRepository().'
            );
        }

        if (requestParameters['idShortPath'] == null) {
            throw new runtime.RequiredError(
                'idShortPath',
                'Required parameter "idShortPath" was null or undefined when calling getSubmodelElementByPathReferenceAasRepository().'
            );
        }

        const queryParameters: any = {};

        if (requestParameters['level'] != null) {
            queryParameters['level'] = requestParameters['level'];
        }

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/shells/{aasIdentifier}/submodels/{submodelIdentifier}/submodel-elements/{idShortPath}/$reference`.replace(`{${"aasIdentifier"}}`, encodeURIComponent(String(requestParameters['aasIdentifier']))).replace(`{${"submodelIdentifier"}}`, encodeURIComponent(String(requestParameters['submodelIdentifier']))).replace(`{${"idShortPath"}}`, encodeURIComponent(String(requestParameters['idShortPath']))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response);
    }

    /**
     * Returns the Reference of a specific submodel element from the Submodel at a specified path
     */
    async getSubmodelElementByPathReferenceAasRepository(requestParameters: GetSubmodelElementByPathReferenceAasRepositoryRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Reference> {
        const response = await this.getSubmodelElementByPathReferenceAasRepositoryRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Returns a specific submodel element from the Submodel at a specified path in the ValueOnly representation
     */
    async getSubmodelElementByPathValueOnlyAasRepositoryRaw(requestParameters: GetSubmodelElementByPathValueOnlyAasRepositoryRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<SubmodelElementValue>> {
        if (requestParameters['aasIdentifier'] == null) {
            throw new runtime.RequiredError(
                'aasIdentifier',
                'Required parameter "aasIdentifier" was null or undefined when calling getSubmodelElementByPathValueOnlyAasRepository().'
            );
        }

        if (requestParameters['submodelIdentifier'] == null) {
            throw new runtime.RequiredError(
                'submodelIdentifier',
                'Required parameter "submodelIdentifier" was null or undefined when calling getSubmodelElementByPathValueOnlyAasRepository().'
            );
        }

        if (requestParameters['idShortPath'] == null) {
            throw new runtime.RequiredError(
                'idShortPath',
                'Required parameter "idShortPath" was null or undefined when calling getSubmodelElementByPathValueOnlyAasRepository().'
            );
        }

        const queryParameters: any = {};

        if (requestParameters['level'] != null) {
            queryParameters['level'] = requestParameters['level'];
        }

        if (requestParameters['extent'] != null) {
            queryParameters['extent'] = requestParameters['extent'];
        }

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/shells/{aasIdentifier}/submodels/{submodelIdentifier}/submodel-elements/{idShortPath}/$value`.replace(`{${"aasIdentifier"}}`, encodeURIComponent(String(requestParameters['aasIdentifier']))).replace(`{${"submodelIdentifier"}}`, encodeURIComponent(String(requestParameters['submodelIdentifier']))).replace(`{${"idShortPath"}}`, encodeURIComponent(String(requestParameters['idShortPath']))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response);
    }

    /**
     * Returns a specific submodel element from the Submodel at a specified path in the ValueOnly representation
     */
    async getSubmodelElementByPathValueOnlyAasRepository(requestParameters: GetSubmodelElementByPathValueOnlyAasRepositoryRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<SubmodelElementValue> {
        const response = await this.getSubmodelElementByPathValueOnlyAasRepositoryRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     */
    async getThumbnailAasRepositoryRaw(requestParameters: GetThumbnailAasRepositoryRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Blob>> {
        if (requestParameters['aasIdentifier'] == null) {
            throw new runtime.RequiredError(
                'aasIdentifier',
                'Required parameter "aasIdentifier" was null or undefined when calling getThumbnailAasRepository().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/shells/{aasIdentifier}/asset-information/thumbnail`.replace(`{${"aasIdentifier"}}`, encodeURIComponent(String(requestParameters['aasIdentifier']))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.BlobApiResponse(response);
    }

    /**
     */
    async getThumbnailAasRepository(requestParameters: GetThumbnailAasRepositoryRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Blob> {
        const response = await this.getThumbnailAasRepositoryRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Synchronously invokes an Operation at a specified path
     */
    async invokeOperationAasRepositoryRaw(requestParameters: InvokeOperationAasRepositoryRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<OperationResult>> {
        if (requestParameters['aasIdentifier'] == null) {
            throw new runtime.RequiredError(
                'aasIdentifier',
                'Required parameter "aasIdentifier" was null or undefined when calling invokeOperationAasRepository().'
            );
        }

        if (requestParameters['submodelIdentifier'] == null) {
            throw new runtime.RequiredError(
                'submodelIdentifier',
                'Required parameter "submodelIdentifier" was null or undefined when calling invokeOperationAasRepository().'
            );
        }

        if (requestParameters['idShortPath'] == null) {
            throw new runtime.RequiredError(
                'idShortPath',
                'Required parameter "idShortPath" was null or undefined when calling invokeOperationAasRepository().'
            );
        }

        if (requestParameters['operationRequest'] == null) {
            throw new runtime.RequiredError(
                'operationRequest',
                'Required parameter "operationRequest" was null or undefined when calling invokeOperationAasRepository().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        const response = await this.request({
            path: `/shells/{aasIdentifier}/submodels/{submodelIdentifier}/submodel-elements/{idShortPath}/invoke`.replace(`{${"aasIdentifier"}}`, encodeURIComponent(String(requestParameters['aasIdentifier']))).replace(`{${"submodelIdentifier"}}`, encodeURIComponent(String(requestParameters['submodelIdentifier']))).replace(`{${"idShortPath"}}`, encodeURIComponent(String(requestParameters['idShortPath']))),
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: requestParameters['operationRequest'],
        }, initOverrides);

        return new runtime.JSONApiResponse(response);
    }

    /**
     * Synchronously invokes an Operation at a specified path
     */
    async invokeOperationAasRepository(requestParameters: InvokeOperationAasRepositoryRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<OperationResult> {
        const response = await this.invokeOperationAasRepositoryRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Asynchronously invokes an Operation at a specified path
     */
    async invokeOperationAsyncAasRepositoryRaw(requestParameters: InvokeOperationAsyncAasRepositoryRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>> {
        if (requestParameters['aasIdentifier'] == null) {
            throw new runtime.RequiredError(
                'aasIdentifier',
                'Required parameter "aasIdentifier" was null or undefined when calling invokeOperationAsyncAasRepository().'
            );
        }

        if (requestParameters['submodelIdentifier'] == null) {
            throw new runtime.RequiredError(
                'submodelIdentifier',
                'Required parameter "submodelIdentifier" was null or undefined when calling invokeOperationAsyncAasRepository().'
            );
        }

        if (requestParameters['idShortPath'] == null) {
            throw new runtime.RequiredError(
                'idShortPath',
                'Required parameter "idShortPath" was null or undefined when calling invokeOperationAsyncAasRepository().'
            );
        }

        if (requestParameters['operationRequest'] == null) {
            throw new runtime.RequiredError(
                'operationRequest',
                'Required parameter "operationRequest" was null or undefined when calling invokeOperationAsyncAasRepository().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        const response = await this.request({
            path: `/shells/{aasIdentifier}/submodels/{submodelIdentifier}/submodel-elements/{idShortPath}/invoke-async`.replace(`{${"aasIdentifier"}}`, encodeURIComponent(String(requestParameters['aasIdentifier']))).replace(`{${"submodelIdentifier"}}`, encodeURIComponent(String(requestParameters['submodelIdentifier']))).replace(`{${"idShortPath"}}`, encodeURIComponent(String(requestParameters['idShortPath']))),
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: requestParameters['operationRequest'],
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     * Asynchronously invokes an Operation at a specified path
     */
    async invokeOperationAsyncAasRepository(requestParameters: InvokeOperationAsyncAasRepositoryRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void> {
        await this.invokeOperationAsyncAasRepositoryRaw(requestParameters, initOverrides);
    }

    /**
     * Asynchronously invokes an Operation at a specified path
     */
    async invokeOperationAsyncValueOnlyAasRepositoryRaw(requestParameters: InvokeOperationAsyncValueOnlyAasRepositoryRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>> {
        if (requestParameters['aasIdentifier'] == null) {
            throw new runtime.RequiredError(
                'aasIdentifier',
                'Required parameter "aasIdentifier" was null or undefined when calling invokeOperationAsyncValueOnlyAasRepository().'
            );
        }

        if (requestParameters['submodelIdentifier'] == null) {
            throw new runtime.RequiredError(
                'submodelIdentifier',
                'Required parameter "submodelIdentifier" was null or undefined when calling invokeOperationAsyncValueOnlyAasRepository().'
            );
        }

        if (requestParameters['idShortPath'] == null) {
            throw new runtime.RequiredError(
                'idShortPath',
                'Required parameter "idShortPath" was null or undefined when calling invokeOperationAsyncValueOnlyAasRepository().'
            );
        }

        if (requestParameters['operationRequestValueOnly'] == null) {
            throw new runtime.RequiredError(
                'operationRequestValueOnly',
                'Required parameter "operationRequestValueOnly" was null or undefined when calling invokeOperationAsyncValueOnlyAasRepository().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        const response = await this.request({
            path: `/shells/{aasIdentifier}/submodels/{submodelIdentifier}/submodel-elements/{idShortPath}/invoke-async/$value`.replace(`{${"aasIdentifier"}}`, encodeURIComponent(String(requestParameters['aasIdentifier']))).replace(`{${"submodelIdentifier"}}`, encodeURIComponent(String(requestParameters['submodelIdentifier']))).replace(`{${"idShortPath"}}`, encodeURIComponent(String(requestParameters['idShortPath']))),
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: requestParameters['operationRequestValueOnly'],
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     * Asynchronously invokes an Operation at a specified path
     */
    async invokeOperationAsyncValueOnlyAasRepository(requestParameters: InvokeOperationAsyncValueOnlyAasRepositoryRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void> {
        await this.invokeOperationAsyncValueOnlyAasRepositoryRaw(requestParameters, initOverrides);
    }

    /**
     * Synchronously invokes an Operation at a specified path
     */
    async invokeOperationValueOnlyAasRepositoryRaw(requestParameters: InvokeOperationValueOnlyAasRepositoryRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<OperationResultValueOnly>> {
        if (requestParameters['aasIdentifier'] == null) {
            throw new runtime.RequiredError(
                'aasIdentifier',
                'Required parameter "aasIdentifier" was null or undefined when calling invokeOperationValueOnlyAasRepository().'
            );
        }

        if (requestParameters['submodelIdentifier'] == null) {
            throw new runtime.RequiredError(
                'submodelIdentifier',
                'Required parameter "submodelIdentifier" was null or undefined when calling invokeOperationValueOnlyAasRepository().'
            );
        }

        if (requestParameters['idShortPath'] == null) {
            throw new runtime.RequiredError(
                'idShortPath',
                'Required parameter "idShortPath" was null or undefined when calling invokeOperationValueOnlyAasRepository().'
            );
        }

        if (requestParameters['operationRequestValueOnly'] == null) {
            throw new runtime.RequiredError(
                'operationRequestValueOnly',
                'Required parameter "operationRequestValueOnly" was null or undefined when calling invokeOperationValueOnlyAasRepository().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        const response = await this.request({
            path: `/shells/{aasIdentifier}/submodels/{submodelIdentifier}/submodel-elements/{idShortPath}/invoke/$value`.replace(`{${"aasIdentifier"}}`, encodeURIComponent(String(requestParameters['aasIdentifier']))).replace(`{${"submodelIdentifier"}}`, encodeURIComponent(String(requestParameters['submodelIdentifier']))).replace(`{${"idShortPath"}}`, encodeURIComponent(String(requestParameters['idShortPath']))),
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: requestParameters['operationRequestValueOnly'],
        }, initOverrides);

        return new runtime.JSONApiResponse(response);
    }

    /**
     * Synchronously invokes an Operation at a specified path
     */
    async invokeOperationValueOnlyAasRepository(requestParameters: InvokeOperationValueOnlyAasRepositoryRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<OperationResultValueOnly> {
        const response = await this.invokeOperationValueOnlyAasRepositoryRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Updates the Submodel
     */
    async patchSubmodelAasRepositoryRaw(requestParameters: PatchSubmodelAasRepositoryRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>> {
        if (requestParameters['aasIdentifier'] == null) {
            throw new runtime.RequiredError(
                'aasIdentifier',
                'Required parameter "aasIdentifier" was null or undefined when calling patchSubmodelAasRepository().'
            );
        }

        if (requestParameters['submodelIdentifier'] == null) {
            throw new runtime.RequiredError(
                'submodelIdentifier',
                'Required parameter "submodelIdentifier" was null or undefined when calling patchSubmodelAasRepository().'
            );
        }

        if (requestParameters['submodel'] == null) {
            throw new runtime.RequiredError(
                'submodel',
                'Required parameter "submodel" was null or undefined when calling patchSubmodelAasRepository().'
            );
        }

        const queryParameters: any = {};

        if (requestParameters['level'] != null) {
            queryParameters['level'] = requestParameters['level'];
        }

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        const response = await this.request({
            path: `/shells/{aasIdentifier}/submodels/{submodelIdentifier}`.replace(`{${"aasIdentifier"}}`, encodeURIComponent(String(requestParameters['aasIdentifier']))).replace(`{${"submodelIdentifier"}}`, encodeURIComponent(String(requestParameters['submodelIdentifier']))),
            method: 'PATCH',
            headers: headerParameters,
            query: queryParameters,
            body: requestParameters['submodel'],
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     * Updates the Submodel
     */
    async patchSubmodelAasRepository(requestParameters: PatchSubmodelAasRepositoryRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void> {
        await this.patchSubmodelAasRepositoryRaw(requestParameters, initOverrides);
    }

    /**
     * Updates the metadata attributes of the Submodel
     */
    async patchSubmodelByIdMetadataAasRepositoryRaw(requestParameters: PatchSubmodelByIdMetadataAasRepositoryRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>> {
        if (requestParameters['aasIdentifier'] == null) {
            throw new runtime.RequiredError(
                'aasIdentifier',
                'Required parameter "aasIdentifier" was null or undefined when calling patchSubmodelByIdMetadataAasRepository().'
            );
        }

        if (requestParameters['submodelIdentifier'] == null) {
            throw new runtime.RequiredError(
                'submodelIdentifier',
                'Required parameter "submodelIdentifier" was null or undefined when calling patchSubmodelByIdMetadataAasRepository().'
            );
        }

        if (requestParameters['submodelMetadata'] == null) {
            throw new runtime.RequiredError(
                'submodelMetadata',
                'Required parameter "submodelMetadata" was null or undefined when calling patchSubmodelByIdMetadataAasRepository().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        const response = await this.request({
            path: `/shells/{aasIdentifier}/submodels/{submodelIdentifier}/$metadata`.replace(`{${"aasIdentifier"}}`, encodeURIComponent(String(requestParameters['aasIdentifier']))).replace(`{${"submodelIdentifier"}}`, encodeURIComponent(String(requestParameters['submodelIdentifier']))),
            method: 'PATCH',
            headers: headerParameters,
            query: queryParameters,
            body: requestParameters['submodelMetadata'],
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     * Updates the metadata attributes of the Submodel
     */
    async patchSubmodelByIdMetadataAasRepository(requestParameters: PatchSubmodelByIdMetadataAasRepositoryRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void> {
        await this.patchSubmodelByIdMetadataAasRepositoryRaw(requestParameters, initOverrides);
    }

    /**
     * Updates the values of the Submodel
     */
    async patchSubmodelByIdValueOnlyAasRepositoryRaw(requestParameters: PatchSubmodelByIdValueOnlyAasRepositoryRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>> {
        if (requestParameters['aasIdentifier'] == null) {
            throw new runtime.RequiredError(
                'aasIdentifier',
                'Required parameter "aasIdentifier" was null or undefined when calling patchSubmodelByIdValueOnlyAasRepository().'
            );
        }

        if (requestParameters['submodelIdentifier'] == null) {
            throw new runtime.RequiredError(
                'submodelIdentifier',
                'Required parameter "submodelIdentifier" was null or undefined when calling patchSubmodelByIdValueOnlyAasRepository().'
            );
        }

        if (requestParameters['body'] == null) {
            throw new runtime.RequiredError(
                'body',
                'Required parameter "body" was null or undefined when calling patchSubmodelByIdValueOnlyAasRepository().'
            );
        }

        const queryParameters: any = {};

        if (requestParameters['level'] != null) {
            queryParameters['level'] = requestParameters['level'];
        }

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        const response = await this.request({
            path: `/shells/{aasIdentifier}/submodels/{submodelIdentifier}/$value`.replace(`{${"aasIdentifier"}}`, encodeURIComponent(String(requestParameters['aasIdentifier']))).replace(`{${"submodelIdentifier"}}`, encodeURIComponent(String(requestParameters['submodelIdentifier']))),
            method: 'PATCH',
            headers: headerParameters,
            query: queryParameters,
            body: requestParameters['body'] as any,
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     * Updates the values of the Submodel
     */
    async patchSubmodelByIdValueOnlyAasRepository(requestParameters: PatchSubmodelByIdValueOnlyAasRepositoryRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void> {
        await this.patchSubmodelByIdValueOnlyAasRepositoryRaw(requestParameters, initOverrides);
    }

    /**
     * Updates an existing submodel element value at a specified path within submodel elements hierarchy
     */
    async patchSubmodelElementValueByPathAasRepositoryRaw(requestParameters: PatchSubmodelElementValueByPathAasRepositoryRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>> {
        if (requestParameters['aasIdentifier'] == null) {
            throw new runtime.RequiredError(
                'aasIdentifier',
                'Required parameter "aasIdentifier" was null or undefined when calling patchSubmodelElementValueByPathAasRepository().'
            );
        }

        if (requestParameters['submodelIdentifier'] == null) {
            throw new runtime.RequiredError(
                'submodelIdentifier',
                'Required parameter "submodelIdentifier" was null or undefined when calling patchSubmodelElementValueByPathAasRepository().'
            );
        }

        if (requestParameters['idShortPath'] == null) {
            throw new runtime.RequiredError(
                'idShortPath',
                'Required parameter "idShortPath" was null or undefined when calling patchSubmodelElementValueByPathAasRepository().'
            );
        }

        if (requestParameters['submodelElement'] == null) {
            throw new runtime.RequiredError(
                'submodelElement',
                'Required parameter "submodelElement" was null or undefined when calling patchSubmodelElementValueByPathAasRepository().'
            );
        }

        const queryParameters: any = {};

        if (requestParameters['level'] != null) {
            queryParameters['level'] = requestParameters['level'];
        }

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        const response = await this.request({
            path: `/shells/{aasIdentifier}/submodels/{submodelIdentifier}/submodel-elements/{idShortPath}`.replace(`{${"aasIdentifier"}}`, encodeURIComponent(String(requestParameters['aasIdentifier']))).replace(`{${"submodelIdentifier"}}`, encodeURIComponent(String(requestParameters['submodelIdentifier']))).replace(`{${"idShortPath"}}`, encodeURIComponent(String(requestParameters['idShortPath']))),
            method: 'PATCH',
            headers: headerParameters,
            query: queryParameters,
            body: requestParameters['submodelElement'],
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     * Updates an existing submodel element value at a specified path within submodel elements hierarchy
     */
    async patchSubmodelElementValueByPathAasRepository(requestParameters: PatchSubmodelElementValueByPathAasRepositoryRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void> {
        await this.patchSubmodelElementValueByPathAasRepositoryRaw(requestParameters, initOverrides);
    }

    /**
     * Updates the metadata attributes of an existing submodel element value at a specified path within submodel elements hierarchy
     */
    async patchSubmodelElementValueByPathMetadataRaw(requestParameters: PatchSubmodelElementValueByPathMetadataRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>> {
        if (requestParameters['aasIdentifier'] == null) {
            throw new runtime.RequiredError(
                'aasIdentifier',
                'Required parameter "aasIdentifier" was null or undefined when calling patchSubmodelElementValueByPathMetadata().'
            );
        }

        if (requestParameters['submodelIdentifier'] == null) {
            throw new runtime.RequiredError(
                'submodelIdentifier',
                'Required parameter "submodelIdentifier" was null or undefined when calling patchSubmodelElementValueByPathMetadata().'
            );
        }

        if (requestParameters['idShortPath'] == null) {
            throw new runtime.RequiredError(
                'idShortPath',
                'Required parameter "idShortPath" was null or undefined when calling patchSubmodelElementValueByPathMetadata().'
            );
        }

        if (requestParameters['submodelElementMetadata'] == null) {
            throw new runtime.RequiredError(
                'submodelElementMetadata',
                'Required parameter "submodelElementMetadata" was null or undefined when calling patchSubmodelElementValueByPathMetadata().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        const response = await this.request({
            path: `/shells/{aasIdentifier}/submodels/{submodelIdentifier}/submodel-elements/{idShortPath}/$metadata`.replace(`{${"aasIdentifier"}}`, encodeURIComponent(String(requestParameters['aasIdentifier']))).replace(`{${"submodelIdentifier"}}`, encodeURIComponent(String(requestParameters['submodelIdentifier']))).replace(`{${"idShortPath"}}`, encodeURIComponent(String(requestParameters['idShortPath']))),
            method: 'PATCH',
            headers: headerParameters,
            query: queryParameters,
            body: requestParameters['submodelElementMetadata'],
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     * Updates the metadata attributes of an existing submodel element value at a specified path within submodel elements hierarchy
     */
    async patchSubmodelElementValueByPathMetadata(requestParameters: PatchSubmodelElementValueByPathMetadataRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void> {
        await this.patchSubmodelElementValueByPathMetadataRaw(requestParameters, initOverrides);
    }

    /**
     * Updates the value of an existing submodel element value at a specified path within submodel elements hierarchy
     */
    async patchSubmodelElementValueByPathValueOnlyRaw(requestParameters: PatchSubmodelElementValueByPathValueOnlyRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>> {
        if (requestParameters['aasIdentifier'] == null) {
            throw new runtime.RequiredError(
                'aasIdentifier',
                'Required parameter "aasIdentifier" was null or undefined when calling patchSubmodelElementValueByPathValueOnly().'
            );
        }

        if (requestParameters['submodelIdentifier'] == null) {
            throw new runtime.RequiredError(
                'submodelIdentifier',
                'Required parameter "submodelIdentifier" was null or undefined when calling patchSubmodelElementValueByPathValueOnly().'
            );
        }

        if (requestParameters['idShortPath'] == null) {
            throw new runtime.RequiredError(
                'idShortPath',
                'Required parameter "idShortPath" was null or undefined when calling patchSubmodelElementValueByPathValueOnly().'
            );
        }

        if (requestParameters['submodelElementValue'] == null) {
            throw new runtime.RequiredError(
                'submodelElementValue',
                'Required parameter "submodelElementValue" was null or undefined when calling patchSubmodelElementValueByPathValueOnly().'
            );
        }

        const queryParameters: any = {};

        if (requestParameters['level'] != null) {
            queryParameters['level'] = requestParameters['level'];
        }

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        const response = await this.request({
            path: `/shells/{aasIdentifier}/submodels/{submodelIdentifier}/submodel-elements/{idShortPath}/$value`.replace(`{${"aasIdentifier"}}`, encodeURIComponent(String(requestParameters['aasIdentifier']))).replace(`{${"submodelIdentifier"}}`, encodeURIComponent(String(requestParameters['submodelIdentifier']))).replace(`{${"idShortPath"}}`, encodeURIComponent(String(requestParameters['idShortPath']))),
            method: 'PATCH',
            headers: headerParameters,
            query: queryParameters,
            body: requestParameters['submodelElementValue'],
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     * Updates the value of an existing submodel element value at a specified path within submodel elements hierarchy
     */
    async patchSubmodelElementValueByPathValueOnly(requestParameters: PatchSubmodelElementValueByPathValueOnlyRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void> {
        await this.patchSubmodelElementValueByPathValueOnlyRaw(requestParameters, initOverrides);
    }

    /**
     * Creates a new Asset Administration Shell
     */
    async postAssetAdministrationShellRaw(requestParameters: PostAssetAdministrationShellRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<AssetAdministrationShell>> {
        if (requestParameters['assetAdministrationShell'] == null) {
            throw new runtime.RequiredError(
                'assetAdministrationShell',
                'Required parameter "assetAdministrationShell" was null or undefined when calling postAssetAdministrationShell().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        const response = await this.request({
            path: `/shells`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: requestParameters['assetAdministrationShell'],
        }, initOverrides);

        return new runtime.JSONApiResponse(response);
    }

    /**
     * Creates a new Asset Administration Shell
     */
    async postAssetAdministrationShell(requestParameters: PostAssetAdministrationShellRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<AssetAdministrationShell> {
        const response = await this.postAssetAdministrationShellRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Creates a new submodel element
     */
    async postSubmodelElementAasRepositoryRaw(requestParameters: PostSubmodelElementAasRepositoryRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<SubmodelElement>> {
        if (requestParameters['aasIdentifier'] == null) {
            throw new runtime.RequiredError(
                'aasIdentifier',
                'Required parameter "aasIdentifier" was null or undefined when calling postSubmodelElementAasRepository().'
            );
        }

        if (requestParameters['submodelIdentifier'] == null) {
            throw new runtime.RequiredError(
                'submodelIdentifier',
                'Required parameter "submodelIdentifier" was null or undefined when calling postSubmodelElementAasRepository().'
            );
        }

        if (requestParameters['submodelElement'] == null) {
            throw new runtime.RequiredError(
                'submodelElement',
                'Required parameter "submodelElement" was null or undefined when calling postSubmodelElementAasRepository().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        const response = await this.request({
            path: `/shells/{aasIdentifier}/submodels/{submodelIdentifier}/submodel-elements`.replace(`{${"aasIdentifier"}}`, encodeURIComponent(String(requestParameters['aasIdentifier']))).replace(`{${"submodelIdentifier"}}`, encodeURIComponent(String(requestParameters['submodelIdentifier']))),
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: requestParameters['submodelElement'],
        }, initOverrides);

        return new runtime.JSONApiResponse(response);
    }

    /**
     * Creates a new submodel element
     */
    async postSubmodelElementAasRepository(requestParameters: PostSubmodelElementAasRepositoryRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<SubmodelElement> {
        const response = await this.postSubmodelElementAasRepositoryRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Creates a new submodel element at a specified path within submodel elements hierarchy
     */
    async postSubmodelElementByPathAasRepositoryRaw(requestParameters: PostSubmodelElementByPathAasRepositoryRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<SubmodelElement>> {
        if (requestParameters['aasIdentifier'] == null) {
            throw new runtime.RequiredError(
                'aasIdentifier',
                'Required parameter "aasIdentifier" was null or undefined when calling postSubmodelElementByPathAasRepository().'
            );
        }

        if (requestParameters['submodelIdentifier'] == null) {
            throw new runtime.RequiredError(
                'submodelIdentifier',
                'Required parameter "submodelIdentifier" was null or undefined when calling postSubmodelElementByPathAasRepository().'
            );
        }

        if (requestParameters['idShortPath'] == null) {
            throw new runtime.RequiredError(
                'idShortPath',
                'Required parameter "idShortPath" was null or undefined when calling postSubmodelElementByPathAasRepository().'
            );
        }

        if (requestParameters['submodelElement'] == null) {
            throw new runtime.RequiredError(
                'submodelElement',
                'Required parameter "submodelElement" was null or undefined when calling postSubmodelElementByPathAasRepository().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        const response = await this.request({
            path: `/shells/{aasIdentifier}/submodels/{submodelIdentifier}/submodel-elements/{idShortPath}`.replace(`{${"aasIdentifier"}}`, encodeURIComponent(String(requestParameters['aasIdentifier']))).replace(`{${"submodelIdentifier"}}`, encodeURIComponent(String(requestParameters['submodelIdentifier']))).replace(`{${"idShortPath"}}`, encodeURIComponent(String(requestParameters['idShortPath']))),
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: requestParameters['submodelElement'],
        }, initOverrides);

        return new runtime.JSONApiResponse(response);
    }

    /**
     * Creates a new submodel element at a specified path within submodel elements hierarchy
     */
    async postSubmodelElementByPathAasRepository(requestParameters: PostSubmodelElementByPathAasRepositoryRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<SubmodelElement> {
        const response = await this.postSubmodelElementByPathAasRepositoryRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Creates a submodel reference at the Asset Administration Shell
     */
    async postSubmodelReferenceAasRepositoryRaw(requestParameters: PostSubmodelReferenceAasRepositoryRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Reference>> {
        if (requestParameters['aasIdentifier'] == null) {
            throw new runtime.RequiredError(
                'aasIdentifier',
                'Required parameter "aasIdentifier" was null or undefined when calling postSubmodelReferenceAasRepository().'
            );
        }

        if (requestParameters['reference'] == null) {
            throw new runtime.RequiredError(
                'reference',
                'Required parameter "reference" was null or undefined when calling postSubmodelReferenceAasRepository().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        const response = await this.request({
            path: `/shells/{aasIdentifier}/submodel-refs`.replace(`{${"aasIdentifier"}}`, encodeURIComponent(String(requestParameters['aasIdentifier']))),
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: requestParameters['reference'],
        }, initOverrides);

        return new runtime.JSONApiResponse(response);
    }

    /**
     * Creates a submodel reference at the Asset Administration Shell
     */
    async postSubmodelReferenceAasRepository(requestParameters: PostSubmodelReferenceAasRepositoryRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Reference> {
        const response = await this.postSubmodelReferenceAasRepositoryRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Creates or updates an existing Asset Administration Shell
     */
    async putAssetAdministrationShellByIdRaw(requestParameters: PutAssetAdministrationShellByIdRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<AssetAdministrationShell>> {
        if (requestParameters['aasIdentifier'] == null) {
            throw new runtime.RequiredError(
                'aasIdentifier',
                'Required parameter "aasIdentifier" was null or undefined when calling putAssetAdministrationShellById().'
            );
        }

        if (requestParameters['assetAdministrationShell'] == null) {
            throw new runtime.RequiredError(
                'assetAdministrationShell',
                'Required parameter "assetAdministrationShell" was null or undefined when calling putAssetAdministrationShellById().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        const response = await this.request({
            path: `/shells/{aasIdentifier}`.replace(`{${"aasIdentifier"}}`, encodeURIComponent(String(requestParameters['aasIdentifier']))),
            method: 'PUT',
            headers: headerParameters,
            query: queryParameters,
            body: requestParameters['assetAdministrationShell'],
        }, initOverrides);

        return new runtime.JSONApiResponse(response);
    }

    /**
     * Creates or updates an existing Asset Administration Shell
     */
    async putAssetAdministrationShellById(requestParameters: PutAssetAdministrationShellByIdRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<AssetAdministrationShell | null | undefined > {
        const response = await this.putAssetAdministrationShellByIdRaw(requestParameters, initOverrides);
        switch (response.raw.status) {
            case 201:
                return await response.value();
            case 204:
                return null;
            default:
                return await response.value();
        }
    }

    /**
     * Updates the Asset Information
     */
    async putAssetInformationAasRepositoryRaw(requestParameters: PutAssetInformationAasRepositoryRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>> {
        if (requestParameters['aasIdentifier'] == null) {
            throw new runtime.RequiredError(
                'aasIdentifier',
                'Required parameter "aasIdentifier" was null or undefined when calling putAssetInformationAasRepository().'
            );
        }

        if (requestParameters['assetInformation'] == null) {
            throw new runtime.RequiredError(
                'assetInformation',
                'Required parameter "assetInformation" was null or undefined when calling putAssetInformationAasRepository().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        const response = await this.request({
            path: `/shells/{aasIdentifier}/asset-information`.replace(`{${"aasIdentifier"}}`, encodeURIComponent(String(requestParameters['aasIdentifier']))),
            method: 'PUT',
            headers: headerParameters,
            query: queryParameters,
            body: requestParameters['assetInformation'],
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     * Updates the Asset Information
     */
    async putAssetInformationAasRepository(requestParameters: PutAssetInformationAasRepositoryRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void> {
        await this.putAssetInformationAasRepositoryRaw(requestParameters, initOverrides);
    }

    /**
     * Uploads file content to an existing submodel element at a specified path within submodel elements hierarchy
     */
    async putFileByPathAasRepositoryRaw(requestParameters: PutFileByPathAasRepositoryRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>> {
        if (requestParameters['aasIdentifier'] == null) {
            throw new runtime.RequiredError(
                'aasIdentifier',
                'Required parameter "aasIdentifier" was null or undefined when calling putFileByPathAasRepository().'
            );
        }

        if (requestParameters['submodelIdentifier'] == null) {
            throw new runtime.RequiredError(
                'submodelIdentifier',
                'Required parameter "submodelIdentifier" was null or undefined when calling putFileByPathAasRepository().'
            );
        }

        if (requestParameters['idShortPath'] == null) {
            throw new runtime.RequiredError(
                'idShortPath',
                'Required parameter "idShortPath" was null or undefined when calling putFileByPathAasRepository().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const consumes: runtime.Consume[] = [
            { contentType: 'multipart/form-data' },
        ];
        // @ts-ignore: canConsumeForm may be unused
        const canConsumeForm = runtime.canConsumeForm(consumes);

        let formParams: { append(param: string, value: any): any };
        let useForm = false;
        // use FormData to transmit files using content-type "multipart/form-data"
        useForm = canConsumeForm;
        if (useForm) {
            formParams = new FormData();
        } else {
            formParams = new URLSearchParams();
        }

        if (requestParameters['fileName'] != null) {
            formParams.append('fileName', requestParameters['fileName'] as any);
        }

        if (requestParameters['file'] != null) {
            formParams.append('file', requestParameters['file'] as any);
        }

        const response = await this.request({
            path: `/shells/{aasIdentifier}/submodels/{submodelIdentifier}/submodel-elements/{idShortPath}/attachment`.replace(`{${"aasIdentifier"}}`, encodeURIComponent(String(requestParameters['aasIdentifier']))).replace(`{${"submodelIdentifier"}}`, encodeURIComponent(String(requestParameters['submodelIdentifier']))).replace(`{${"idShortPath"}}`, encodeURIComponent(String(requestParameters['idShortPath']))),
            method: 'PUT',
            headers: headerParameters,
            query: queryParameters,
            body: formParams,
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     * Uploads file content to an existing submodel element at a specified path within submodel elements hierarchy
     */
    async putFileByPathAasRepository(requestParameters: PutFileByPathAasRepositoryRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void> {
        await this.putFileByPathAasRepositoryRaw(requestParameters, initOverrides);
    }

    /**
     * Creates or updates the Submodel
     */
    async putSubmodelByIdAasRepositoryRaw(requestParameters: PutSubmodelByIdAasRepositoryRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Reference>> {
        if (requestParameters['aasIdentifier'] == null) {
            throw new runtime.RequiredError(
                'aasIdentifier',
                'Required parameter "aasIdentifier" was null or undefined when calling putSubmodelByIdAasRepository().'
            );
        }

        if (requestParameters['submodelIdentifier'] == null) {
            throw new runtime.RequiredError(
                'submodelIdentifier',
                'Required parameter "submodelIdentifier" was null or undefined when calling putSubmodelByIdAasRepository().'
            );
        }

        if (requestParameters['submodel'] == null) {
            throw new runtime.RequiredError(
                'submodel',
                'Required parameter "submodel" was null or undefined when calling putSubmodelByIdAasRepository().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        const response = await this.request({
            path: `/shells/{aasIdentifier}/submodels/{submodelIdentifier}`.replace(`{${"aasIdentifier"}}`, encodeURIComponent(String(requestParameters['aasIdentifier']))).replace(`{${"submodelIdentifier"}}`, encodeURIComponent(String(requestParameters['submodelIdentifier']))),
            method: 'PUT',
            headers: headerParameters,
            query: queryParameters,
            body: requestParameters['submodel'],
        }, initOverrides);

        return new runtime.JSONApiResponse(response);
    }

    /**
     * Creates or updates the Submodel
     */
    async putSubmodelByIdAasRepository(requestParameters: PutSubmodelByIdAasRepositoryRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Reference | null | undefined > {
        const response = await this.putSubmodelByIdAasRepositoryRaw(requestParameters, initOverrides);
        switch (response.raw.status) {
            case 201:
                return await response.value();
            case 204:
                return null;
            default:
                return await response.value();
        }
    }

    /**
     * Creates or updates an existing submodel element at a specified path within submodel elements hierarchy
     */
    async putSubmodelElementByPathAasRepositoryRaw(requestParameters: PutSubmodelElementByPathAasRepositoryRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<SubmodelElement>> {
        if (requestParameters['aasIdentifier'] == null) {
            throw new runtime.RequiredError(
                'aasIdentifier',
                'Required parameter "aasIdentifier" was null or undefined when calling putSubmodelElementByPathAasRepository().'
            );
        }

        if (requestParameters['submodelIdentifier'] == null) {
            throw new runtime.RequiredError(
                'submodelIdentifier',
                'Required parameter "submodelIdentifier" was null or undefined when calling putSubmodelElementByPathAasRepository().'
            );
        }

        if (requestParameters['idShortPath'] == null) {
            throw new runtime.RequiredError(
                'idShortPath',
                'Required parameter "idShortPath" was null or undefined when calling putSubmodelElementByPathAasRepository().'
            );
        }

        if (requestParameters['submodelElement'] == null) {
            throw new runtime.RequiredError(
                'submodelElement',
                'Required parameter "submodelElement" was null or undefined when calling putSubmodelElementByPathAasRepository().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        const response = await this.request({
            path: `/shells/{aasIdentifier}/submodels/{submodelIdentifier}/submodel-elements/{idShortPath}`.replace(`{${"aasIdentifier"}}`, encodeURIComponent(String(requestParameters['aasIdentifier']))).replace(`{${"submodelIdentifier"}}`, encodeURIComponent(String(requestParameters['submodelIdentifier']))).replace(`{${"idShortPath"}}`, encodeURIComponent(String(requestParameters['idShortPath']))),
            method: 'PUT',
            headers: headerParameters,
            query: queryParameters,
            body: requestParameters['submodelElement'],
        }, initOverrides);

        return new runtime.JSONApiResponse(response);
    }

    /**
     * Creates or updates an existing submodel element at a specified path within submodel elements hierarchy
     */
    async putSubmodelElementByPathAasRepository(requestParameters: PutSubmodelElementByPathAasRepositoryRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<SubmodelElement | null | undefined > {
        const response = await this.putSubmodelElementByPathAasRepositoryRaw(requestParameters, initOverrides);
        switch (response.raw.status) {
            case 201:
                return await response.value();
            case 204:
                return null;
            default:
                return await response.value();
        }
    }

    /**
     */
    async putThumbnailAasRepositoryRaw(requestParameters: PutThumbnailAasRepositoryRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>> {
        if (requestParameters['aasIdentifier'] == null) {
            throw new runtime.RequiredError(
                'aasIdentifier',
                'Required parameter "aasIdentifier" was null or undefined when calling putThumbnailAasRepository().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const consumes: runtime.Consume[] = [
            { contentType: 'multipart/form-data' },
        ];
        // @ts-ignore: canConsumeForm may be unused
        const canConsumeForm = runtime.canConsumeForm(consumes);

        let formParams: { append(param: string, value: any): any };
        let useForm = false;
        // use FormData to transmit files using content-type "multipart/form-data"
        useForm = canConsumeForm;
        if (useForm) {
            formParams = new FormData();
        } else {
            formParams = new URLSearchParams();
        }

        if (requestParameters['fileName'] != null) {
            formParams.append('fileName', requestParameters['fileName'] as any);
        }

        if (requestParameters['file'] != null) {
            formParams.append('file', requestParameters['file'] as any);
        }

        const response = await this.request({
            path: `/shells/{aasIdentifier}/asset-information/thumbnail`.replace(`{${"aasIdentifier"}}`, encodeURIComponent(String(requestParameters['aasIdentifier']))),
            method: 'PUT',
            headers: headerParameters,
            query: queryParameters,
            body: formParams,
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     */
    async putThumbnailAasRepository(requestParameters: PutThumbnailAasRepositoryRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void> {
        await this.putThumbnailAasRepositoryRaw(requestParameters, initOverrides);
    }

}

/**
 * @export
 */
export const GetAllSubmodelElementsAasRepositoryLevelEnum = {
    Deep: 'deep',
    Core: 'core'
} as const;
export type GetAllSubmodelElementsAasRepositoryLevelEnum = typeof GetAllSubmodelElementsAasRepositoryLevelEnum[keyof typeof GetAllSubmodelElementsAasRepositoryLevelEnum];
/**
 * @export
 */
export const GetAllSubmodelElementsAasRepositoryExtentEnum = {
    WithBlobValue: 'withBlobValue',
    WithoutBlobValue: 'withoutBlobValue'
} as const;
export type GetAllSubmodelElementsAasRepositoryExtentEnum = typeof GetAllSubmodelElementsAasRepositoryExtentEnum[keyof typeof GetAllSubmodelElementsAasRepositoryExtentEnum];
/**
 * @export
 */
export const GetAllSubmodelElementsPathAasRepositoryLevelEnum = {
    Deep: 'deep',
    Core: 'core'
} as const;
export type GetAllSubmodelElementsPathAasRepositoryLevelEnum = typeof GetAllSubmodelElementsPathAasRepositoryLevelEnum[keyof typeof GetAllSubmodelElementsPathAasRepositoryLevelEnum];
/**
 * @export
 */
export const GetAllSubmodelElementsPathAasRepositoryExtentEnum = {
    WithBlobValue: 'withBlobValue',
    WithoutBlobValue: 'withoutBlobValue'
} as const;
export type GetAllSubmodelElementsPathAasRepositoryExtentEnum = typeof GetAllSubmodelElementsPathAasRepositoryExtentEnum[keyof typeof GetAllSubmodelElementsPathAasRepositoryExtentEnum];
/**
 * @export
 */
export const GetAllSubmodelElementsReferenceAasRepositoryLevelEnum = {
    Core: 'core'
} as const;
export type GetAllSubmodelElementsReferenceAasRepositoryLevelEnum = typeof GetAllSubmodelElementsReferenceAasRepositoryLevelEnum[keyof typeof GetAllSubmodelElementsReferenceAasRepositoryLevelEnum];
/**
 * @export
 */
export const GetAllSubmodelElementsValueOnlyAasRepositoryLevelEnum = {
    Deep: 'deep',
    Core: 'core'
} as const;
export type GetAllSubmodelElementsValueOnlyAasRepositoryLevelEnum = typeof GetAllSubmodelElementsValueOnlyAasRepositoryLevelEnum[keyof typeof GetAllSubmodelElementsValueOnlyAasRepositoryLevelEnum];
/**
 * @export
 */
export const GetSubmodelByIdAasRepositoryLevelEnum = {
    Deep: 'deep',
    Core: 'core'
} as const;
export type GetSubmodelByIdAasRepositoryLevelEnum = typeof GetSubmodelByIdAasRepositoryLevelEnum[keyof typeof GetSubmodelByIdAasRepositoryLevelEnum];
/**
 * @export
 */
export const GetSubmodelByIdAasRepositoryExtentEnum = {
    WithBlobValue: 'withBlobValue',
    WithoutBlobValue: 'withoutBlobValue'
} as const;
export type GetSubmodelByIdAasRepositoryExtentEnum = typeof GetSubmodelByIdAasRepositoryExtentEnum[keyof typeof GetSubmodelByIdAasRepositoryExtentEnum];
/**
 * @export
 */
export const GetSubmodelByIdPathAasRepositoryLevelEnum = {
    Deep: 'deep',
    Core: 'core'
} as const;
export type GetSubmodelByIdPathAasRepositoryLevelEnum = typeof GetSubmodelByIdPathAasRepositoryLevelEnum[keyof typeof GetSubmodelByIdPathAasRepositoryLevelEnum];
/**
 * @export
 */
export const GetSubmodelByIdValueOnlyAasRepositoryLevelEnum = {
    Deep: 'deep',
    Core: 'core'
} as const;
export type GetSubmodelByIdValueOnlyAasRepositoryLevelEnum = typeof GetSubmodelByIdValueOnlyAasRepositoryLevelEnum[keyof typeof GetSubmodelByIdValueOnlyAasRepositoryLevelEnum];
/**
 * @export
 */
export const GetSubmodelByIdValueOnlyAasRepositoryExtentEnum = {
    WithBlobValue: 'withBlobValue',
    WithoutBlobValue: 'withoutBlobValue'
} as const;
export type GetSubmodelByIdValueOnlyAasRepositoryExtentEnum = typeof GetSubmodelByIdValueOnlyAasRepositoryExtentEnum[keyof typeof GetSubmodelByIdValueOnlyAasRepositoryExtentEnum];
/**
 * @export
 */
export const GetSubmodelElementByPathAasRepositoryLevelEnum = {
    Deep: 'deep',
    Core: 'core'
} as const;
export type GetSubmodelElementByPathAasRepositoryLevelEnum = typeof GetSubmodelElementByPathAasRepositoryLevelEnum[keyof typeof GetSubmodelElementByPathAasRepositoryLevelEnum];
/**
 * @export
 */
export const GetSubmodelElementByPathAasRepositoryExtentEnum = {
    WithBlobValue: 'withBlobValue',
    WithoutBlobValue: 'withoutBlobValue'
} as const;
export type GetSubmodelElementByPathAasRepositoryExtentEnum = typeof GetSubmodelElementByPathAasRepositoryExtentEnum[keyof typeof GetSubmodelElementByPathAasRepositoryExtentEnum];
/**
 * @export
 */
export const GetSubmodelElementByPathPathAasRepositoryLevelEnum = {
    Deep: 'deep',
    Core: 'core'
} as const;
export type GetSubmodelElementByPathPathAasRepositoryLevelEnum = typeof GetSubmodelElementByPathPathAasRepositoryLevelEnum[keyof typeof GetSubmodelElementByPathPathAasRepositoryLevelEnum];
/**
 * @export
 */
export const GetSubmodelElementByPathReferenceAasRepositoryLevelEnum = {
    Core: 'core'
} as const;
export type GetSubmodelElementByPathReferenceAasRepositoryLevelEnum = typeof GetSubmodelElementByPathReferenceAasRepositoryLevelEnum[keyof typeof GetSubmodelElementByPathReferenceAasRepositoryLevelEnum];
/**
 * @export
 */
export const GetSubmodelElementByPathValueOnlyAasRepositoryLevelEnum = {
    Deep: 'deep',
    Core: 'core'
} as const;
export type GetSubmodelElementByPathValueOnlyAasRepositoryLevelEnum = typeof GetSubmodelElementByPathValueOnlyAasRepositoryLevelEnum[keyof typeof GetSubmodelElementByPathValueOnlyAasRepositoryLevelEnum];
/**
 * @export
 */
export const GetSubmodelElementByPathValueOnlyAasRepositoryExtentEnum = {
    WithBlobValue: 'withBlobValue',
    WithoutBlobValue: 'withoutBlobValue'
} as const;
export type GetSubmodelElementByPathValueOnlyAasRepositoryExtentEnum = typeof GetSubmodelElementByPathValueOnlyAasRepositoryExtentEnum[keyof typeof GetSubmodelElementByPathValueOnlyAasRepositoryExtentEnum];
/**
 * @export
 */
export const PatchSubmodelAasRepositoryLevelEnum = {
    Core: 'core'
} as const;
export type PatchSubmodelAasRepositoryLevelEnum = typeof PatchSubmodelAasRepositoryLevelEnum[keyof typeof PatchSubmodelAasRepositoryLevelEnum];
/**
 * @export
 */
export const PatchSubmodelByIdValueOnlyAasRepositoryLevelEnum = {
    Core: 'core'
} as const;
export type PatchSubmodelByIdValueOnlyAasRepositoryLevelEnum = typeof PatchSubmodelByIdValueOnlyAasRepositoryLevelEnum[keyof typeof PatchSubmodelByIdValueOnlyAasRepositoryLevelEnum];
/**
 * @export
 */
export const PatchSubmodelElementValueByPathAasRepositoryLevelEnum = {
    Deep: 'deep',
    Core: 'core'
} as const;
export type PatchSubmodelElementValueByPathAasRepositoryLevelEnum = typeof PatchSubmodelElementValueByPathAasRepositoryLevelEnum[keyof typeof PatchSubmodelElementValueByPathAasRepositoryLevelEnum];
/**
 * @export
 */
export const PatchSubmodelElementValueByPathValueOnlyLevelEnum = {
    Deep: 'deep',
    Core: 'core'
} as const;
export type PatchSubmodelElementValueByPathValueOnlyLevelEnum = typeof PatchSubmodelElementValueByPathValueOnlyLevelEnum[keyof typeof PatchSubmodelElementValueByPathValueOnlyLevelEnum];
